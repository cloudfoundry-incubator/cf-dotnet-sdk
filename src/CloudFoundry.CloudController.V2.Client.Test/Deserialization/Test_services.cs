//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client;
using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.CSharp;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.CodeDom.Compiler;

namespace CloudFoundry.CloudController.V2.Test.Deserialization
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class ServicesTest
    {


        [TestMethod]
        public void TestListAllServicePlansForServiceResponse()
        {
            string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""fca91a3b-36dd-4a76-b3a1-6d1aae4534ff"",
        ""url"": ""/v2/service_plans/4c39dcf0-34c3-409f-b424-017d9c5c2164"",
        ""created_at"": ""2016-05-05T14:15:15Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1659"",
        ""free"": false,
        ""description"": ""desc-107"",
        ""service_guid"": ""fca91a3b-36dd-4a76-b3a1-6d1aae4534ff"",
        ""extra"": null,
        ""unique_id"": ""0c2308e2-ad82-4b19-bd60-9b0d8626d624"",
        ""public"": true,
        ""active"": true,
        ""service_url"": ""/v2/services/fd987341-c7e1-4376-9ca6-3682375cf01a"",
        ""service_instances_url"": ""/v2/service_plans/4c39dcf0-34c3-409f-b424-017d9c5c2164/service_instances""
      }
    }
  ]
}";

            PagedResponseCollection<ListAllServicePlansForServiceResponse> page = Utilities.DeserializePage<ListAllServicePlansForServiceResponse>(json, null);

            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalResults), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalPages), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.PreviousUrl), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.NextUrl), true);
            Assert.AreEqual("fca91a3b-36dd-4a76-b3a1-6d1aae4534ff", TestUtil.ToTestableString(page[0].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/service_plans/4c39dcf0-34c3-409f-b424-017d9c5c2164", TestUtil.ToTestableString(page[0].EntityMetadata.Url), true);
            Assert.AreEqual("2016-05-05T14:15:15Z", TestUtil.ToTestableString(page[0].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-1659", TestUtil.ToTestableString(page[0].Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[0].Free), true);
            Assert.AreEqual("desc-107", TestUtil.ToTestableString(page[0].Description), true);
            Assert.AreEqual("fca91a3b-36dd-4a76-b3a1-6d1aae4534ff", TestUtil.ToTestableString(page[0].ServiceGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Extra), true);
            Assert.AreEqual("0c2308e2-ad82-4b19-bd60-9b0d8626d624", TestUtil.ToTestableString(page[0].UniqueId), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(page[0].Public), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(page[0].Active), true);
            Assert.AreEqual("/v2/services/fd987341-c7e1-4376-9ca6-3682375cf01a", TestUtil.ToTestableString(page[0].ServiceUrl), true);
            Assert.AreEqual("/v2/service_plans/4c39dcf0-34c3-409f-b424-017d9c5c2164/service_instances", TestUtil.ToTestableString(page[0].ServiceInstancesUrl), true);
        }

        [TestMethod]
        public void TestDeleteServiceResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""40e7bffa-84b0-45ea-bcf2-34360aa5b566"",
    ""created_at"": ""2016-05-05T14:15:15Z"",
    ""url"": ""/v2/jobs/0c0a53d8-036d-4f3a-bd94-80cace02832b""
  },
  ""entity"": {
    ""guid"": ""40e7bffa-84b0-45ea-bcf2-34360aa5b566"",
    ""status"": ""queued""
  }
}";

            DeleteServiceResponse obj = Utilities.DeserializeJson<DeleteServiceResponse>(json);

            Assert.AreEqual("40e7bffa-84b0-45ea-bcf2-34360aa5b566", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("2016-05-05T14:15:15Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("/v2/jobs/0c0a53d8-036d-4f3a-bd94-80cace02832b", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("40e7bffa-84b0-45ea-bcf2-34360aa5b566", TestUtil.ToTestableString(obj.Guid), true);
            Assert.AreEqual("queued", TestUtil.ToTestableString(obj.Status), true);
        }

        [TestMethod]
        public void TestRetrieveServiceResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""a985a3ef-68a9-489e-b438-f5d4391e6a7a"",
    ""url"": ""/v2/services/27c8ced3-6633-40e1-b846-e9608c5d8f0f"",
    ""created_at"": ""2016-05-05T14:15:15Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""label"": ""label-40"",
    ""provider"": null,
    ""url"": null,
    ""description"": ""desc-105"",
    ""long_description"": null,
    ""version"": null,
    ""info_url"": null,
    ""active"": true,
    ""bindable"": true,
    ""unique_id"": ""3588c98c-d2ea-4a7a-9055-d2655972406d"",
    ""extra"": null,
    ""tags"": [

    ],
    ""requires"": [

    ],
    ""documentation_url"": null,
    ""service_broker_guid"": ""a985a3ef-68a9-489e-b438-f5d4391e6a7a"",
    ""plan_updateable"": false,
    ""service_plans_url"": ""/v2/services/27c8ced3-6633-40e1-b846-e9608c5d8f0f/service_plans""
  }
}";

            RetrieveServiceResponse obj = Utilities.DeserializeJson<RetrieveServiceResponse>(json);

            Assert.AreEqual("a985a3ef-68a9-489e-b438-f5d4391e6a7a", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/services/27c8ced3-6633-40e1-b846-e9608c5d8f0f", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2016-05-05T14:15:15Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("label-40", TestUtil.ToTestableString(obj.Label), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Provider), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Url), true);
            Assert.AreEqual("desc-105", TestUtil.ToTestableString(obj.Description), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.LongDescription), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.InfoUrl), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.Active), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.Bindable), true);
            Assert.AreEqual("3588c98c-d2ea-4a7a-9055-d2655972406d", TestUtil.ToTestableString(obj.UniqueId), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DocumentationUrl), true);
            Assert.AreEqual("a985a3ef-68a9-489e-b438-f5d4391e6a7a", TestUtil.ToTestableString(obj.ServiceBrokerGuid), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.PlanUpdateable), true);
            Assert.AreEqual("/v2/services/27c8ced3-6633-40e1-b846-e9608c5d8f0f/service_plans", TestUtil.ToTestableString(obj.ServicePlansUrl), true);
        }

        [TestMethod]
        public void TestListAllServicesResponse()
        {
            string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""3363a57d-d30d-442a-8e62-d73b45f99049"",
        ""url"": ""/v2/services/2176cc7e-dd89-4ca0-9590-732ced132988"",
        ""created_at"": ""2016-05-05T14:15:15Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-39"",
        ""provider"": null,
        ""url"": null,
        ""description"": ""desc-104"",
        ""long_description"": null,
        ""version"": null,
        ""info_url"": null,
        ""active"": true,
        ""bindable"": true,
        ""unique_id"": ""c2f2a66b-852f-4a0e-96ce-3de60a60ad56"",
        ""extra"": null,
        ""tags"": [

        ],
        ""requires"": [

        ],
        ""documentation_url"": null,
        ""service_broker_guid"": ""3363a57d-d30d-442a-8e62-d73b45f99049"",
        ""plan_updateable"": false,
        ""service_plans_url"": ""/v2/services/2176cc7e-dd89-4ca0-9590-732ced132988/service_plans""
      }
    }
  ]
}";

            PagedResponseCollection<ListAllServicesResponse> page = Utilities.DeserializePage<ListAllServicesResponse>(json, null);

            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalResults), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalPages), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.PreviousUrl), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.NextUrl), true);
            Assert.AreEqual("3363a57d-d30d-442a-8e62-d73b45f99049", TestUtil.ToTestableString(page[0].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/services/2176cc7e-dd89-4ca0-9590-732ced132988", TestUtil.ToTestableString(page[0].EntityMetadata.Url), true);
            Assert.AreEqual("2016-05-05T14:15:15Z", TestUtil.ToTestableString(page[0].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("label-39", TestUtil.ToTestableString(page[0].Label), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Provider), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Url), true);
            Assert.AreEqual("desc-104", TestUtil.ToTestableString(page[0].Description), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].LongDescription), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].InfoUrl), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(page[0].Active), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(page[0].Bindable), true);
            Assert.AreEqual("c2f2a66b-852f-4a0e-96ce-3de60a60ad56", TestUtil.ToTestableString(page[0].UniqueId), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Extra), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].DocumentationUrl), true);
            Assert.AreEqual("3363a57d-d30d-442a-8e62-d73b45f99049", TestUtil.ToTestableString(page[0].ServiceBrokerGuid), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[0].PlanUpdateable), true);
            Assert.AreEqual("/v2/services/2176cc7e-dd89-4ca0-9590-732ced132988/service_plans", TestUtil.ToTestableString(page[0].ServicePlansUrl), true);
        }
    }
}
