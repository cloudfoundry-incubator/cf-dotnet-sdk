//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client;
using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.CSharp;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.CodeDom.Compiler;

namespace CloudFoundry.CloudController.V2.Test.Deserialization
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class ServiceBrokersTest
    {


        [TestMethod]
        public void TestRetrieveServiceBrokerResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""f3689cae-d7fd-4daa-954c-e632f6646b4a"",
    ""url"": ""/v2/service_brokers/802ba067-d298-4615-9b48-5486e286600f"",
    ""created_at"": ""2017-01-04T15:59:09Z"",
    ""updated_at"": ""2017-01-04T15:59:09Z""
  },
  ""entity"": {
    ""name"": ""name-2550"",
    ""broker_url"": ""https://foo.com/url-108"",
    ""auth_username"": ""auth_username-83"",
    ""space_guid"": ""f3689cae-d7fd-4daa-954c-e632f6646b4a""
  }
}";

            RetrieveServiceBrokerResponse obj = Utilities.DeserializeJson<RetrieveServiceBrokerResponse>(json);

            Assert.AreEqual("f3689cae-d7fd-4daa-954c-e632f6646b4a", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/service_brokers/802ba067-d298-4615-9b48-5486e286600f", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2017-01-04T15:59:09Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2017-01-04T15:59:09Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-2550", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("https://foo.com/url-108", TestUtil.ToTestableString(obj.BrokerUrl), true);
            Assert.AreEqual("auth_username-83", TestUtil.ToTestableString(obj.AuthUsername), true);
            Assert.AreEqual("f3689cae-d7fd-4daa-954c-e632f6646b4a", TestUtil.ToTestableString(obj.SpaceGuid), true);
        }

        [TestMethod]
        public void TestUpdateServiceBrokerResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""14bd1909-9975-4bb2-9aef-638add5ab481"",
    ""created_at"": ""2017-01-04T15:59:09Z"",
    ""updated_at"": ""2017-01-04T15:59:09Z"",
    ""url"": ""/v2/service_brokers/397773f4-aa5c-45aa-9e5c-ef022b6d0306""
  },
  ""entity"": {
    ""name"": ""name-2556"",
    ""broker_url"": ""https://mybroker.example.com"",
    ""auth_username"": ""admin-user"",
    ""space_guid"": ""14bd1909-9975-4bb2-9aef-638add5ab481""
  }
}";

            UpdateServiceBrokerResponse obj = Utilities.DeserializeJson<UpdateServiceBrokerResponse>(json);

            Assert.AreEqual("14bd1909-9975-4bb2-9aef-638add5ab481", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("2017-01-04T15:59:09Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2017-01-04T15:59:09Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("/v2/service_brokers/397773f4-aa5c-45aa-9e5c-ef022b6d0306", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("name-2556", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("https://mybroker.example.com", TestUtil.ToTestableString(obj.BrokerUrl), true);
            Assert.AreEqual("admin-user", TestUtil.ToTestableString(obj.AuthUsername), true);
            Assert.AreEqual("14bd1909-9975-4bb2-9aef-638add5ab481", TestUtil.ToTestableString(obj.SpaceGuid), true);
        }

        [TestMethod]
        public void TestCreateServiceBrokerResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""61212a7d-1f6c-4e3a-9235-3419f06acf3b"",
    ""created_at"": ""2017-01-04T15:59:09Z"",
    ""updated_at"": ""2017-01-04T15:59:09Z"",
    ""url"": ""/v2/service_brokers/e14eff94-2732-461a-a154-60b9948a0fe4""
  },
  ""entity"": {
    ""name"": ""service-broker-name"",
    ""broker_url"": ""https://broker.example.com"",
    ""auth_username"": ""admin"",
    ""space_guid"": null
  }
}";

            CreateServiceBrokerResponse obj = Utilities.DeserializeJson<CreateServiceBrokerResponse>(json);

            Assert.AreEqual("61212a7d-1f6c-4e3a-9235-3419f06acf3b", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("2017-01-04T15:59:09Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2017-01-04T15:59:09Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("/v2/service_brokers/e14eff94-2732-461a-a154-60b9948a0fe4", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("service-broker-name", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("https://broker.example.com", TestUtil.ToTestableString(obj.BrokerUrl), true);
            Assert.AreEqual("admin", TestUtil.ToTestableString(obj.AuthUsername), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceGuid), true);
        }

        [TestMethod]
        public void TestListAllServiceBrokersResponse()
        {
            string json = @"{
  ""total_results"": 3,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""5df2e408-a04a-4ba9-ba87-8e99572179c1"",
        ""url"": ""/v2/service_brokers/b0cd156e-7c31-496b-a8bf-5da181e65776"",
        ""created_at"": ""2017-01-04T15:59:09Z"",
        ""updated_at"": ""2017-01-04T15:59:09Z""
      },
      ""entity"": {
        ""name"": ""name-2538"",
        ""broker_url"": ""https://foo.com/url-102"",
        ""auth_username"": ""auth_username-77"",
        ""space_guid"": ""5df2e408-a04a-4ba9-ba87-8e99572179c1""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""5df2e408-a04a-4ba9-ba87-8e99572179c1"",
        ""url"": ""/v2/service_brokers/7cca06e0-e865-4eb3-b6f8-1981b56a7747"",
        ""created_at"": ""2017-01-04T15:59:09Z"",
        ""updated_at"": ""2017-01-04T15:59:09Z""
      },
      ""entity"": {
        ""name"": ""name-2539"",
        ""broker_url"": ""https://foo.com/url-103"",
        ""auth_username"": ""auth_username-78"",
        ""space_guid"": null
      }
    },
    {
      ""metadata"": {
        ""guid"": ""5df2e408-a04a-4ba9-ba87-8e99572179c1"",
        ""url"": ""/v2/service_brokers/fce2aa7d-6c69-470d-8274-aa56c511ba82"",
        ""created_at"": ""2017-01-04T15:59:09Z"",
        ""updated_at"": ""2017-01-04T15:59:09Z""
      },
      ""entity"": {
        ""name"": ""name-2540"",
        ""broker_url"": ""https://foo.com/url-104"",
        ""auth_username"": ""auth_username-79"",
        ""space_guid"": null
      }
    }
  ]
}";

            PagedResponseCollection<ListAllServiceBrokersResponse> page = Utilities.DeserializePage<ListAllServiceBrokersResponse>(json, null);

            Assert.AreEqual("3", TestUtil.ToTestableString(page.Properties.TotalResults), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalPages), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.PreviousUrl), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.NextUrl), true);
            Assert.AreEqual("5df2e408-a04a-4ba9-ba87-8e99572179c1", TestUtil.ToTestableString(page[0].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/service_brokers/b0cd156e-7c31-496b-a8bf-5da181e65776", TestUtil.ToTestableString(page[0].EntityMetadata.Url), true);
            Assert.AreEqual("2017-01-04T15:59:09Z", TestUtil.ToTestableString(page[0].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2017-01-04T15:59:09Z", TestUtil.ToTestableString(page[0].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-2538", TestUtil.ToTestableString(page[0].Name), true);
            Assert.AreEqual("https://foo.com/url-102", TestUtil.ToTestableString(page[0].BrokerUrl), true);
            Assert.AreEqual("auth_username-77", TestUtil.ToTestableString(page[0].AuthUsername), true);
            Assert.AreEqual("5df2e408-a04a-4ba9-ba87-8e99572179c1", TestUtil.ToTestableString(page[0].SpaceGuid), true);
            Assert.AreEqual("5df2e408-a04a-4ba9-ba87-8e99572179c1", TestUtil.ToTestableString(page[1].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/service_brokers/7cca06e0-e865-4eb3-b6f8-1981b56a7747", TestUtil.ToTestableString(page[1].EntityMetadata.Url), true);
            Assert.AreEqual("2017-01-04T15:59:09Z", TestUtil.ToTestableString(page[1].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2017-01-04T15:59:09Z", TestUtil.ToTestableString(page[1].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-2539", TestUtil.ToTestableString(page[1].Name), true);
            Assert.AreEqual("https://foo.com/url-103", TestUtil.ToTestableString(page[1].BrokerUrl), true);
            Assert.AreEqual("auth_username-78", TestUtil.ToTestableString(page[1].AuthUsername), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].SpaceGuid), true);
            Assert.AreEqual("5df2e408-a04a-4ba9-ba87-8e99572179c1", TestUtil.ToTestableString(page[2].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/service_brokers/fce2aa7d-6c69-470d-8274-aa56c511ba82", TestUtil.ToTestableString(page[2].EntityMetadata.Url), true);
            Assert.AreEqual("2017-01-04T15:59:09Z", TestUtil.ToTestableString(page[2].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2017-01-04T15:59:09Z", TestUtil.ToTestableString(page[2].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-2540", TestUtil.ToTestableString(page[2].Name), true);
            Assert.AreEqual("https://foo.com/url-104", TestUtil.ToTestableString(page[2].BrokerUrl), true);
            Assert.AreEqual("auth_username-79", TestUtil.ToTestableString(page[2].AuthUsername), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].SpaceGuid), true);
        }
    }
}
