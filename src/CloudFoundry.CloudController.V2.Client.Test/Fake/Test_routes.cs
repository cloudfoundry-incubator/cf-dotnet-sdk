//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class RoutesEndpoint
{
        [TestMethod]
        public void ListAllRoutesTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""2f34960d-1550-4eb5-85c8-fe5736b0324f"",
        ""url"": ""/v2/routes/d8efb70e-4b07-4b43-a4e6-f9da3557512a"",
        ""created_at"": ""2016-05-05T14:14:52Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""host"": ""host-13"",
        ""path"": """",
        ""domain_guid"": ""2f34960d-1550-4eb5-85c8-fe5736b0324f"",
        ""space_guid"": ""2f34960d-1550-4eb5-85c8-fe5736b0324f"",
        ""service_instance_guid"": ""2f34960d-1550-4eb5-85c8-fe5736b0324f"",
        ""port"": null,
        ""domain_url"": ""/v2/domains/3f6c97e2-8947-4389-86b8-a0e8d2cb44d6"",
        ""space_url"": ""/v2/spaces/06917923-af5e-4643-8e6f-c39d1caba04a"",
        ""service_instance_url"": ""/v2/service_instances/7e2460c5-0541-4f3f-a94c-6e2e1e5c457e"",
        ""apps_url"": ""/v2/routes/d8efb70e-4b07-4b43-a4e6-f9da3557512a/apps"",
        ""route_mappings_url"": ""/v2/routes/d8efb70e-4b07-4b43-a4e6-f9da3557512a/route_mappings""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Routes.ListAllRoutes().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("2f34960d-1550-4eb5-85c8-fe5736b0324f", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/d8efb70e-4b07-4b43-a4e6-f9da3557512a", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:14:52Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-13", TestUtil.ToTestableString(obj[0].Host), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Path), true);
                Assert.AreEqual("2f34960d-1550-4eb5-85c8-fe5736b0324f", TestUtil.ToTestableString(obj[0].DomainGuid), true);
                Assert.AreEqual("2f34960d-1550-4eb5-85c8-fe5736b0324f", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("2f34960d-1550-4eb5-85c8-fe5736b0324f", TestUtil.ToTestableString(obj[0].ServiceInstanceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Port), true);
                Assert.AreEqual("/v2/domains/3f6c97e2-8947-4389-86b8-a0e8d2cb44d6", TestUtil.ToTestableString(obj[0].DomainUrl), true);
                Assert.AreEqual("/v2/spaces/06917923-af5e-4643-8e6f-c39d1caba04a", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/service_instances/7e2460c5-0541-4f3f-a94c-6e2e1e5c457e", TestUtil.ToTestableString(obj[0].ServiceInstanceUrl), true);
                Assert.AreEqual("/v2/routes/d8efb70e-4b07-4b43-a4e6-f9da3557512a/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/routes/d8efb70e-4b07-4b43-a4e6-f9da3557512a/route_mappings", TestUtil.ToTestableString(obj[0].RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void DeleteRouteTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                dynamic recursive = null;


                cfClient.Routes.DeleteRoute(guid, recursive).Wait();

            }
        }

        [TestMethod]
        public void UpdateRouteTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""02860595-72dd-49b8-92ae-fb9c88eb2554"",
    ""url"": ""/v2/routes/89c69064-886a-4128-9196-e7fbe144d622"",
    ""created_at"": ""2016-05-05T14:14:52Z"",
    ""updated_at"": ""2016-05-05T14:14:52Z""
  },
  ""entity"": {
    ""host"": ""host-12"",
    ""path"": """",
    ""domain_guid"": ""02860595-72dd-49b8-92ae-fb9c88eb2554"",
    ""space_guid"": ""02860595-72dd-49b8-92ae-fb9c88eb2554"",
    ""service_instance_guid"": null,
    ""port"": 10000,
    ""domain_url"": ""/v2/domains/d1c9ce6c-a5a5-424f-8f87-38389bfb05cb"",
    ""space_url"": ""/v2/spaces/e602f89e-6e24-4ff5-ad4c-d3e4cd4df61e"",
    ""apps_url"": ""/v2/routes/89c69064-886a-4128-9196-e7fbe144d622/apps"",
    ""route_mappings_url"": ""/v2/routes/89c69064-886a-4128-9196-e7fbe144d622/route_mappings""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateRouteRequest value = new UpdateRouteRequest();


                var obj = cfClient.Routes.UpdateRoute(guid, value).Result;


                Assert.AreEqual("02860595-72dd-49b8-92ae-fb9c88eb2554", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/89c69064-886a-4128-9196-e7fbe144d622", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:14:52Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-05-05T14:14:52Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-12", TestUtil.ToTestableString(obj.Host), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Path), true);
                Assert.AreEqual("02860595-72dd-49b8-92ae-fb9c88eb2554", TestUtil.ToTestableString(obj.DomainGuid), true);
                Assert.AreEqual("02860595-72dd-49b8-92ae-fb9c88eb2554", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.ServiceInstanceGuid), true);
                Assert.AreEqual("10000", TestUtil.ToTestableString(obj.Port), true);
                Assert.AreEqual("/v2/domains/d1c9ce6c-a5a5-424f-8f87-38389bfb05cb", TestUtil.ToTestableString(obj.DomainUrl), true);
                Assert.AreEqual("/v2/spaces/e602f89e-6e24-4ff5-ad4c-d3e4cd4df61e", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/routes/89c69064-886a-4128-9196-e7fbe144d622/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/routes/89c69064-886a-4128-9196-e7fbe144d622/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveRouteTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""158ff5ec-f07a-4bd4-ba7a-4da45eb601a0"",
    ""url"": ""/v2/routes/7d5b36a0-d129-43ee-a974-8280467e7606"",
    ""created_at"": ""2016-05-05T14:14:52Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""host"": ""host-14"",
    ""path"": """",
    ""domain_guid"": ""158ff5ec-f07a-4bd4-ba7a-4da45eb601a0"",
    ""space_guid"": ""158ff5ec-f07a-4bd4-ba7a-4da45eb601a0"",
    ""service_instance_guid"": ""158ff5ec-f07a-4bd4-ba7a-4da45eb601a0"",
    ""port"": null,
    ""domain_url"": ""/v2/domains/3da62c75-0192-4e82-91cb-844b45985fdb"",
    ""space_url"": ""/v2/spaces/fdc32b22-2e73-435d-9288-8ca8cbb98fda"",
    ""service_instance_url"": ""/v2/service_instances/28fa5dca-5f79-460d-971c-15fcb07002ff"",
    ""apps_url"": ""/v2/routes/7d5b36a0-d129-43ee-a974-8280467e7606/apps"",
    ""route_mappings_url"": ""/v2/routes/7d5b36a0-d129-43ee-a974-8280467e7606/route_mappings""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Routes.RetrieveRoute(guid).Result;


                Assert.AreEqual("158ff5ec-f07a-4bd4-ba7a-4da45eb601a0", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/7d5b36a0-d129-43ee-a974-8280467e7606", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:14:52Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-14", TestUtil.ToTestableString(obj.Host), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Path), true);
                Assert.AreEqual("158ff5ec-f07a-4bd4-ba7a-4da45eb601a0", TestUtil.ToTestableString(obj.DomainGuid), true);
                Assert.AreEqual("158ff5ec-f07a-4bd4-ba7a-4da45eb601a0", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("158ff5ec-f07a-4bd4-ba7a-4da45eb601a0", TestUtil.ToTestableString(obj.ServiceInstanceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Port), true);
                Assert.AreEqual("/v2/domains/3da62c75-0192-4e82-91cb-844b45985fdb", TestUtil.ToTestableString(obj.DomainUrl), true);
                Assert.AreEqual("/v2/spaces/fdc32b22-2e73-435d-9288-8ca8cbb98fda", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/service_instances/28fa5dca-5f79-460d-971c-15fcb07002ff", TestUtil.ToTestableString(obj.ServiceInstanceUrl), true);
                Assert.AreEqual("/v2/routes/7d5b36a0-d129-43ee-a974-8280467e7606/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/routes/7d5b36a0-d129-43ee-a974-8280467e7606/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void CheckHttpRouteExistsTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? domain_guid = Guid.NewGuid();

                dynamic host = null;

                dynamic path = null;


                cfClient.Routes.CheckHttpRouteExists(domain_guid, host, path).Wait();

            }
        }

        [TestMethod]
        public void ListAllRouteMappingsForRouteTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""fe529b73-0e40-416e-ad65-fbd771f31926"",
        ""url"": ""/v2/route_mappings/55b2deda-da7f-4f19-b6ce-6209ef4dfb05"",
        ""created_at"": ""2016-05-05T14:14:51Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""app_port"": null,
        ""app_guid"": ""fe529b73-0e40-416e-ad65-fbd771f31926"",
        ""route_guid"": ""fe529b73-0e40-416e-ad65-fbd771f31926"",
        ""app_url"": ""/v2/apps/26fcf20b-e4c9-4754-a8a0-79028918b621"",
        ""route_url"": ""/v2/routes/e1231176-c2af-437f-abbc-a861d8efc4e2""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Routes.ListAllRouteMappingsForRoute(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("fe529b73-0e40-416e-ad65-fbd771f31926", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/route_mappings/55b2deda-da7f-4f19-b6ce-6209ef4dfb05", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:14:51Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].AppPort), true);
                Assert.AreEqual("fe529b73-0e40-416e-ad65-fbd771f31926", TestUtil.ToTestableString(obj[0].AppGuid), true);
                Assert.AreEqual("fe529b73-0e40-416e-ad65-fbd771f31926", TestUtil.ToTestableString(obj[0].RouteGuid), true);
                Assert.AreEqual("/v2/apps/26fcf20b-e4c9-4754-a8a0-79028918b621", TestUtil.ToTestableString(obj[0].AppUrl), true);
                Assert.AreEqual("/v2/routes/e1231176-c2af-437f-abbc-a861d8efc4e2", TestUtil.ToTestableString(obj[0].RouteUrl), true);

            }
        }

        [TestMethod]
        public void CreateRouteTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""52885afa-15f7-4b20-b94f-2d187b3be466"",
    ""url"": ""/v2/routes/ff6d599f-fba2-4e6b-b620-32db9647d9e7"",
    ""created_at"": ""2016-05-05T14:14:51Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""host"": """",
    ""path"": """",
    ""domain_guid"": ""52885afa-15f7-4b20-b94f-2d187b3be466"",
    ""space_guid"": ""52885afa-15f7-4b20-b94f-2d187b3be466"",
    ""service_instance_guid"": null,
    ""port"": 10000,
    ""domain_url"": ""/v2/domains/5585b1e1-492f-475b-81c5-1205c2364332"",
    ""space_url"": ""/v2/spaces/0c681a6f-8c51-43bc-b080-5a496a1c7473"",
    ""apps_url"": ""/v2/routes/ff6d599f-fba2-4e6b-b620-32db9647d9e7/apps"",
    ""route_mappings_url"": ""/v2/routes/ff6d599f-fba2-4e6b-b620-32db9647d9e7/route_mappings""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateRouteRequest value = new CreateRouteRequest();


                var obj = cfClient.Routes.CreateRoute(value).Result;


                Assert.AreEqual("52885afa-15f7-4b20-b94f-2d187b3be466", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/ff6d599f-fba2-4e6b-b620-32db9647d9e7", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:14:51Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Host), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Path), true);
                Assert.AreEqual("52885afa-15f7-4b20-b94f-2d187b3be466", TestUtil.ToTestableString(obj.DomainGuid), true);
                Assert.AreEqual("52885afa-15f7-4b20-b94f-2d187b3be466", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.ServiceInstanceGuid), true);
                Assert.AreEqual("10000", TestUtil.ToTestableString(obj.Port), true);
                Assert.AreEqual("/v2/domains/5585b1e1-492f-475b-81c5-1205c2364332", TestUtil.ToTestableString(obj.DomainUrl), true);
                Assert.AreEqual("/v2/spaces/0c681a6f-8c51-43bc-b080-5a496a1c7473", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/routes/ff6d599f-fba2-4e6b-b620-32db9647d9e7/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/routes/ff6d599f-fba2-4e6b-b620-32db9647d9e7/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void CheckRouteExistsTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? domain_guid = Guid.NewGuid();

                dynamic host = null;

                dynamic path = null;

                dynamic port = null;


                cfClient.Routes.CheckRouteExists(domain_guid, host, path, port).Wait();

            }
        }

        [TestMethod]
        public void AssociateAppWithRouteTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""cde1198d-bb84-40ba-a854-05ae8ecf7aac"",
    ""url"": ""/v2/routes/2979bd34-6e33-4a4d-9384-1c4b44735380"",
    ""created_at"": ""2016-05-05T14:14:51Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""host"": ""host-7"",
    ""path"": """",
    ""domain_guid"": ""cde1198d-bb84-40ba-a854-05ae8ecf7aac"",
    ""space_guid"": ""cde1198d-bb84-40ba-a854-05ae8ecf7aac"",
    ""service_instance_guid"": null,
    ""port"": null,
    ""domain_url"": ""/v2/domains/965e3402-59f4-47a1-bc34-8061aee07d26"",
    ""space_url"": ""/v2/spaces/38a5794f-8152-430b-a3c5-3a2c70ca3707"",
    ""apps_url"": ""/v2/routes/2979bd34-6e33-4a4d-9384-1c4b44735380/apps"",
    ""route_mappings_url"": ""/v2/routes/2979bd34-6e33-4a4d-9384-1c4b44735380/route_mappings""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? app_guid = Guid.NewGuid();


                var obj = cfClient.Routes.AssociateAppWithRoute(guid, app_guid).Result;


                Assert.AreEqual("cde1198d-bb84-40ba-a854-05ae8ecf7aac", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/2979bd34-6e33-4a4d-9384-1c4b44735380", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:14:51Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-7", TestUtil.ToTestableString(obj.Host), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Path), true);
                Assert.AreEqual("cde1198d-bb84-40ba-a854-05ae8ecf7aac", TestUtil.ToTestableString(obj.DomainGuid), true);
                Assert.AreEqual("cde1198d-bb84-40ba-a854-05ae8ecf7aac", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.ServiceInstanceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Port), true);
                Assert.AreEqual("/v2/domains/965e3402-59f4-47a1-bc34-8061aee07d26", TestUtil.ToTestableString(obj.DomainUrl), true);
                Assert.AreEqual("/v2/spaces/38a5794f-8152-430b-a3c5-3a2c70ca3707", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/routes/2979bd34-6e33-4a4d-9384-1c4b44735380/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/routes/2979bd34-6e33-4a4d-9384-1c4b44735380/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllAppsForRouteTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""5a747018-6b1e-4cc2-89bd-754a4f2d9df2"",
        ""url"": ""/v2/apps/429d2884-fb97-4399-aedc-fec5dd9bb282"",
        ""created_at"": ""2016-05-05T14:14:51Z"",
        ""updated_at"": ""2016-05-05T14:14:51Z""
      },
      ""entity"": {
        ""name"": ""name-145"",
        ""production"": false,
        ""space_guid"": ""5a747018-6b1e-4cc2-89bd-754a4f2d9df2"",
        ""stack_guid"": ""5a747018-6b1e-4cc2-89bd-754a4f2d9df2"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""7be4e175-3c7f-4b41-b4f1-fdea1a3acc03"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""staging_failed_description"": null,
        ""diego"": false,
        ""docker_image"": null,
        ""package_updated_at"": ""2016-05-05T14:14:51Z"",
        ""detected_start_command"": """",
        ""enable_ssh"": true,
        ""docker_credentials_json"": {
          ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
        },
        ""ports"": null,
        ""space_url"": ""/v2/spaces/4014768e-cd10-41ff-a731-b2db77e662f6"",
        ""stack_url"": ""/v2/stacks/30c9b4a8-b8ab-4aa2-9c3c-f7fa56e0f709"",
        ""routes_url"": ""/v2/apps/429d2884-fb97-4399-aedc-fec5dd9bb282/routes"",
        ""events_url"": ""/v2/apps/429d2884-fb97-4399-aedc-fec5dd9bb282/events"",
        ""service_bindings_url"": ""/v2/apps/429d2884-fb97-4399-aedc-fec5dd9bb282/service_bindings"",
        ""route_mappings_url"": ""/v2/apps/429d2884-fb97-4399-aedc-fec5dd9bb282/route_mappings""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Routes.ListAllAppsForRoute(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("5a747018-6b1e-4cc2-89bd-754a4f2d9df2", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/429d2884-fb97-4399-aedc-fec5dd9bb282", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:14:51Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-05-05T14:14:51Z", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-145", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Production), true);
                Assert.AreEqual("5a747018-6b1e-4cc2-89bd-754a4f2d9df2", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("5a747018-6b1e-4cc2-89bd-754a4f2d9df2", TestUtil.ToTestableString(obj[0].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[0].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[0].State), true);
                Assert.AreEqual("7be4e175-3c7f-4b41-b4f1-fdea1a3acc03", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[0].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[0].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DockerImage), true);
                Assert.AreEqual("2016-05-05T14:14:51Z", TestUtil.ToTestableString(obj[0].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Ports), true);
                Assert.AreEqual("/v2/spaces/4014768e-cd10-41ff-a731-b2db77e662f6", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/30c9b4a8-b8ab-4aa2-9c3c-f7fa56e0f709", TestUtil.ToTestableString(obj[0].StackUrl), true);
                Assert.AreEqual("/v2/apps/429d2884-fb97-4399-aedc-fec5dd9bb282/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/apps/429d2884-fb97-4399-aedc-fec5dd9bb282/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/apps/429d2884-fb97-4399-aedc-fec5dd9bb282/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/429d2884-fb97-4399-aedc-fec5dd9bb282/route_mappings", TestUtil.ToTestableString(obj[0].RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveAppFromRouteTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? app_guid = Guid.NewGuid();


                cfClient.Routes.RemoveAppFromRoute(guid, app_guid).Wait();

            }
        }

    }
}