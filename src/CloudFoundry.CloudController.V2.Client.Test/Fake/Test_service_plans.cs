//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class ServicePlansEndpoint
{
        [TestMethod]
        public void ListAllServicePlansTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""cf6f5da0-977f-496d-8233-bb4ab4ba8294"",
        ""url"": ""/v2/service_plans/cf6f5da0-977f-496d-8233-bb4ab4ba8294"",
        ""created_at"": ""2016-02-05T12:14:48Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1744"",
        ""free"": false,
        ""description"": ""desc-119"",
        ""service_guid"": ""2aaa09d2-8210-492a-8775-74bc400704ed"",
        ""extra"": null,
        ""unique_id"": ""d54c8147-2cd3-4d74-8b61-1f963d26fa94"",
        ""public"": true,
        ""active"": true,
        ""service_url"": ""/v2/services/2aaa09d2-8210-492a-8775-74bc400704ed"",
        ""service_instances_url"": ""/v2/service_plans/cf6f5da0-977f-496d-8233-bb4ab4ba8294/service_instances""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.ServicePlans.ListAllServicePlans().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("cf6f5da0-977f-496d-8233-bb4ab4ba8294", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_plans/cf6f5da0-977f-496d-8233-bb4ab4ba8294", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:48Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1744", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Free), true);
                Assert.AreEqual("desc-119", TestUtil.ToTestableString(obj[0].Description), true);
                Assert.AreEqual("2aaa09d2-8210-492a-8775-74bc400704ed", TestUtil.ToTestableString(obj[0].ServiceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Extra), true);
                Assert.AreEqual("d54c8147-2cd3-4d74-8b61-1f963d26fa94", TestUtil.ToTestableString(obj[0].UniqueId), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Public), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("/v2/services/2aaa09d2-8210-492a-8775-74bc400704ed", TestUtil.ToTestableString(obj[0].ServiceUrl), true);
                Assert.AreEqual("/v2/service_plans/cf6f5da0-977f-496d-8233-bb4ab4ba8294/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveServicePlanTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""d33f2a38-8dcc-4fef-b75f-86c825dff820"",
    ""url"": ""/v2/service_plans/d33f2a38-8dcc-4fef-b75f-86c825dff820"",
    ""created_at"": ""2016-02-05T12:14:48Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1746"",
    ""free"": false,
    ""description"": ""desc-121"",
    ""service_guid"": ""4ba1588e-5797-48ca-80ca-88fd81701b88"",
    ""extra"": null,
    ""unique_id"": ""8f0b2132-2f2b-430d-afad-78afdcdb2f78"",
    ""public"": true,
    ""active"": true,
    ""service_url"": ""/v2/services/4ba1588e-5797-48ca-80ca-88fd81701b88"",
    ""service_instances_url"": ""/v2/service_plans/d33f2a38-8dcc-4fef-b75f-86c825dff820/service_instances""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServicePlans.RetrieveServicePlan(guid).Result;


                Assert.AreEqual("d33f2a38-8dcc-4fef-b75f-86c825dff820", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_plans/d33f2a38-8dcc-4fef-b75f-86c825dff820", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:48Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1746", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Free), true);
                Assert.AreEqual("desc-121", TestUtil.ToTestableString(obj.Description), true);
                Assert.AreEqual("4ba1588e-5797-48ca-80ca-88fd81701b88", TestUtil.ToTestableString(obj.ServiceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
                Assert.AreEqual("8f0b2132-2f2b-430d-afad-78afdcdb2f78", TestUtil.ToTestableString(obj.UniqueId), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Public), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("/v2/services/4ba1588e-5797-48ca-80ca-88fd81701b88", TestUtil.ToTestableString(obj.ServiceUrl), true);
                Assert.AreEqual("/v2/service_plans/d33f2a38-8dcc-4fef-b75f-86c825dff820/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceInstancesForServicePlanTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""aaf4400d-6961-4575-934d-441b4980beb3"",
        ""url"": ""/v2/service_instances/aaf4400d-6961-4575-934d-441b4980beb3"",
        ""created_at"": ""2016-02-05T12:14:48Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1751"",
        ""credentials"": {
          ""creds-key-464"": ""creds-val-464""
        },
        ""service_plan_guid"": ""e9bf8644-49b7-4e23-891f-6d79afef7815"",
        ""space_guid"": ""8f043f55-265a-4fd4-a981-f12a01a5c212"",
        ""gateway_data"": null,
        ""dashboard_url"": null,
        ""type"": ""managed_service_instance"",
        ""last_operation"": null,
        ""space_url"": ""/v2/spaces/8f043f55-265a-4fd4-a981-f12a01a5c212"",
        ""service_plan_url"": ""/v2/service_plans/e9bf8644-49b7-4e23-891f-6d79afef7815"",
        ""service_bindings_url"": ""/v2/service_instances/aaf4400d-6961-4575-934d-441b4980beb3/service_bindings"",
        ""service_keys_url"": ""/v2/service_instances/aaf4400d-6961-4575-934d-441b4980beb3/service_keys""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServicePlans.ListAllServiceInstancesForServicePlan(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("aaf4400d-6961-4575-934d-441b4980beb3", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/aaf4400d-6961-4575-934d-441b4980beb3", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:48Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1751", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("e9bf8644-49b7-4e23-891f-6d79afef7815", TestUtil.ToTestableString(obj[0].ServicePlanGuid), true);
                Assert.AreEqual("8f043f55-265a-4fd4-a981-f12a01a5c212", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj[0].Type), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].LastOperation), true);
                Assert.AreEqual("/v2/spaces/8f043f55-265a-4fd4-a981-f12a01a5c212", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/e9bf8644-49b7-4e23-891f-6d79afef7815", TestUtil.ToTestableString(obj[0].ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/aaf4400d-6961-4575-934d-441b4980beb3/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/aaf4400d-6961-4575-934d-441b4980beb3/service_keys", TestUtil.ToTestableString(obj[0].ServiceKeysUrl), true);

            }
        }

        [TestMethod]
        public void UpdateServicePlanDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""84365e57-ef5d-4ba7-b400-04562eeb0293"",
    ""url"": ""/v2/service_plans/84365e57-ef5d-4ba7-b400-04562eeb0293"",
    ""created_at"": ""2016-02-05T12:14:48Z"",
    ""updated_at"": ""2016-02-05T12:14:48Z""
  },
  ""entity"": {
    ""name"": ""100mb"",
    ""free"": true,
    ""description"": ""Let's you put data in your database!"",
    ""service_guid"": ""5cc0d790-123d-4bf2-b7fe-63368e70ca25"",
    ""extra"": null,
    ""unique_id"": ""17345e1b-4870-4b5e-8b87-29d93d2df422"",
    ""public"": true,
    ""active"": true,
    ""service_url"": ""/v2/services/5cc0d790-123d-4bf2-b7fe-63368e70ca25"",
    ""service_instances_url"": ""/v2/service_plans/84365e57-ef5d-4ba7-b400-04562eeb0293/service_instances""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                UpdateServicePlanDeprecatedRequest value = new UpdateServicePlanDeprecatedRequest();


                var obj = cfClient.ServicePlans.UpdateServicePlanDeprecated(value).Result;


                Assert.AreEqual("84365e57-ef5d-4ba7-b400-04562eeb0293", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_plans/84365e57-ef5d-4ba7-b400-04562eeb0293", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:48Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-02-05T12:14:48Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("100mb", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Free), true);
                Assert.AreEqual("Let's you put data in your database!", TestUtil.ToTestableString(obj.Description), true);
                Assert.AreEqual("5cc0d790-123d-4bf2-b7fe-63368e70ca25", TestUtil.ToTestableString(obj.ServiceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
                Assert.AreEqual("17345e1b-4870-4b5e-8b87-29d93d2df422", TestUtil.ToTestableString(obj.UniqueId), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Public), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("/v2/services/5cc0d790-123d-4bf2-b7fe-63368e70ca25", TestUtil.ToTestableString(obj.ServiceUrl), true);
                Assert.AreEqual("/v2/service_plans/84365e57-ef5d-4ba7-b400-04562eeb0293/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);

            }
        }

        [TestMethod]
        public void DeleteServicePlansTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.ServicePlans.DeleteServicePlans(guid).Wait();

            }
        }

        [TestMethod]
        public void CreateServicePlanDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""aa769519-3160-40b1-8d59-18a0707c4ce0"",
    ""url"": ""/v2/service_plans/aa769519-3160-40b1-8d59-18a0707c4ce0"",
    ""created_at"": ""2016-02-05T12:14:48Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""100mb"",
    ""free"": true,
    ""description"": ""Let's you put data in your database!"",
    ""service_guid"": ""9447c55c-40b5-4dc2-985c-92ba1aaf191e"",
    ""extra"": null,
    ""unique_id"": ""e538ed1c-4809-46a2-98b5-3b61a1d6f74e"",
    ""public"": true,
    ""active"": true,
    ""service_url"": ""/v2/services/9447c55c-40b5-4dc2-985c-92ba1aaf191e"",
    ""service_instances_url"": ""/v2/service_plans/aa769519-3160-40b1-8d59-18a0707c4ce0/service_instances""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateServicePlanDeprecatedRequest value = new CreateServicePlanDeprecatedRequest();


                var obj = cfClient.ServicePlans.CreateServicePlanDeprecated(value).Result;


                Assert.AreEqual("aa769519-3160-40b1-8d59-18a0707c4ce0", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_plans/aa769519-3160-40b1-8d59-18a0707c4ce0", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:48Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("100mb", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Free), true);
                Assert.AreEqual("Let's you put data in your database!", TestUtil.ToTestableString(obj.Description), true);
                Assert.AreEqual("9447c55c-40b5-4dc2-985c-92ba1aaf191e", TestUtil.ToTestableString(obj.ServiceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
                Assert.AreEqual("e538ed1c-4809-46a2-98b5-3b61a1d6f74e", TestUtil.ToTestableString(obj.UniqueId), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Public), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("/v2/services/9447c55c-40b5-4dc2-985c-92ba1aaf191e", TestUtil.ToTestableString(obj.ServiceUrl), true);
                Assert.AreEqual("/v2/service_plans/aa769519-3160-40b1-8d59-18a0707c4ce0/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);

            }
        }

    }
}