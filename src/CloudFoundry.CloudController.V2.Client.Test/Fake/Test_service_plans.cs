//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class ServicePlansEndpoint
{
        [TestMethod]
        public void UpdateServicePlanTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""c0ab1851-2e26-4d4b-81b2-a8ad9ab649db"",
    ""url"": ""/v2/service_plans/fb6b48be-f40e-472e-b696-7cfbb04f4580"",
    ""created_at"": ""2017-01-04T15:58:34Z"",
    ""updated_at"": ""2017-01-04T15:58:34Z""
  },
  ""entity"": {
    ""name"": ""name-96"",
    ""free"": false,
    ""description"": ""desc-14"",
    ""service_guid"": ""c0ab1851-2e26-4d4b-81b2-a8ad9ab649db"",
    ""extra"": null,
    ""unique_id"": ""4f67203b-c45f-4592-a42f-353d7f103584"",
    ""public"": false,
    ""bindable"": true,
    ""active"": true,
    ""service_url"": ""/v2/services/c70564ad-404d-49d5-acd5-745374651cd4"",
    ""service_instances_url"": ""/v2/service_plans/fb6b48be-f40e-472e-b696-7cfbb04f4580/service_instances""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                UpdateServicePlanRequest value = new UpdateServicePlanRequest();


                var obj = cfClient.ServicePlans.UpdateServicePlan(value).Result;


                Assert.AreEqual("c0ab1851-2e26-4d4b-81b2-a8ad9ab649db", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_plans/fb6b48be-f40e-472e-b696-7cfbb04f4580", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2017-01-04T15:58:34Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2017-01-04T15:58:34Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-96", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Free), true);
                Assert.AreEqual("desc-14", TestUtil.ToTestableString(obj.Description), true);
                Assert.AreEqual("c0ab1851-2e26-4d4b-81b2-a8ad9ab649db", TestUtil.ToTestableString(obj.ServiceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
                Assert.AreEqual("4f67203b-c45f-4592-a42f-353d7f103584", TestUtil.ToTestableString(obj.UniqueId), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Public), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Bindable), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("/v2/services/c70564ad-404d-49d5-acd5-745374651cd4", TestUtil.ToTestableString(obj.ServiceUrl), true);
                Assert.AreEqual("/v2/service_plans/fb6b48be-f40e-472e-b696-7cfbb04f4580/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceInstancesForServicePlanTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""03dd1d23-57ab-45e2-bea1-5b2c03c262b7"",
        ""url"": ""/v2/service_instances/f70d9159-f35f-4a3e-9fa5-ac6b870199cf"",
        ""created_at"": ""2017-01-04T15:58:35Z"",
        ""updated_at"": ""2017-01-04T15:58:35Z""
      },
      ""entity"": {
        ""name"": ""name-102"",
        ""credentials"": {
          ""creds-key-1"": ""creds-val-1""
        },
        ""service_plan_guid"": ""03dd1d23-57ab-45e2-bea1-5b2c03c262b7"",
        ""space_guid"": ""03dd1d23-57ab-45e2-bea1-5b2c03c262b7"",
        ""gateway_data"": null,
        ""dashboard_url"": null,
        ""type"": ""managed_service_instance"",
        ""last_operation"": null,
        ""tags"": [

        ],
        ""service_guid"": ""03dd1d23-57ab-45e2-bea1-5b2c03c262b7"",
        ""space_url"": ""/v2/spaces/fde90db6-1f72-480e-b631-e64db55311f8"",
        ""service_plan_url"": ""/v2/service_plans/fd759445-51dd-41cd-8e80-3406b09cf413"",
        ""service_bindings_url"": ""/v2/service_instances/f70d9159-f35f-4a3e-9fa5-ac6b870199cf/service_bindings"",
        ""service_keys_url"": ""/v2/service_instances/f70d9159-f35f-4a3e-9fa5-ac6b870199cf/service_keys"",
        ""routes_url"": ""/v2/service_instances/f70d9159-f35f-4a3e-9fa5-ac6b870199cf/routes"",
        ""service_url"": ""/v2/services/64fb89fd-2c1a-490d-b49d-206d8eb612cc""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServicePlans.ListAllServiceInstancesForServicePlan(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("03dd1d23-57ab-45e2-bea1-5b2c03c262b7", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/f70d9159-f35f-4a3e-9fa5-ac6b870199cf", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2017-01-04T15:58:35Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2017-01-04T15:58:35Z", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-102", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("03dd1d23-57ab-45e2-bea1-5b2c03c262b7", TestUtil.ToTestableString(obj[0].ServicePlanGuid), true);
                Assert.AreEqual("03dd1d23-57ab-45e2-bea1-5b2c03c262b7", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj[0].Type), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].LastOperation), true);
                Assert.AreEqual("03dd1d23-57ab-45e2-bea1-5b2c03c262b7", TestUtil.ToTestableString(obj[0].ServiceGuid), true);
                Assert.AreEqual("/v2/spaces/fde90db6-1f72-480e-b631-e64db55311f8", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/fd759445-51dd-41cd-8e80-3406b09cf413", TestUtil.ToTestableString(obj[0].ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/f70d9159-f35f-4a3e-9fa5-ac6b870199cf/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/f70d9159-f35f-4a3e-9fa5-ac6b870199cf/service_keys", TestUtil.ToTestableString(obj[0].ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/f70d9159-f35f-4a3e-9fa5-ac6b870199cf/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/services/64fb89fd-2c1a-490d-b49d-206d8eb612cc", TestUtil.ToTestableString(obj[0].ServiceUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServicePlansTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""6eeb8bce-127a-439e-93ff-4722cbf34713"",
        ""url"": ""/v2/service_plans/1391ecac-13fe-4aa2-a95a-ad25caa5dacf"",
        ""created_at"": ""2017-01-04T15:58:34Z"",
        ""updated_at"": ""2017-01-04T15:58:34Z""
      },
      ""entity"": {
        ""name"": ""name-98"",
        ""free"": false,
        ""description"": ""desc-16"",
        ""service_guid"": ""6eeb8bce-127a-439e-93ff-4722cbf34713"",
        ""extra"": null,
        ""unique_id"": ""b4189872-7b5f-46b2-a982-4e7440c43da8"",
        ""public"": true,
        ""bindable"": true,
        ""active"": true,
        ""service_url"": ""/v2/services/889ad9f6-034d-4f71-863f-3bcefc46a308"",
        ""service_instances_url"": ""/v2/service_plans/1391ecac-13fe-4aa2-a95a-ad25caa5dacf/service_instances""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.ServicePlans.ListAllServicePlans().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("6eeb8bce-127a-439e-93ff-4722cbf34713", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_plans/1391ecac-13fe-4aa2-a95a-ad25caa5dacf", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2017-01-04T15:58:34Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2017-01-04T15:58:34Z", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-98", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Free), true);
                Assert.AreEqual("desc-16", TestUtil.ToTestableString(obj[0].Description), true);
                Assert.AreEqual("6eeb8bce-127a-439e-93ff-4722cbf34713", TestUtil.ToTestableString(obj[0].ServiceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Extra), true);
                Assert.AreEqual("b4189872-7b5f-46b2-a982-4e7440c43da8", TestUtil.ToTestableString(obj[0].UniqueId), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Public), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Bindable), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("/v2/services/889ad9f6-034d-4f71-863f-3bcefc46a308", TestUtil.ToTestableString(obj[0].ServiceUrl), true);
                Assert.AreEqual("/v2/service_plans/1391ecac-13fe-4aa2-a95a-ad25caa5dacf/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);

            }
        }

        [TestMethod]
        public void DeleteServicePlansTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.ServicePlans.DeleteServicePlans(guid).Wait();

            }
        }

        [TestMethod]
        public void RetrieveServicePlanTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""bf451dd5-b349-4559-913d-cb29759e2af6"",
    ""url"": ""/v2/service_plans/e83051fd-e222-404a-8377-5dbe07e5434c"",
    ""created_at"": ""2017-01-04T15:58:34Z"",
    ""updated_at"": ""2017-01-04T15:58:34Z""
  },
  ""entity"": {
    ""name"": ""name-94"",
    ""free"": false,
    ""description"": ""desc-12"",
    ""service_guid"": ""bf451dd5-b349-4559-913d-cb29759e2af6"",
    ""extra"": null,
    ""unique_id"": ""1e37e5c1-8271-4cc8-97f0-734afc3fb696"",
    ""public"": true,
    ""bindable"": true,
    ""active"": true,
    ""service_url"": ""/v2/services/99c4385f-26a5-4000-9d95-c586cf016d47"",
    ""service_instances_url"": ""/v2/service_plans/e83051fd-e222-404a-8377-5dbe07e5434c/service_instances""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServicePlans.RetrieveServicePlan(guid).Result;


                Assert.AreEqual("bf451dd5-b349-4559-913d-cb29759e2af6", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_plans/e83051fd-e222-404a-8377-5dbe07e5434c", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2017-01-04T15:58:34Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2017-01-04T15:58:34Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-94", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Free), true);
                Assert.AreEqual("desc-12", TestUtil.ToTestableString(obj.Description), true);
                Assert.AreEqual("bf451dd5-b349-4559-913d-cb29759e2af6", TestUtil.ToTestableString(obj.ServiceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
                Assert.AreEqual("1e37e5c1-8271-4cc8-97f0-734afc3fb696", TestUtil.ToTestableString(obj.UniqueId), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Public), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Bindable), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("/v2/services/99c4385f-26a5-4000-9d95-c586cf016d47", TestUtil.ToTestableString(obj.ServiceUrl), true);
                Assert.AreEqual("/v2/service_plans/e83051fd-e222-404a-8377-5dbe07e5434c/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);

            }
        }

    }
}