//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class ServicePlansEndpoint
{
        [TestMethod]
        public void UpdateServicePlanDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""45d99f2c-7ebf-429a-badd-97de987cd96c"",
    ""url"": ""/v2/service_plans/45d99f2c-7ebf-429a-badd-97de987cd96c"",
    ""created_at"": ""2015-07-29T12:47:24Z"",
    ""updated_at"": ""2015-07-29T12:47:24Z""
  },
  ""entity"": {
    ""name"": ""100mb"",
    ""free"": true,
    ""description"": ""Let's you put data in your database!"",
    ""service_guid"": ""536bf8a8-d818-4034-b18f-930f27321f06"",
    ""extra"": null,
    ""unique_id"": ""a10b0263-b7b8-411b-8143-098b0d936b82"",
    ""public"": true,
    ""active"": true,
    ""service_url"": ""/v2/services/536bf8a8-d818-4034-b18f-930f27321f06"",
    ""service_instances_url"": ""/v2/service_plans/45d99f2c-7ebf-429a-badd-97de987cd96c/service_instances""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                UpdateServicePlanDeprecatedRequest value = new UpdateServicePlanDeprecatedRequest();


                var obj = cfClient.ServicePlans.UpdateServicePlanDeprecated(value).Result;


                Assert.AreEqual("45d99f2c-7ebf-429a-badd-97de987cd96c", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_plans/45d99f2c-7ebf-429a-badd-97de987cd96c", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:24Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-07-29T12:47:24Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("100mb", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Free), true);
                Assert.AreEqual("Let's you put data in your database!", TestUtil.ToTestableString(obj.Description), true);
                Assert.AreEqual("536bf8a8-d818-4034-b18f-930f27321f06", TestUtil.ToTestableString(obj.ServiceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
                Assert.AreEqual("a10b0263-b7b8-411b-8143-098b0d936b82", TestUtil.ToTestableString(obj.UniqueId), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Public), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("/v2/services/536bf8a8-d818-4034-b18f-930f27321f06", TestUtil.ToTestableString(obj.ServiceUrl), true);
                Assert.AreEqual("/v2/service_plans/45d99f2c-7ebf-429a-badd-97de987cd96c/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);

            }
        }

        [TestMethod]
        public void DeleteServicePlansTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.ServicePlans.DeleteServicePlans(guid).Wait();

            }
        }

        [TestMethod]
        public void CreateServicePlanDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""94397768-b63e-45b8-bb4a-77830dad6b39"",
    ""url"": ""/v2/service_plans/94397768-b63e-45b8-bb4a-77830dad6b39"",
    ""created_at"": ""2015-07-29T12:47:23Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""100mb"",
    ""free"": true,
    ""description"": ""Let's you put data in your database!"",
    ""service_guid"": ""741fcbe4-ede2-49fb-8593-a1c6374e316d"",
    ""extra"": null,
    ""unique_id"": ""d831b288-13e1-4a5b-8ff2-f5bf4b21cca0"",
    ""public"": true,
    ""active"": true,
    ""service_url"": ""/v2/services/741fcbe4-ede2-49fb-8593-a1c6374e316d"",
    ""service_instances_url"": ""/v2/service_plans/94397768-b63e-45b8-bb4a-77830dad6b39/service_instances""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateServicePlanDeprecatedRequest value = new CreateServicePlanDeprecatedRequest();


                var obj = cfClient.ServicePlans.CreateServicePlanDeprecated(value).Result;


                Assert.AreEqual("94397768-b63e-45b8-bb4a-77830dad6b39", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_plans/94397768-b63e-45b8-bb4a-77830dad6b39", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:23Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("100mb", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Free), true);
                Assert.AreEqual("Let's you put data in your database!", TestUtil.ToTestableString(obj.Description), true);
                Assert.AreEqual("741fcbe4-ede2-49fb-8593-a1c6374e316d", TestUtil.ToTestableString(obj.ServiceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
                Assert.AreEqual("d831b288-13e1-4a5b-8ff2-f5bf4b21cca0", TestUtil.ToTestableString(obj.UniqueId), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Public), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("/v2/services/741fcbe4-ede2-49fb-8593-a1c6374e316d", TestUtil.ToTestableString(obj.ServiceUrl), true);
                Assert.AreEqual("/v2/service_plans/94397768-b63e-45b8-bb4a-77830dad6b39/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceInstancesForServicePlanTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""e982d409-a780-4897-92eb-543156b6ecdf"",
        ""url"": ""/v2/service_instances/e982d409-a780-4897-92eb-543156b6ecdf"",
        ""created_at"": ""2015-07-29T12:47:23Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1599"",
        ""credentials"": {
          ""creds-key-383"": ""creds-val-383""
        },
        ""service_plan_guid"": ""dc6770ef-da37-47fc-b687-3a4115e164ba"",
        ""space_guid"": ""ab76bba4-196f-48c7-976b-6441e6b3c88a"",
        ""gateway_data"": null,
        ""dashboard_url"": null,
        ""type"": ""managed_service_instance"",
        ""last_operation"": null,
        ""space_url"": ""/v2/spaces/ab76bba4-196f-48c7-976b-6441e6b3c88a"",
        ""service_plan_url"": ""/v2/service_plans/dc6770ef-da37-47fc-b687-3a4115e164ba"",
        ""service_bindings_url"": ""/v2/service_instances/e982d409-a780-4897-92eb-543156b6ecdf/service_bindings"",
        ""service_keys_url"": ""/v2/service_instances/e982d409-a780-4897-92eb-543156b6ecdf/service_keys""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServicePlans.ListAllServiceInstancesForServicePlan(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("e982d409-a780-4897-92eb-543156b6ecdf", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/e982d409-a780-4897-92eb-543156b6ecdf", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:23Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1599", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("dc6770ef-da37-47fc-b687-3a4115e164ba", TestUtil.ToTestableString(obj[0].ServicePlanGuid), true);
                Assert.AreEqual("ab76bba4-196f-48c7-976b-6441e6b3c88a", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj[0].Type), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].LastOperation), true);
                Assert.AreEqual("/v2/spaces/ab76bba4-196f-48c7-976b-6441e6b3c88a", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/dc6770ef-da37-47fc-b687-3a4115e164ba", TestUtil.ToTestableString(obj[0].ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/e982d409-a780-4897-92eb-543156b6ecdf/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/e982d409-a780-4897-92eb-543156b6ecdf/service_keys", TestUtil.ToTestableString(obj[0].ServiceKeysUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveServicePlanTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""3014b596-2801-4c45-88bd-5d75fd22c583"",
    ""url"": ""/v2/service_plans/3014b596-2801-4c45-88bd-5d75fd22c583"",
    ""created_at"": ""2015-07-29T12:47:24Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1610"",
    ""free"": false,
    ""description"": ""desc-116"",
    ""service_guid"": ""b9936c81-2558-4d94-8341-57018ead37f4"",
    ""extra"": null,
    ""unique_id"": ""24013011-0961-41d1-8ddf-613220914644"",
    ""public"": true,
    ""active"": true,
    ""service_url"": ""/v2/services/b9936c81-2558-4d94-8341-57018ead37f4"",
    ""service_instances_url"": ""/v2/service_plans/3014b596-2801-4c45-88bd-5d75fd22c583/service_instances""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServicePlans.RetrieveServicePlan(guid).Result;


                Assert.AreEqual("3014b596-2801-4c45-88bd-5d75fd22c583", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_plans/3014b596-2801-4c45-88bd-5d75fd22c583", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:24Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1610", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Free), true);
                Assert.AreEqual("desc-116", TestUtil.ToTestableString(obj.Description), true);
                Assert.AreEqual("b9936c81-2558-4d94-8341-57018ead37f4", TestUtil.ToTestableString(obj.ServiceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
                Assert.AreEqual("24013011-0961-41d1-8ddf-613220914644", TestUtil.ToTestableString(obj.UniqueId), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Public), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("/v2/services/b9936c81-2558-4d94-8341-57018ead37f4", TestUtil.ToTestableString(obj.ServiceUrl), true);
                Assert.AreEqual("/v2/service_plans/3014b596-2801-4c45-88bd-5d75fd22c583/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServicePlansTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""26117526-981b-40e3-8640-048b579d31d6"",
        ""url"": ""/v2/service_plans/26117526-981b-40e3-8640-048b579d31d6"",
        ""created_at"": ""2015-07-29T12:47:23Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1604"",
        ""free"": false,
        ""description"": ""desc-110"",
        ""service_guid"": ""4d5d0106-7729-4128-a05d-a042d408ad68"",
        ""extra"": null,
        ""unique_id"": ""2ceda77f-83a6-46c2-8554-1d53ce0ed9bf"",
        ""public"": true,
        ""active"": true,
        ""service_url"": ""/v2/services/4d5d0106-7729-4128-a05d-a042d408ad68"",
        ""service_instances_url"": ""/v2/service_plans/26117526-981b-40e3-8640-048b579d31d6/service_instances""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.ServicePlans.ListAllServicePlans().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("26117526-981b-40e3-8640-048b579d31d6", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_plans/26117526-981b-40e3-8640-048b579d31d6", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:23Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1604", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Free), true);
                Assert.AreEqual("desc-110", TestUtil.ToTestableString(obj[0].Description), true);
                Assert.AreEqual("4d5d0106-7729-4128-a05d-a042d408ad68", TestUtil.ToTestableString(obj[0].ServiceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Extra), true);
                Assert.AreEqual("2ceda77f-83a6-46c2-8554-1d53ce0ed9bf", TestUtil.ToTestableString(obj[0].UniqueId), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Public), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("/v2/services/4d5d0106-7729-4128-a05d-a042d408ad68", TestUtil.ToTestableString(obj[0].ServiceUrl), true);
                Assert.AreEqual("/v2/service_plans/26117526-981b-40e3-8640-048b579d31d6/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);

            }
        }

    }
}