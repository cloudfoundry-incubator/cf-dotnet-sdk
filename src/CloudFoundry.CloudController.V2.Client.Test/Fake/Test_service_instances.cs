//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class ServiceInstancesEndpoint
{
        [TestMethod]
        public void RetrievingPermissionsOnServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""manage"": true
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceInstances.RetrievingPermissionsOnServiceInstance(guid).Result;


                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Manage), true);

            }
        }

        [TestMethod]
        public void DeleteServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""b1e7347b-cefe-4354-8c21-d5ab3c0fe710"",
    ""url"": ""/v2/service_instances/d6112b72-e913-4f38-ba52-de6bbdea8598"",
    ""created_at"": ""2016-05-05T14:15:26Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-2126"",
    ""credentials"": {
      ""creds-key-60"": ""creds-val-60""
    },
    ""service_plan_guid"": ""b1e7347b-cefe-4354-8c21-d5ab3c0fe710"",
    ""space_guid"": ""b1e7347b-cefe-4354-8c21-d5ab3c0fe710"",
    ""gateway_data"": null,
    ""dashboard_url"": null,
    ""type"": ""managed_service_instance"",
    ""last_operation"": {
      ""type"": ""delete"",
      ""state"": ""in progress"",
      ""description"": """",
      ""updated_at"": ""2016-05-05T14:15:26Z"",
      ""created_at"": ""2016-05-05T14:15:26Z""
    },
    ""tags"": [
      ""accounting"",
      ""mongodb""
    ],
    ""space_url"": ""/v2/spaces/c2e25020-f576-43bb-ba77-8045ce248a03"",
    ""service_plan_url"": ""/v2/service_plans/a3d3b4b9-8c37-4b98-9911-a46617f28c37"",
    ""service_bindings_url"": ""/v2/service_instances/d6112b72-e913-4f38-ba52-de6bbdea8598/service_bindings"",
    ""service_keys_url"": ""/v2/service_instances/d6112b72-e913-4f38-ba52-de6bbdea8598/service_keys"",
    ""routes_url"": ""/v2/service_instances/d6112b72-e913-4f38-ba52-de6bbdea8598/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)202;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceInstances.DeleteServiceInstance(guid).Result;


                Assert.AreEqual("b1e7347b-cefe-4354-8c21-d5ab3c0fe710", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/d6112b72-e913-4f38-ba52-de6bbdea8598", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:26Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2126", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("b1e7347b-cefe-4354-8c21-d5ab3c0fe710", TestUtil.ToTestableString(obj.ServicePlanGuid), true);
                Assert.AreEqual("b1e7347b-cefe-4354-8c21-d5ab3c0fe710", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj.Type), true);
                Assert.AreEqual("/v2/spaces/c2e25020-f576-43bb-ba77-8045ce248a03", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/a3d3b4b9-8c37-4b98-9911-a46617f28c37", TestUtil.ToTestableString(obj.ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/d6112b72-e913-4f38-ba52-de6bbdea8598/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/d6112b72-e913-4f38-ba52-de6bbdea8598/service_keys", TestUtil.ToTestableString(obj.ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/d6112b72-e913-4f38-ba52-de6bbdea8598/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceBindingsForServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""da92cf2e-98ad-444a-a041-e9e86a8f2eb0"",
        ""url"": ""/v2/service_bindings/e8435349-8e16-4576-a9b3-d0fad0ab3335"",
        ""created_at"": ""2016-05-05T14:15:27Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""app_guid"": ""da92cf2e-98ad-444a-a041-e9e86a8f2eb0"",
        ""service_instance_guid"": ""da92cf2e-98ad-444a-a041-e9e86a8f2eb0"",
        ""credentials"": {
          ""creds-key-68"": ""creds-val-68""
        },
        ""binding_options"": {

        },
        ""gateway_data"": null,
        ""gateway_name"": """",
        ""syslog_drain_url"": null,
        ""app_url"": ""/v2/apps/eadca015-ab23-48c6-bc20-0ca78b27785b"",
        ""service_instance_url"": ""/v2/service_instances/12a8ef1a-5588-46cc-ae43-a055e4b471bc""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceInstances.ListAllServiceBindingsForServiceInstance(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("da92cf2e-98ad-444a-a041-e9e86a8f2eb0", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_bindings/e8435349-8e16-4576-a9b3-d0fad0ab3335", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:27Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("da92cf2e-98ad-444a-a041-e9e86a8f2eb0", TestUtil.ToTestableString(obj[0].AppGuid), true);
                Assert.AreEqual("da92cf2e-98ad-444a-a041-e9e86a8f2eb0", TestUtil.ToTestableString(obj[0].ServiceInstanceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayName), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SyslogDrainUrl), true);
                Assert.AreEqual("/v2/apps/eadca015-ab23-48c6-bc20-0ca78b27785b", TestUtil.ToTestableString(obj[0].AppUrl), true);
                Assert.AreEqual("/v2/service_instances/12a8ef1a-5588-46cc-ae43-a055e4b471bc", TestUtil.ToTestableString(obj[0].ServiceInstanceUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceInstancesTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""c0d83a20-3f0b-45c2-97a2-2ebb497e6995"",
        ""url"": ""/v2/service_instances/c5e8cea4-91c6-4216-a3b5-7af44a2a2a1c"",
        ""created_at"": ""2016-05-05T14:15:27Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-2148"",
        ""credentials"": {
          ""creds-key-63"": ""creds-val-63""
        },
        ""service_plan_guid"": ""c0d83a20-3f0b-45c2-97a2-2ebb497e6995"",
        ""space_guid"": ""c0d83a20-3f0b-45c2-97a2-2ebb497e6995"",
        ""gateway_data"": null,
        ""dashboard_url"": null,
        ""type"": ""managed_service_instance"",
        ""last_operation"": {
          ""type"": ""create"",
          ""state"": ""succeeded"",
          ""description"": ""service broker-provided description"",
          ""updated_at"": ""2016-05-05T14:15:27Z"",
          ""created_at"": ""2016-05-05T14:15:27Z""
        },
        ""tags"": [
          ""accounting"",
          ""mongodb""
        ],
        ""space_url"": ""/v2/spaces/d065a2e2-c4ad-46ee-9511-b2af77dada4c"",
        ""service_plan_url"": ""/v2/service_plans/b4aaf96b-48c1-4595-989e-2ec440c5fbf8"",
        ""service_bindings_url"": ""/v2/service_instances/c5e8cea4-91c6-4216-a3b5-7af44a2a2a1c/service_bindings"",
        ""service_keys_url"": ""/v2/service_instances/c5e8cea4-91c6-4216-a3b5-7af44a2a2a1c/service_keys"",
        ""routes_url"": ""/v2/service_instances/c5e8cea4-91c6-4216-a3b5-7af44a2a2a1c/routes""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.ServiceInstances.ListAllServiceInstances().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("c0d83a20-3f0b-45c2-97a2-2ebb497e6995", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/c5e8cea4-91c6-4216-a3b5-7af44a2a2a1c", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:27Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2148", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("c0d83a20-3f0b-45c2-97a2-2ebb497e6995", TestUtil.ToTestableString(obj[0].ServicePlanGuid), true);
                Assert.AreEqual("c0d83a20-3f0b-45c2-97a2-2ebb497e6995", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj[0].Type), true);
                Assert.AreEqual("/v2/spaces/d065a2e2-c4ad-46ee-9511-b2af77dada4c", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/b4aaf96b-48c1-4595-989e-2ec440c5fbf8", TestUtil.ToTestableString(obj[0].ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/c5e8cea4-91c6-4216-a3b5-7af44a2a2a1c/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/c5e8cea4-91c6-4216-a3b5-7af44a2a2a1c/service_keys", TestUtil.ToTestableString(obj[0].ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/c5e8cea4-91c6-4216-a3b5-7af44a2a2a1c/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);

            }
        }

        [TestMethod]
        public void BindingServiceInstanceToRouteTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""4f77f4a8-77ca-4f10-ae75-df68395de827"",
    ""url"": ""/v2/service_instances/e592f0a6-3649-4107-b38a-83d4a9301832"",
    ""created_at"": ""2016-05-05T14:15:27Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-2154"",
    ""credentials"": {
      ""creds-key-64"": ""creds-val-64""
    },
    ""service_plan_guid"": ""4f77f4a8-77ca-4f10-ae75-df68395de827"",
    ""space_guid"": ""4f77f4a8-77ca-4f10-ae75-df68395de827"",
    ""gateway_data"": null,
    ""dashboard_url"": null,
    ""type"": ""managed_service_instance"",
    ""last_operation"": null,
    ""tags"": [

    ],
    ""space_url"": ""/v2/spaces/38fda81f-5d04-4bc2-8a51-6cf3ab37ded4"",
    ""service_plan_url"": ""/v2/service_plans/c7f97d89-69ef-48f2-86e0-9424378b3fbd"",
    ""service_bindings_url"": ""/v2/service_instances/e592f0a6-3649-4107-b38a-83d4a9301832/service_bindings"",
    ""service_keys_url"": ""/v2/service_instances/e592f0a6-3649-4107-b38a-83d4a9301832/service_keys"",
    ""routes_url"": ""/v2/service_instances/e592f0a6-3649-4107-b38a-83d4a9301832/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? service_instance_guid = Guid.NewGuid();

                Guid? route_guid = Guid.NewGuid();

                BindingServiceInstanceToRouteRequest value = new BindingServiceInstanceToRouteRequest();


                var obj = cfClient.ServiceInstances.BindingServiceInstanceToRoute(service_instance_guid, route_guid, value).Result;


                Assert.AreEqual("4f77f4a8-77ca-4f10-ae75-df68395de827", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/e592f0a6-3649-4107-b38a-83d4a9301832", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:27Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2154", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("4f77f4a8-77ca-4f10-ae75-df68395de827", TestUtil.ToTestableString(obj.ServicePlanGuid), true);
                Assert.AreEqual("4f77f4a8-77ca-4f10-ae75-df68395de827", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj.Type), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.LastOperation), true);
                Assert.AreEqual("/v2/spaces/38fda81f-5d04-4bc2-8a51-6cf3ab37ded4", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/c7f97d89-69ef-48f2-86e0-9424378b3fbd", TestUtil.ToTestableString(obj.ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/e592f0a6-3649-4107-b38a-83d4a9301832/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/e592f0a6-3649-4107-b38a-83d4a9301832/service_keys", TestUtil.ToTestableString(obj.ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/e592f0a6-3649-4107-b38a-83d4a9301832/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void UnbindingServiceInstanceFromRouteTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? service_instance_guid = Guid.NewGuid();

                Guid? route_guid = Guid.NewGuid();


                cfClient.ServiceInstances.UnbindingServiceInstanceFromRoute(service_instance_guid, route_guid).Wait();

            }
        }

        [TestMethod]
        public void CreateServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""e5c29585-086d-4113-b96b-0f65a04183cf"",
    ""url"": ""/v2/service_instances/9cf4ee06-9d1f-49c9-9e83-c64d9216de07"",
    ""created_at"": ""2016-05-05T14:15:26Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""my-service-instance"",
    ""credentials"": {

    },
    ""service_plan_guid"": ""e5c29585-086d-4113-b96b-0f65a04183cf"",
    ""space_guid"": ""e5c29585-086d-4113-b96b-0f65a04183cf"",
    ""gateway_data"": null,
    ""dashboard_url"": null,
    ""type"": ""managed_service_instance"",
    ""last_operation"": {
      ""type"": ""create"",
      ""state"": ""in progress"",
      ""description"": """",
      ""updated_at"": null,
      ""created_at"": ""2016-05-05T14:15:26Z""
    },
    ""tags"": [
      ""accounting"",
      ""mongodb""
    ],
    ""space_url"": ""/v2/spaces/44b9e2fa-dcda-49be-857a-4c110274c31d"",
    ""service_plan_url"": ""/v2/service_plans/c7852db6-1d15-4016-8e70-a9313fafdbe7"",
    ""service_bindings_url"": ""/v2/service_instances/9cf4ee06-9d1f-49c9-9e83-c64d9216de07/service_bindings"",
    ""service_keys_url"": ""/v2/service_instances/9cf4ee06-9d1f-49c9-9e83-c64d9216de07/service_keys"",
    ""routes_url"": ""/v2/service_instances/9cf4ee06-9d1f-49c9-9e83-c64d9216de07/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)202;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateServiceInstanceRequest value = new CreateServiceInstanceRequest();


                var obj = cfClient.ServiceInstances.CreateServiceInstance(value).Result;


                Assert.AreEqual("e5c29585-086d-4113-b96b-0f65a04183cf", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/9cf4ee06-9d1f-49c9-9e83-c64d9216de07", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:26Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("my-service-instance", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("e5c29585-086d-4113-b96b-0f65a04183cf", TestUtil.ToTestableString(obj.ServicePlanGuid), true);
                Assert.AreEqual("e5c29585-086d-4113-b96b-0f65a04183cf", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj.Type), true);
                Assert.AreEqual("/v2/spaces/44b9e2fa-dcda-49be-857a-4c110274c31d", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/c7852db6-1d15-4016-8e70-a9313fafdbe7", TestUtil.ToTestableString(obj.ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/9cf4ee06-9d1f-49c9-9e83-c64d9216de07/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/9cf4ee06-9d1f-49c9-9e83-c64d9216de07/service_keys", TestUtil.ToTestableString(obj.ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/9cf4ee06-9d1f-49c9-9e83-c64d9216de07/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""8feff798-5bfd-4c6f-85c4-739f71a5fd3e"",
    ""url"": ""/v2/service_instances/0dd2200b-830b-41ed-9f81-f0c6535f35c7"",
    ""created_at"": ""2016-05-05T14:15:26Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-2120"",
    ""credentials"": {
      ""creds-key-59"": ""creds-val-59""
    },
    ""service_plan_guid"": ""8feff798-5bfd-4c6f-85c4-739f71a5fd3e"",
    ""space_guid"": ""8feff798-5bfd-4c6f-85c4-739f71a5fd3e"",
    ""gateway_data"": null,
    ""dashboard_url"": null,
    ""type"": ""managed_service_instance"",
    ""last_operation"": {
      ""type"": ""create"",
      ""state"": ""succeeded"",
      ""description"": ""service broker-provided description"",
      ""updated_at"": ""2016-05-05T14:15:26Z"",
      ""created_at"": ""2016-05-05T14:15:26Z""
    },
    ""tags"": [
      ""accounting"",
      ""mongodb""
    ],
    ""space_url"": ""/v2/spaces/3bd08690-dbe3-41b1-b637-40cb01de6e87"",
    ""service_plan_url"": ""/v2/service_plans/caa1d052-ed50-4a72-a224-b8e1252b09f2"",
    ""service_bindings_url"": ""/v2/service_instances/0dd2200b-830b-41ed-9f81-f0c6535f35c7/service_bindings"",
    ""service_keys_url"": ""/v2/service_instances/0dd2200b-830b-41ed-9f81-f0c6535f35c7/service_keys"",
    ""routes_url"": ""/v2/service_instances/0dd2200b-830b-41ed-9f81-f0c6535f35c7/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceInstances.RetrieveServiceInstance(guid).Result;


                Assert.AreEqual("8feff798-5bfd-4c6f-85c4-739f71a5fd3e", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/0dd2200b-830b-41ed-9f81-f0c6535f35c7", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:26Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2120", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("8feff798-5bfd-4c6f-85c4-739f71a5fd3e", TestUtil.ToTestableString(obj.ServicePlanGuid), true);
                Assert.AreEqual("8feff798-5bfd-4c6f-85c4-739f71a5fd3e", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj.Type), true);
                Assert.AreEqual("/v2/spaces/3bd08690-dbe3-41b1-b637-40cb01de6e87", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/caa1d052-ed50-4a72-a224-b8e1252b09f2", TestUtil.ToTestableString(obj.ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/0dd2200b-830b-41ed-9f81-f0c6535f35c7/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/0dd2200b-830b-41ed-9f81-f0c6535f35c7/service_keys", TestUtil.ToTestableString(obj.ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/0dd2200b-830b-41ed-9f81-f0c6535f35c7/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void UpdateServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""f9915983-89cb-41f3-9fa3-a93d76ff9b1d"",
    ""url"": ""/v2/service_instances/d9330280-aae4-4cb1-ae42-803ce6db4d23"",
    ""created_at"": ""2016-05-05T14:15:26Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-2141"",
    ""credentials"": {
      ""creds-key-62"": ""creds-val-62""
    },
    ""service_plan_guid"": ""f9915983-89cb-41f3-9fa3-a93d76ff9b1d"",
    ""space_guid"": ""f9915983-89cb-41f3-9fa3-a93d76ff9b1d"",
    ""gateway_data"": null,
    ""dashboard_url"": null,
    ""type"": ""managed_service_instance"",
    ""last_operation"": {
      ""type"": ""update"",
      ""state"": ""in progress"",
      ""description"": """",
      ""updated_at"": ""2016-05-05T14:15:26Z"",
      ""created_at"": ""2016-05-05T14:15:26Z""
    },
    ""tags"": [

    ],
    ""space_url"": ""/v2/spaces/2d9161e8-7792-4738-88bf-9cad6d7272e9"",
    ""service_plan_url"": ""/v2/service_plans/2063e37b-dfcd-4119-88f2-105d7468f7ed"",
    ""service_bindings_url"": ""/v2/service_instances/d9330280-aae4-4cb1-ae42-803ce6db4d23/service_bindings"",
    ""service_keys_url"": ""/v2/service_instances/d9330280-aae4-4cb1-ae42-803ce6db4d23/service_keys"",
    ""routes_url"": ""/v2/service_instances/d9330280-aae4-4cb1-ae42-803ce6db4d23/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)202;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateServiceInstanceRequest value = new UpdateServiceInstanceRequest();


                var obj = cfClient.ServiceInstances.UpdateServiceInstance(guid, value).Result;


                Assert.AreEqual("f9915983-89cb-41f3-9fa3-a93d76ff9b1d", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/d9330280-aae4-4cb1-ae42-803ce6db4d23", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:26Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2141", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("f9915983-89cb-41f3-9fa3-a93d76ff9b1d", TestUtil.ToTestableString(obj.ServicePlanGuid), true);
                Assert.AreEqual("f9915983-89cb-41f3-9fa3-a93d76ff9b1d", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj.Type), true);
                Assert.AreEqual("/v2/spaces/2d9161e8-7792-4738-88bf-9cad6d7272e9", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/2063e37b-dfcd-4119-88f2-105d7468f7ed", TestUtil.ToTestableString(obj.ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/d9330280-aae4-4cb1-ae42-803ce6db4d23/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/d9330280-aae4-4cb1-ae42-803ce6db4d23/service_keys", TestUtil.ToTestableString(obj.ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/d9330280-aae4-4cb1-ae42-803ce6db4d23/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllRoutesForServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""c5b71252-b401-48e8-aadf-95505066d1fb"",
        ""url"": ""/v2/routes/4d3c1f51-6032-4ef5-b41e-4902017da088"",
        ""created_at"": ""2016-05-05T14:15:27Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""host"": ""host-33"",
        ""path"": """",
        ""domain_guid"": ""c5b71252-b401-48e8-aadf-95505066d1fb"",
        ""space_guid"": ""c5b71252-b401-48e8-aadf-95505066d1fb"",
        ""service_instance_guid"": ""c5b71252-b401-48e8-aadf-95505066d1fb"",
        ""port"": null,
        ""domain_url"": ""/v2/domains/c89d2e94-cd3a-4305-85c4-43f07d06f2ef"",
        ""space_url"": ""/v2/spaces/8cbf383e-b729-4cc3-81db-4b9786d4232b"",
        ""service_instance_url"": ""/v2/service_instances/0e219bbe-37fb-49ce-ad3a-04445501df67"",
        ""apps_url"": ""/v2/routes/4d3c1f51-6032-4ef5-b41e-4902017da088/apps"",
        ""route_mappings_url"": ""/v2/routes/4d3c1f51-6032-4ef5-b41e-4902017da088/route_mappings""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceInstances.ListAllRoutesForServiceInstance(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("c5b71252-b401-48e8-aadf-95505066d1fb", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/4d3c1f51-6032-4ef5-b41e-4902017da088", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:27Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-33", TestUtil.ToTestableString(obj[0].Host), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Path), true);
                Assert.AreEqual("c5b71252-b401-48e8-aadf-95505066d1fb", TestUtil.ToTestableString(obj[0].DomainGuid), true);
                Assert.AreEqual("c5b71252-b401-48e8-aadf-95505066d1fb", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("c5b71252-b401-48e8-aadf-95505066d1fb", TestUtil.ToTestableString(obj[0].ServiceInstanceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Port), true);
                Assert.AreEqual("/v2/domains/c89d2e94-cd3a-4305-85c4-43f07d06f2ef", TestUtil.ToTestableString(obj[0].DomainUrl), true);
                Assert.AreEqual("/v2/spaces/8cbf383e-b729-4cc3-81db-4b9786d4232b", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/service_instances/0e219bbe-37fb-49ce-ad3a-04445501df67", TestUtil.ToTestableString(obj[0].ServiceInstanceUrl), true);
                Assert.AreEqual("/v2/routes/4d3c1f51-6032-4ef5-b41e-4902017da088/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/routes/4d3c1f51-6032-4ef5-b41e-4902017da088/route_mappings", TestUtil.ToTestableString(obj[0].RouteMappingsUrl), true);

            }
        }

    }
}