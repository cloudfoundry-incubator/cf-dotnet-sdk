//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class ServiceInstancesEndpoint
{
        [TestMethod]
        public void UnbindingServiceInstanceFromRouteTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? service_instance_guid = Guid.NewGuid();

                Guid? route_guid = Guid.NewGuid();


                cfClient.ServiceInstances.UnbindingServiceInstanceFromRoute(service_instance_guid, route_guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllServiceInstancesTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""3ae9a24f-8012-408c-986b-38439646f1f2"",
        ""url"": ""/v2/service_instances/b036c1cb-8ab1-492f-9a26-9f73d21fdb29"",
        ""created_at"": ""2017-01-04T15:59:02Z"",
        ""updated_at"": ""2017-01-04T15:59:02Z""
      },
      ""entity"": {
        ""name"": ""name-2266"",
        ""credentials"": {
          ""creds-key-62"": ""creds-val-62""
        },
        ""service_plan_guid"": ""3ae9a24f-8012-408c-986b-38439646f1f2"",
        ""space_guid"": ""3ae9a24f-8012-408c-986b-38439646f1f2"",
        ""gateway_data"": null,
        ""dashboard_url"": null,
        ""type"": ""managed_service_instance"",
        ""last_operation"": {
          ""type"": ""create"",
          ""state"": ""succeeded"",
          ""description"": ""service broker-provided description"",
          ""updated_at"": ""2017-01-04T15:59:02Z"",
          ""created_at"": ""2017-01-04T15:59:02Z""
        },
        ""tags"": [
          ""accounting"",
          ""mongodb""
        ],
        ""service_guid"": ""3ae9a24f-8012-408c-986b-38439646f1f2"",
        ""space_url"": ""/v2/spaces/b8afcf86-b02c-4b78-aa70-c7e7275e8780"",
        ""service_plan_url"": ""/v2/service_plans/38382d19-0101-47ad-b6dd-df9059b253fe"",
        ""service_bindings_url"": ""/v2/service_instances/b036c1cb-8ab1-492f-9a26-9f73d21fdb29/service_bindings"",
        ""service_keys_url"": ""/v2/service_instances/b036c1cb-8ab1-492f-9a26-9f73d21fdb29/service_keys"",
        ""routes_url"": ""/v2/service_instances/b036c1cb-8ab1-492f-9a26-9f73d21fdb29/routes"",
        ""service_url"": ""/v2/services/2c1e40e0-ed71-46ee-9aea-b93cb5a241df""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.ServiceInstances.ListAllServiceInstances().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("3ae9a24f-8012-408c-986b-38439646f1f2", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/b036c1cb-8ab1-492f-9a26-9f73d21fdb29", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2017-01-04T15:59:02Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2017-01-04T15:59:02Z", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2266", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("3ae9a24f-8012-408c-986b-38439646f1f2", TestUtil.ToTestableString(obj[0].ServicePlanGuid), true);
                Assert.AreEqual("3ae9a24f-8012-408c-986b-38439646f1f2", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj[0].Type), true);
                Assert.AreEqual("3ae9a24f-8012-408c-986b-38439646f1f2", TestUtil.ToTestableString(obj[0].ServiceGuid), true);
                Assert.AreEqual("/v2/spaces/b8afcf86-b02c-4b78-aa70-c7e7275e8780", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/38382d19-0101-47ad-b6dd-df9059b253fe", TestUtil.ToTestableString(obj[0].ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/b036c1cb-8ab1-492f-9a26-9f73d21fdb29/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/b036c1cb-8ab1-492f-9a26-9f73d21fdb29/service_keys", TestUtil.ToTestableString(obj[0].ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/b036c1cb-8ab1-492f-9a26-9f73d21fdb29/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/services/2c1e40e0-ed71-46ee-9aea-b93cb5a241df", TestUtil.ToTestableString(obj[0].ServiceUrl), true);

            }
        }

        [TestMethod]
        public void DeleteServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""493f4f90-4898-4c5b-9c12-77fc91461d1c"",
    ""url"": ""/v2/service_instances/062250a7-955d-4bea-b5e5-4233e3f2eed3"",
    ""created_at"": ""2017-01-04T15:59:02Z"",
    ""updated_at"": ""2017-01-04T15:59:02Z""
  },
  ""entity"": {
    ""name"": ""name-2260"",
    ""credentials"": {
      ""creds-key-61"": ""creds-val-61""
    },
    ""service_plan_guid"": ""493f4f90-4898-4c5b-9c12-77fc91461d1c"",
    ""space_guid"": ""493f4f90-4898-4c5b-9c12-77fc91461d1c"",
    ""gateway_data"": null,
    ""dashboard_url"": null,
    ""type"": ""managed_service_instance"",
    ""last_operation"": {
      ""type"": ""delete"",
      ""state"": ""in progress"",
      ""description"": """",
      ""updated_at"": ""2017-01-04T15:59:02Z"",
      ""created_at"": ""2017-01-04T15:59:02Z""
    },
    ""tags"": [
      ""accounting"",
      ""mongodb""
    ],
    ""service_guid"": ""493f4f90-4898-4c5b-9c12-77fc91461d1c"",
    ""space_url"": ""/v2/spaces/7a7bacf4-b069-4514-83db-7fc0c537b5f0"",
    ""service_plan_url"": ""/v2/service_plans/d641a2f5-9614-49db-a73d-0c3b874d1e6c"",
    ""service_bindings_url"": ""/v2/service_instances/062250a7-955d-4bea-b5e5-4233e3f2eed3/service_bindings"",
    ""service_keys_url"": ""/v2/service_instances/062250a7-955d-4bea-b5e5-4233e3f2eed3/service_keys"",
    ""routes_url"": ""/v2/service_instances/062250a7-955d-4bea-b5e5-4233e3f2eed3/routes"",
    ""service_url"": ""/v2/services/059a9d0a-f3e3-4a95-88e0-d474ed7fbf21""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)202;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceInstances.DeleteServiceInstance(guid).Result;


                Assert.AreEqual("493f4f90-4898-4c5b-9c12-77fc91461d1c", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/062250a7-955d-4bea-b5e5-4233e3f2eed3", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2017-01-04T15:59:02Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2017-01-04T15:59:02Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2260", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("493f4f90-4898-4c5b-9c12-77fc91461d1c", TestUtil.ToTestableString(obj.ServicePlanGuid), true);
                Assert.AreEqual("493f4f90-4898-4c5b-9c12-77fc91461d1c", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj.Type), true);
                Assert.AreEqual("493f4f90-4898-4c5b-9c12-77fc91461d1c", TestUtil.ToTestableString(obj.ServiceGuid), true);
                Assert.AreEqual("/v2/spaces/7a7bacf4-b069-4514-83db-7fc0c537b5f0", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/d641a2f5-9614-49db-a73d-0c3b874d1e6c", TestUtil.ToTestableString(obj.ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/062250a7-955d-4bea-b5e5-4233e3f2eed3/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/062250a7-955d-4bea-b5e5-4233e3f2eed3/service_keys", TestUtil.ToTestableString(obj.ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/062250a7-955d-4bea-b5e5-4233e3f2eed3/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/services/059a9d0a-f3e3-4a95-88e0-d474ed7fbf21", TestUtil.ToTestableString(obj.ServiceUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""5a48f223-b27b-4ce4-a2b5-0b8e392874f3"",
    ""url"": ""/v2/service_instances/7f2ea92c-f530-4941-8c62-6f968f49882a"",
    ""created_at"": ""2017-01-04T15:59:03Z"",
    ""updated_at"": ""2017-01-04T15:59:03Z""
  },
  ""entity"": {
    ""name"": ""name-2281"",
    ""credentials"": {
      ""creds-key-64"": ""creds-val-64""
    },
    ""service_plan_guid"": ""5a48f223-b27b-4ce4-a2b5-0b8e392874f3"",
    ""space_guid"": ""5a48f223-b27b-4ce4-a2b5-0b8e392874f3"",
    ""gateway_data"": null,
    ""dashboard_url"": null,
    ""type"": ""managed_service_instance"",
    ""last_operation"": {
      ""type"": ""create"",
      ""state"": ""succeeded"",
      ""description"": ""service broker-provided description"",
      ""updated_at"": ""2017-01-04T15:59:03Z"",
      ""created_at"": ""2017-01-04T15:59:03Z""
    },
    ""tags"": [
      ""accounting"",
      ""mongodb""
    ],
    ""service_guid"": ""5a48f223-b27b-4ce4-a2b5-0b8e392874f3"",
    ""space_url"": ""/v2/spaces/148dc08a-439b-40ff-80a0-5b6bad2f6aed"",
    ""service_plan_url"": ""/v2/service_plans/21640876-ec09-452c-81ed-8b9c43e84e9c"",
    ""service_bindings_url"": ""/v2/service_instances/7f2ea92c-f530-4941-8c62-6f968f49882a/service_bindings"",
    ""service_keys_url"": ""/v2/service_instances/7f2ea92c-f530-4941-8c62-6f968f49882a/service_keys"",
    ""routes_url"": ""/v2/service_instances/7f2ea92c-f530-4941-8c62-6f968f49882a/routes"",
    ""service_url"": ""/v2/services/5b286268-3723-4d1d-8cec-d4adbf4e0254""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceInstances.RetrieveServiceInstance(guid).Result;


                Assert.AreEqual("5a48f223-b27b-4ce4-a2b5-0b8e392874f3", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/7f2ea92c-f530-4941-8c62-6f968f49882a", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2017-01-04T15:59:03Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2017-01-04T15:59:03Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2281", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("5a48f223-b27b-4ce4-a2b5-0b8e392874f3", TestUtil.ToTestableString(obj.ServicePlanGuid), true);
                Assert.AreEqual("5a48f223-b27b-4ce4-a2b5-0b8e392874f3", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj.Type), true);
                Assert.AreEqual("5a48f223-b27b-4ce4-a2b5-0b8e392874f3", TestUtil.ToTestableString(obj.ServiceGuid), true);
                Assert.AreEqual("/v2/spaces/148dc08a-439b-40ff-80a0-5b6bad2f6aed", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/21640876-ec09-452c-81ed-8b9c43e84e9c", TestUtil.ToTestableString(obj.ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/7f2ea92c-f530-4941-8c62-6f968f49882a/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/7f2ea92c-f530-4941-8c62-6f968f49882a/service_keys", TestUtil.ToTestableString(obj.ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/7f2ea92c-f530-4941-8c62-6f968f49882a/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/services/5b286268-3723-4d1d-8cec-d4adbf4e0254", TestUtil.ToTestableString(obj.ServiceUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceBindingsForServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""b38a9ed5-9589-47a1-bf38-4af742cc315e"",
        ""url"": ""/v2/service_bindings/004538e0-c4aa-4820-abb7-f6d5ae20aca5"",
        ""created_at"": ""2017-01-04T15:59:02Z"",
        ""updated_at"": ""2017-01-04T15:59:02Z""
      },
      ""entity"": {
        ""app_guid"": ""b38a9ed5-9589-47a1-bf38-4af742cc315e"",
        ""service_instance_guid"": ""b38a9ed5-9589-47a1-bf38-4af742cc315e"",
        ""credentials"": {
          ""creds-key-58"": ""creds-val-58""
        },
        ""binding_options"": {

        },
        ""gateway_data"": null,
        ""gateway_name"": """",
        ""syslog_drain_url"": null,
        ""volume_mounts"": [

        ],
        ""service_instance_url"": ""/v2/service_instances/eb8021f6-c5ef-4f61-8ecf-212affe771b8""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceInstances.ListAllServiceBindingsForServiceInstance(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("b38a9ed5-9589-47a1-bf38-4af742cc315e", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_bindings/004538e0-c4aa-4820-abb7-f6d5ae20aca5", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2017-01-04T15:59:02Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2017-01-04T15:59:02Z", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("b38a9ed5-9589-47a1-bf38-4af742cc315e", TestUtil.ToTestableString(obj[0].AppGuid), true);
                Assert.AreEqual("b38a9ed5-9589-47a1-bf38-4af742cc315e", TestUtil.ToTestableString(obj[0].ServiceInstanceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayName), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SyslogDrainUrl), true);
                Assert.AreEqual("/v2/service_instances/eb8021f6-c5ef-4f61-8ecf-212affe771b8", TestUtil.ToTestableString(obj[0].ServiceInstanceUrl), true);

            }
        }

        [TestMethod]
        public void ListAllRoutesForServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""670b1ec5-da53-4668-897b-637d9813a99c"",
        ""url"": ""/v2/routes/4f704ec5-7c62-4e5e-8c2b-558a59821661"",
        ""created_at"": ""2017-01-04T15:59:01Z"",
        ""updated_at"": ""2017-01-04T15:59:01Z""
      },
      ""entity"": {
        ""host"": ""host-26"",
        ""path"": """",
        ""domain_guid"": ""670b1ec5-da53-4668-897b-637d9813a99c"",
        ""space_guid"": ""670b1ec5-da53-4668-897b-637d9813a99c"",
        ""service_instance_guid"": ""670b1ec5-da53-4668-897b-637d9813a99c"",
        ""port"": null,
        ""domain_url"": ""/v2/private_domains/bb6caf95-6fc9-4061-95f4-a3131106b933"",
        ""space_url"": ""/v2/spaces/301a314f-6ee7-428e-8eaa-68dd9b70b2f6"",
        ""service_instance_url"": ""/v2/service_instances/7bbe78d8-c72f-451c-a922-a1f6adfd2d7f"",
        ""apps_url"": ""/v2/routes/4f704ec5-7c62-4e5e-8c2b-558a59821661/apps"",
        ""route_mappings_url"": ""/v2/routes/4f704ec5-7c62-4e5e-8c2b-558a59821661/route_mappings""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceInstances.ListAllRoutesForServiceInstance(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("670b1ec5-da53-4668-897b-637d9813a99c", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/4f704ec5-7c62-4e5e-8c2b-558a59821661", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2017-01-04T15:59:01Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2017-01-04T15:59:01Z", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-26", TestUtil.ToTestableString(obj[0].Host), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Path), true);
                Assert.AreEqual("670b1ec5-da53-4668-897b-637d9813a99c", TestUtil.ToTestableString(obj[0].DomainGuid), true);
                Assert.AreEqual("670b1ec5-da53-4668-897b-637d9813a99c", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("670b1ec5-da53-4668-897b-637d9813a99c", TestUtil.ToTestableString(obj[0].ServiceInstanceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Port), true);
                Assert.AreEqual("/v2/private_domains/bb6caf95-6fc9-4061-95f4-a3131106b933", TestUtil.ToTestableString(obj[0].DomainUrl), true);
                Assert.AreEqual("/v2/spaces/301a314f-6ee7-428e-8eaa-68dd9b70b2f6", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/service_instances/7bbe78d8-c72f-451c-a922-a1f6adfd2d7f", TestUtil.ToTestableString(obj[0].ServiceInstanceUrl), true);
                Assert.AreEqual("/v2/routes/4f704ec5-7c62-4e5e-8c2b-558a59821661/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/routes/4f704ec5-7c62-4e5e-8c2b-558a59821661/route_mappings", TestUtil.ToTestableString(obj[0].RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void RetrievingPermissionsOnServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""manage"": true
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceInstances.RetrievingPermissionsOnServiceInstance(guid).Result;


                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Manage), true);

            }
        }

        [TestMethod]
        public void UpdateServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""d5080a8d-ac13-452a-bbca-bef031c6096f"",
    ""url"": ""/v2/service_instances/a45a051c-aa06-4241-9665-6290d1f4b26f"",
    ""created_at"": ""2017-01-04T15:59:03Z"",
    ""updated_at"": ""2017-01-04T15:59:03Z""
  },
  ""entity"": {
    ""name"": ""name-2287"",
    ""credentials"": {
      ""creds-key-65"": ""creds-val-65""
    },
    ""service_plan_guid"": ""d5080a8d-ac13-452a-bbca-bef031c6096f"",
    ""space_guid"": ""d5080a8d-ac13-452a-bbca-bef031c6096f"",
    ""gateway_data"": null,
    ""dashboard_url"": null,
    ""type"": ""managed_service_instance"",
    ""last_operation"": {
      ""type"": ""update"",
      ""state"": ""in progress"",
      ""description"": """",
      ""updated_at"": ""2017-01-04T15:59:03Z"",
      ""created_at"": ""2017-01-04T15:59:03Z""
    },
    ""tags"": [

    ],
    ""service_guid"": ""d5080a8d-ac13-452a-bbca-bef031c6096f"",
    ""space_url"": ""/v2/spaces/87295e1e-0115-4205-bb7b-6d096adf38d7"",
    ""service_plan_url"": ""/v2/service_plans/19b44d74-46dc-436a-bdc0-df00c05f6492"",
    ""service_bindings_url"": ""/v2/service_instances/a45a051c-aa06-4241-9665-6290d1f4b26f/service_bindings"",
    ""service_keys_url"": ""/v2/service_instances/a45a051c-aa06-4241-9665-6290d1f4b26f/service_keys"",
    ""routes_url"": ""/v2/service_instances/a45a051c-aa06-4241-9665-6290d1f4b26f/routes"",
    ""service_url"": ""/v2/services/d04ccd2e-cfe5-4ce9-8e65-509a7604a4e2""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)202;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateServiceInstanceRequest value = new UpdateServiceInstanceRequest();


                var obj = cfClient.ServiceInstances.UpdateServiceInstance(guid, value).Result;


                Assert.AreEqual("d5080a8d-ac13-452a-bbca-bef031c6096f", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/a45a051c-aa06-4241-9665-6290d1f4b26f", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2017-01-04T15:59:03Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2017-01-04T15:59:03Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2287", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("d5080a8d-ac13-452a-bbca-bef031c6096f", TestUtil.ToTestableString(obj.ServicePlanGuid), true);
                Assert.AreEqual("d5080a8d-ac13-452a-bbca-bef031c6096f", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj.Type), true);
                Assert.AreEqual("d5080a8d-ac13-452a-bbca-bef031c6096f", TestUtil.ToTestableString(obj.ServiceGuid), true);
                Assert.AreEqual("/v2/spaces/87295e1e-0115-4205-bb7b-6d096adf38d7", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/19b44d74-46dc-436a-bdc0-df00c05f6492", TestUtil.ToTestableString(obj.ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/a45a051c-aa06-4241-9665-6290d1f4b26f/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/a45a051c-aa06-4241-9665-6290d1f4b26f/service_keys", TestUtil.ToTestableString(obj.ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/a45a051c-aa06-4241-9665-6290d1f4b26f/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/services/d04ccd2e-cfe5-4ce9-8e65-509a7604a4e2", TestUtil.ToTestableString(obj.ServiceUrl), true);

            }
        }

        [TestMethod]
        public void CreateServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""5b7cb0e3-9808-42df-9fbd-2091428207f0"",
    ""url"": ""/v2/service_instances/29919644-5231-434f-8c42-781567976bd0"",
    ""created_at"": ""2017-01-04T15:59:03Z"",
    ""updated_at"": ""2017-01-04T15:59:03Z""
  },
  ""entity"": {
    ""name"": ""my-service-instance"",
    ""credentials"": {

    },
    ""service_plan_guid"": ""5b7cb0e3-9808-42df-9fbd-2091428207f0"",
    ""space_guid"": ""5b7cb0e3-9808-42df-9fbd-2091428207f0"",
    ""gateway_data"": null,
    ""dashboard_url"": null,
    ""type"": ""managed_service_instance"",
    ""last_operation"": {
      ""type"": ""create"",
      ""state"": ""in progress"",
      ""description"": """",
      ""updated_at"": ""2017-01-04T15:59:03Z"",
      ""created_at"": ""2017-01-04T15:59:03Z""
    },
    ""tags"": [
      ""accounting"",
      ""mongodb""
    ],
    ""service_guid"": ""5b7cb0e3-9808-42df-9fbd-2091428207f0"",
    ""space_url"": ""/v2/spaces/f0bae13b-14d1-4401-98d9-97437753cf47"",
    ""service_plan_url"": ""/v2/service_plans/4c80a3de-64b9-490a-9c1d-eb7a5422e84a"",
    ""service_bindings_url"": ""/v2/service_instances/29919644-5231-434f-8c42-781567976bd0/service_bindings"",
    ""service_keys_url"": ""/v2/service_instances/29919644-5231-434f-8c42-781567976bd0/service_keys"",
    ""routes_url"": ""/v2/service_instances/29919644-5231-434f-8c42-781567976bd0/routes"",
    ""service_url"": ""/v2/services/a7728f06-a586-461e-ade1-495a424efd55""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)202;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateServiceInstanceRequest value = new CreateServiceInstanceRequest();


                var obj = cfClient.ServiceInstances.CreateServiceInstance(value).Result;


                Assert.AreEqual("5b7cb0e3-9808-42df-9fbd-2091428207f0", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/29919644-5231-434f-8c42-781567976bd0", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2017-01-04T15:59:03Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2017-01-04T15:59:03Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("my-service-instance", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("5b7cb0e3-9808-42df-9fbd-2091428207f0", TestUtil.ToTestableString(obj.ServicePlanGuid), true);
                Assert.AreEqual("5b7cb0e3-9808-42df-9fbd-2091428207f0", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj.Type), true);
                Assert.AreEqual("5b7cb0e3-9808-42df-9fbd-2091428207f0", TestUtil.ToTestableString(obj.ServiceGuid), true);
                Assert.AreEqual("/v2/spaces/f0bae13b-14d1-4401-98d9-97437753cf47", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/4c80a3de-64b9-490a-9c1d-eb7a5422e84a", TestUtil.ToTestableString(obj.ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/29919644-5231-434f-8c42-781567976bd0/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/29919644-5231-434f-8c42-781567976bd0/service_keys", TestUtil.ToTestableString(obj.ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/29919644-5231-434f-8c42-781567976bd0/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/services/a7728f06-a586-461e-ade1-495a424efd55", TestUtil.ToTestableString(obj.ServiceUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceKeysForServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""9a464f9d-ec1f-4920-823f-59e9ab10226c"",
        ""url"": ""/v2/service_keys/a7607a80-0e77-4519-94b4-bfdbd3d503f1"",
        ""created_at"": ""2017-01-04T15:59:02Z"",
        ""updated_at"": ""2017-01-04T15:59:02Z""
      },
      ""entity"": {
        ""name"": ""a-service-key"",
        ""service_instance_guid"": ""9a464f9d-ec1f-4920-823f-59e9ab10226c"",
        ""credentials"": {
          ""creds-key-60"": ""creds-val-60""
        },
        ""service_instance_url"": ""/v2/service_instances/c18326f6-9114-40b9-b7e7-6f259a665774""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceInstances.ListAllServiceKeysForServiceInstance(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("9a464f9d-ec1f-4920-823f-59e9ab10226c", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_keys/a7607a80-0e77-4519-94b4-bfdbd3d503f1", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2017-01-04T15:59:02Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2017-01-04T15:59:02Z", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("a-service-key", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("9a464f9d-ec1f-4920-823f-59e9ab10226c", TestUtil.ToTestableString(obj[0].ServiceInstanceGuid), true);
                Assert.AreEqual("/v2/service_instances/c18326f6-9114-40b9-b7e7-6f259a665774", TestUtil.ToTestableString(obj[0].ServiceInstanceUrl), true);

            }
        }

        [TestMethod]
        public void BindingServiceInstanceToRouteTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""2ef758e6-05d6-46c8-937e-a1ef558ce4da"",
    ""url"": ""/v2/service_instances/ba47bef4-6048-4cde-9864-4da42522bbcd"",
    ""created_at"": ""2017-01-04T15:59:02Z"",
    ""updated_at"": ""2017-01-04T15:59:02Z""
  },
  ""entity"": {
    ""name"": ""name-2240"",
    ""credentials"": {
      ""creds-key-56"": ""creds-val-56""
    },
    ""service_plan_guid"": ""2ef758e6-05d6-46c8-937e-a1ef558ce4da"",
    ""space_guid"": ""2ef758e6-05d6-46c8-937e-a1ef558ce4da"",
    ""gateway_data"": null,
    ""dashboard_url"": null,
    ""type"": ""managed_service_instance"",
    ""last_operation"": null,
    ""tags"": [

    ],
    ""service_guid"": ""2ef758e6-05d6-46c8-937e-a1ef558ce4da"",
    ""space_url"": ""/v2/spaces/49c83c1b-c6b8-443e-8d7e-61e50eee5fef"",
    ""service_plan_url"": ""/v2/service_plans/381e1b3e-eafc-4f77-a85c-26787af2e303"",
    ""service_bindings_url"": ""/v2/service_instances/ba47bef4-6048-4cde-9864-4da42522bbcd/service_bindings"",
    ""service_keys_url"": ""/v2/service_instances/ba47bef4-6048-4cde-9864-4da42522bbcd/service_keys"",
    ""routes_url"": ""/v2/service_instances/ba47bef4-6048-4cde-9864-4da42522bbcd/routes"",
    ""service_url"": ""/v2/services/c93a3ccf-519e-4c5e-8612-658198e73a69""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? service_instance_guid = Guid.NewGuid();

                Guid? route_guid = Guid.NewGuid();

                BindingServiceInstanceToRouteRequest value = new BindingServiceInstanceToRouteRequest();


                var obj = cfClient.ServiceInstances.BindingServiceInstanceToRoute(service_instance_guid, route_guid, value).Result;


                Assert.AreEqual("2ef758e6-05d6-46c8-937e-a1ef558ce4da", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/ba47bef4-6048-4cde-9864-4da42522bbcd", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2017-01-04T15:59:02Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2017-01-04T15:59:02Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2240", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("2ef758e6-05d6-46c8-937e-a1ef558ce4da", TestUtil.ToTestableString(obj.ServicePlanGuid), true);
                Assert.AreEqual("2ef758e6-05d6-46c8-937e-a1ef558ce4da", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj.Type), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.LastOperation), true);
                Assert.AreEqual("2ef758e6-05d6-46c8-937e-a1ef558ce4da", TestUtil.ToTestableString(obj.ServiceGuid), true);
                Assert.AreEqual("/v2/spaces/49c83c1b-c6b8-443e-8d7e-61e50eee5fef", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/381e1b3e-eafc-4f77-a85c-26787af2e303", TestUtil.ToTestableString(obj.ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/ba47bef4-6048-4cde-9864-4da42522bbcd/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/ba47bef4-6048-4cde-9864-4da42522bbcd/service_keys", TestUtil.ToTestableString(obj.ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/ba47bef4-6048-4cde-9864-4da42522bbcd/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/services/c93a3ccf-519e-4c5e-8612-658198e73a69", TestUtil.ToTestableString(obj.ServiceUrl), true);

            }
        }

    }
}