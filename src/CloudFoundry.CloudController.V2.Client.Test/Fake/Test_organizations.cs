//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class OrganizationsEndpoint
{
        [TestMethod]
        public void GetOrganizationSummaryTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{""guid"":""fee03ccb-6c4d-4479-9baa-1e46eed470fc"",""name"":""name-1981"",""status"":""active"",""spaces"":[{""guid"":""51519b29-a17f-4589-8575-817c05f0491f"",""name"":""name-1983"",""service_count"":0,""app_count"":0,""mem_dev_total"":0,""mem_prod_total"":0}]}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.GetOrganizationSummary(guid).Result;


                Assert.AreEqual("fee03ccb-6c4d-4479-9baa-1e46eed470fc", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("name-1981", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);

            }
        }

        [TestMethod]
        public void ListAllPrivateDomainsForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""62102f28-f6ce-4665-a020-2b6c265307e0"",
        ""url"": ""/v2/private_domains/62102f28-f6ce-4665-a020-2b6c265307e0"",
        ""created_at"": ""2016-02-05T12:14:45Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""domain-19.example.com"",
        ""owning_organization_guid"": ""151f3b13-5b25-4385-a211-5d2e95a16778"",
        ""owning_organization_url"": ""/v2/organizations/151f3b13-5b25-4385-a211-5d2e95a16778"",
        ""shared_organizations_url"": ""/v2/private_domains/62102f28-f6ce-4665-a020-2b6c265307e0/shared_organizations""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllPrivateDomainsForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("62102f28-f6ce-4665-a020-2b6c265307e0", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/private_domains/62102f28-f6ce-4665-a020-2b6c265307e0", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:45Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("domain-19.example.com", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("151f3b13-5b25-4385-a211-5d2e95a16778", TestUtil.ToTestableString(obj[0].OwningOrganizationGuid), true);
                Assert.AreEqual("/v2/organizations/151f3b13-5b25-4385-a211-5d2e95a16778", TestUtil.ToTestableString(obj[0].OwningOrganizationUrl), true);
                Assert.AreEqual("/v2/private_domains/62102f28-f6ce-4665-a020-2b6c265307e0/shared_organizations", TestUtil.ToTestableString(obj[0].SharedOrganizationsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllBillingManagersForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-220"",
        ""url"": ""/v2/users/uaa-id-220"",
        ""created_at"": ""2016-02-05T12:14:44Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""billing_manager@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-220/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-220/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-220/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-220/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-220/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-220/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-220/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllBillingManagersForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-220", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-220", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:44Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("billing_manager@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-220/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-220/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-220/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-220/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-220/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-220/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-220/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void RetrievingRolesOfAllUsersInOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 2,
  ""total_pages"": 2,
  ""prev_url"": null,
  ""next_url"": ""/v2/organizations/48b5b9ec-61a9-4da3-b896-2052a0b058a8/user_roles?order-direction=asc=2=1"",
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-254"",
        ""url"": ""/v2/users/uaa-id-254"",
        ""created_at"": ""2016-02-05T12:14:45Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": 0,
        ""active"": 0,
        ""default_space_guid"": null,
        ""username"": ""everything@example.com"",
        ""organization_roles"": [
          ""org_user"",
          ""org_manager"",
          ""org_auditor"",
          ""billing_manager""
        ],
        ""spaces_url"": ""/v2/users/uaa-id-254/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-254/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-254/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-254/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-254/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-254/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-254/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RetrievingRolesOfAllUsersInOrganization(guid).Result;

                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("/v2/organizations/48b5b9ec-61a9-4da3-b896-2052a0b058a8/user_roles?order-direction=asc=2=1", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-254", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-254", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:45Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("everything@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-254/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-254/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-254/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-254/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-254/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-254/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-254/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void UpdateOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""3c9fcb2b-f5e8-49bd-ad2c-09e633b06dbd"",
    ""url"": ""/v2/organizations/3c9fcb2b-f5e8-49bd-ad2c-09e633b06dbd"",
    ""created_at"": ""2016-02-05T12:14:44Z"",
    ""updated_at"": ""2016-02-05T12:14:44Z""
  },
  ""entity"": {
    ""name"": ""New Organization Name"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""ee02a0bc-2c81-471f-9e70-286bd2b7c7f5"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/ee02a0bc-2c81-471f-9e70-286bd2b7c7f5"",
    ""spaces_url"": ""/v2/organizations/3c9fcb2b-f5e8-49bd-ad2c-09e633b06dbd/spaces"",
    ""domains_url"": ""/v2/organizations/3c9fcb2b-f5e8-49bd-ad2c-09e633b06dbd/domains"",
    ""private_domains_url"": ""/v2/organizations/3c9fcb2b-f5e8-49bd-ad2c-09e633b06dbd/private_domains"",
    ""users_url"": ""/v2/organizations/3c9fcb2b-f5e8-49bd-ad2c-09e633b06dbd/users"",
    ""managers_url"": ""/v2/organizations/3c9fcb2b-f5e8-49bd-ad2c-09e633b06dbd/managers"",
    ""billing_managers_url"": ""/v2/organizations/3c9fcb2b-f5e8-49bd-ad2c-09e633b06dbd/billing_managers"",
    ""auditors_url"": ""/v2/organizations/3c9fcb2b-f5e8-49bd-ad2c-09e633b06dbd/auditors"",
    ""app_events_url"": ""/v2/organizations/3c9fcb2b-f5e8-49bd-ad2c-09e633b06dbd/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/3c9fcb2b-f5e8-49bd-ad2c-09e633b06dbd/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateOrganizationRequest value = new UpdateOrganizationRequest();


                var obj = cfClient.Organizations.UpdateOrganization(guid, value).Result;


                Assert.AreEqual("3c9fcb2b-f5e8-49bd-ad2c-09e633b06dbd", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/3c9fcb2b-f5e8-49bd-ad2c-09e633b06dbd", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:44Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-02-05T12:14:44Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("New Organization Name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("ee02a0bc-2c81-471f-9e70-286bd2b7c7f5", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/ee02a0bc-2c81-471f-9e70-286bd2b7c7f5", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/3c9fcb2b-f5e8-49bd-ad2c-09e633b06dbd/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/3c9fcb2b-f5e8-49bd-ad2c-09e633b06dbd/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/3c9fcb2b-f5e8-49bd-ad2c-09e633b06dbd/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/3c9fcb2b-f5e8-49bd-ad2c-09e633b06dbd/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/3c9fcb2b-f5e8-49bd-ad2c-09e633b06dbd/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/3c9fcb2b-f5e8-49bd-ad2c-09e633b06dbd/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/3c9fcb2b-f5e8-49bd-ad2c-09e633b06dbd/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/3c9fcb2b-f5e8-49bd-ad2c-09e633b06dbd/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/3c9fcb2b-f5e8-49bd-ad2c-09e633b06dbd/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveUserFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""bf7f850b-4daf-4af6-8bde-896c8eb102f2"",
    ""url"": ""/v2/organizations/bf7f850b-4daf-4af6-8bde-896c8eb102f2"",
    ""created_at"": ""2016-02-05T12:14:44Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1440"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""085139ed-b3e0-4bde-9935-a90d8ebeca38"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/085139ed-b3e0-4bde-9935-a90d8ebeca38"",
    ""spaces_url"": ""/v2/organizations/bf7f850b-4daf-4af6-8bde-896c8eb102f2/spaces"",
    ""domains_url"": ""/v2/organizations/bf7f850b-4daf-4af6-8bde-896c8eb102f2/domains"",
    ""private_domains_url"": ""/v2/organizations/bf7f850b-4daf-4af6-8bde-896c8eb102f2/private_domains"",
    ""users_url"": ""/v2/organizations/bf7f850b-4daf-4af6-8bde-896c8eb102f2/users"",
    ""managers_url"": ""/v2/organizations/bf7f850b-4daf-4af6-8bde-896c8eb102f2/managers"",
    ""billing_managers_url"": ""/v2/organizations/bf7f850b-4daf-4af6-8bde-896c8eb102f2/billing_managers"",
    ""auditors_url"": ""/v2/organizations/bf7f850b-4daf-4af6-8bde-896c8eb102f2/auditors"",
    ""app_events_url"": ""/v2/organizations/bf7f850b-4daf-4af6-8bde-896c8eb102f2/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/bf7f850b-4daf-4af6-8bde-896c8eb102f2/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? user_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RemoveUserFromOrganization(guid, user_guid).Result;


                Assert.AreEqual("bf7f850b-4daf-4af6-8bde-896c8eb102f2", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/bf7f850b-4daf-4af6-8bde-896c8eb102f2", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:44Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1440", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("085139ed-b3e0-4bde-9935-a90d8ebeca38", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/085139ed-b3e0-4bde-9935-a90d8ebeca38", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/bf7f850b-4daf-4af6-8bde-896c8eb102f2/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/bf7f850b-4daf-4af6-8bde-896c8eb102f2/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/bf7f850b-4daf-4af6-8bde-896c8eb102f2/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/bf7f850b-4daf-4af6-8bde-896c8eb102f2/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/bf7f850b-4daf-4af6-8bde-896c8eb102f2/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/bf7f850b-4daf-4af6-8bde-896c8eb102f2/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/bf7f850b-4daf-4af6-8bde-896c8eb102f2/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/bf7f850b-4daf-4af6-8bde-896c8eb102f2/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/bf7f850b-4daf-4af6-8bde-896c8eb102f2/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllDomainsForOrganizationDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 2,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""6766743e-5f57-49db-9961-b14802731bc5"",
        ""url"": ""/v2/domains/6766743e-5f57-49db-9961-b14802731bc5"",
        ""created_at"": ""2016-02-05T12:14:36Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain1.com""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""1cab628a-c4a5-4e25-838a-5b972c70d995"",
        ""url"": ""/v2/domains/1cab628a-c4a5-4e25-838a-5b972c70d995"",
        ""created_at"": ""2016-02-05T12:14:36Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain2.com""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllDomainsForOrganizationDeprecated(guid).Result;

                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("6766743e-5f57-49db-9961-b14802731bc5", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/6766743e-5f57-49db-9961-b14802731bc5", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:36Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain1.com", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("1cab628a-c4a5-4e25-838a-5b972c70d995", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/1cab628a-c4a5-4e25-838a-5b972c70d995", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:36Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain2.com", TestUtil.ToTestableString(obj[1].Name), true);

            }
        }

        [TestMethod]
        public void RetrievingOrganizationMemoryUsageTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{""memory_usage_in_mb"":0}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RetrievingOrganizationMemoryUsage(guid).Result;


                Assert.AreEqual("0", TestUtil.ToTestableString(obj.MemoryUsageInMb), true);

            }
        }

        [TestMethod]
        public void ListAllSpaceQuotaDefinitionsForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""3d6de3c9-4045-4b33-8978-5855c1457374"",
        ""url"": ""/v2/space_quota_definitions/3d6de3c9-4045-4b33-8978-5855c1457374"",
        ""created_at"": ""2016-02-05T12:14:45Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1487"",
        ""organization_guid"": ""8d587091-1ed1-4138-8165-082750834c38"",
        ""non_basic_services_allowed"": true,
        ""total_services"": 60,
        ""total_routes"": 1000,
        ""memory_limit"": 20480,
        ""instance_memory_limit"": -1,
        ""organization_url"": ""/v2/organizations/8d587091-1ed1-4138-8165-082750834c38"",
        ""spaces_url"": ""/v2/space_quota_definitions/3d6de3c9-4045-4b33-8978-5855c1457374/spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllSpaceQuotaDefinitionsForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("3d6de3c9-4045-4b33-8978-5855c1457374", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/space_quota_definitions/3d6de3c9-4045-4b33-8978-5855c1457374", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:45Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1487", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("8d587091-1ed1-4138-8165-082750834c38", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].NonBasicServicesAllowed), true);
                Assert.AreEqual("60", TestUtil.ToTestableString(obj[0].TotalServices), true);
                Assert.AreEqual("1000", TestUtil.ToTestableString(obj[0].TotalRoutes), true);
                Assert.AreEqual("20480", TestUtil.ToTestableString(obj[0].MemoryLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj[0].InstanceMemoryLimit), true);
                Assert.AreEqual("/v2/organizations/8d587091-1ed1-4138-8165-082750834c38", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/space_quota_definitions/3d6de3c9-4045-4b33-8978-5855c1457374/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemovePrivateDomainFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""54ad2f1d-d94c-43fc-8ff7-a2a2cb967be9"",
    ""url"": ""/v2/organizations/54ad2f1d-d94c-43fc-8ff7-a2a2cb967be9"",
    ""created_at"": ""2016-02-05T12:14:45Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1469"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""67861fae-804d-4db5-9339-a2cfab28ea79"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/67861fae-804d-4db5-9339-a2cfab28ea79"",
    ""spaces_url"": ""/v2/organizations/54ad2f1d-d94c-43fc-8ff7-a2a2cb967be9/spaces"",
    ""domains_url"": ""/v2/organizations/54ad2f1d-d94c-43fc-8ff7-a2a2cb967be9/domains"",
    ""private_domains_url"": ""/v2/organizations/54ad2f1d-d94c-43fc-8ff7-a2a2cb967be9/private_domains"",
    ""users_url"": ""/v2/organizations/54ad2f1d-d94c-43fc-8ff7-a2a2cb967be9/users"",
    ""managers_url"": ""/v2/organizations/54ad2f1d-d94c-43fc-8ff7-a2a2cb967be9/managers"",
    ""billing_managers_url"": ""/v2/organizations/54ad2f1d-d94c-43fc-8ff7-a2a2cb967be9/billing_managers"",
    ""auditors_url"": ""/v2/organizations/54ad2f1d-d94c-43fc-8ff7-a2a2cb967be9/auditors"",
    ""app_events_url"": ""/v2/organizations/54ad2f1d-d94c-43fc-8ff7-a2a2cb967be9/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/54ad2f1d-d94c-43fc-8ff7-a2a2cb967be9/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? private_domain_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RemovePrivateDomainFromOrganization(guid, private_domain_guid).Result;


                Assert.AreEqual("54ad2f1d-d94c-43fc-8ff7-a2a2cb967be9", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/54ad2f1d-d94c-43fc-8ff7-a2a2cb967be9", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:45Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1469", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("67861fae-804d-4db5-9339-a2cfab28ea79", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/67861fae-804d-4db5-9339-a2cfab28ea79", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/54ad2f1d-d94c-43fc-8ff7-a2a2cb967be9/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/54ad2f1d-d94c-43fc-8ff7-a2a2cb967be9/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/54ad2f1d-d94c-43fc-8ff7-a2a2cb967be9/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/54ad2f1d-d94c-43fc-8ff7-a2a2cb967be9/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/54ad2f1d-d94c-43fc-8ff7-a2a2cb967be9/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/54ad2f1d-d94c-43fc-8ff7-a2a2cb967be9/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/54ad2f1d-d94c-43fc-8ff7-a2a2cb967be9/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/54ad2f1d-d94c-43fc-8ff7-a2a2cb967be9/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/54ad2f1d-d94c-43fc-8ff7-a2a2cb967be9/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveBillingManagerFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""db826763-9274-45fe-a350-6a8df02f325f"",
    ""url"": ""/v2/organizations/db826763-9274-45fe-a350-6a8df02f325f"",
    ""created_at"": ""2016-02-05T12:14:44Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1423"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""109c3046-677c-4375-9b8f-bed39618a972"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/109c3046-677c-4375-9b8f-bed39618a972"",
    ""spaces_url"": ""/v2/organizations/db826763-9274-45fe-a350-6a8df02f325f/spaces"",
    ""domains_url"": ""/v2/organizations/db826763-9274-45fe-a350-6a8df02f325f/domains"",
    ""private_domains_url"": ""/v2/organizations/db826763-9274-45fe-a350-6a8df02f325f/private_domains"",
    ""users_url"": ""/v2/organizations/db826763-9274-45fe-a350-6a8df02f325f/users"",
    ""managers_url"": ""/v2/organizations/db826763-9274-45fe-a350-6a8df02f325f/managers"",
    ""billing_managers_url"": ""/v2/organizations/db826763-9274-45fe-a350-6a8df02f325f/billing_managers"",
    ""auditors_url"": ""/v2/organizations/db826763-9274-45fe-a350-6a8df02f325f/auditors"",
    ""app_events_url"": ""/v2/organizations/db826763-9274-45fe-a350-6a8df02f325f/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/db826763-9274-45fe-a350-6a8df02f325f/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? billing_manager_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RemoveBillingManagerFromOrganization(guid, billing_manager_guid).Result;


                Assert.AreEqual("db826763-9274-45fe-a350-6a8df02f325f", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/db826763-9274-45fe-a350-6a8df02f325f", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:44Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1423", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("109c3046-677c-4375-9b8f-bed39618a972", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/109c3046-677c-4375-9b8f-bed39618a972", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/db826763-9274-45fe-a350-6a8df02f325f/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/db826763-9274-45fe-a350-6a8df02f325f/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/db826763-9274-45fe-a350-6a8df02f325f/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/db826763-9274-45fe-a350-6a8df02f325f/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/db826763-9274-45fe-a350-6a8df02f325f/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/db826763-9274-45fe-a350-6a8df02f325f/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/db826763-9274-45fe-a350-6a8df02f325f/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/db826763-9274-45fe-a350-6a8df02f325f/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/db826763-9274-45fe-a350-6a8df02f325f/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void DeleteOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Organizations.DeleteOrganization(guid).Wait();

            }
        }

        [TestMethod]
        public void AssociateUserWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""668d0223-5740-41b7-867d-ed1222ce11fd"",
    ""url"": ""/v2/organizations/668d0223-5740-41b7-867d-ed1222ce11fd"",
    ""created_at"": ""2016-02-05T12:14:44Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1444"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""f4986313-b866-43e9-860d-4d514ccb2f18"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/f4986313-b866-43e9-860d-4d514ccb2f18"",
    ""spaces_url"": ""/v2/organizations/668d0223-5740-41b7-867d-ed1222ce11fd/spaces"",
    ""domains_url"": ""/v2/organizations/668d0223-5740-41b7-867d-ed1222ce11fd/domains"",
    ""private_domains_url"": ""/v2/organizations/668d0223-5740-41b7-867d-ed1222ce11fd/private_domains"",
    ""users_url"": ""/v2/organizations/668d0223-5740-41b7-867d-ed1222ce11fd/users"",
    ""managers_url"": ""/v2/organizations/668d0223-5740-41b7-867d-ed1222ce11fd/managers"",
    ""billing_managers_url"": ""/v2/organizations/668d0223-5740-41b7-867d-ed1222ce11fd/billing_managers"",
    ""auditors_url"": ""/v2/organizations/668d0223-5740-41b7-867d-ed1222ce11fd/auditors"",
    ""app_events_url"": ""/v2/organizations/668d0223-5740-41b7-867d-ed1222ce11fd/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/668d0223-5740-41b7-867d-ed1222ce11fd/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? user_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateUserWithOrganization(guid, user_guid).Result;


                Assert.AreEqual("668d0223-5740-41b7-867d-ed1222ce11fd", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/668d0223-5740-41b7-867d-ed1222ce11fd", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:44Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1444", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("f4986313-b866-43e9-860d-4d514ccb2f18", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/f4986313-b866-43e9-860d-4d514ccb2f18", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/668d0223-5740-41b7-867d-ed1222ce11fd/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/668d0223-5740-41b7-867d-ed1222ce11fd/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/668d0223-5740-41b7-867d-ed1222ce11fd/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/668d0223-5740-41b7-867d-ed1222ce11fd/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/668d0223-5740-41b7-867d-ed1222ce11fd/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/668d0223-5740-41b7-867d-ed1222ce11fd/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/668d0223-5740-41b7-867d-ed1222ce11fd/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/668d0223-5740-41b7-867d-ed1222ce11fd/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/668d0223-5740-41b7-867d-ed1222ce11fd/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSpacesForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""c5ad3146-32aa-4ac9-8d21-dab61dae3005"",
        ""url"": ""/v2/spaces/c5ad3146-32aa-4ac9-8d21-dab61dae3005"",
        ""created_at"": ""2016-02-05T12:14:44Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1439"",
        ""organization_guid"": ""5d8c5880-a0ee-463a-9517-f79c874637b1"",
        ""space_quota_definition_guid"": null,
        ""allow_ssh"": true,
        ""organization_url"": ""/v2/organizations/5d8c5880-a0ee-463a-9517-f79c874637b1"",
        ""developers_url"": ""/v2/spaces/c5ad3146-32aa-4ac9-8d21-dab61dae3005/developers"",
        ""managers_url"": ""/v2/spaces/c5ad3146-32aa-4ac9-8d21-dab61dae3005/managers"",
        ""auditors_url"": ""/v2/spaces/c5ad3146-32aa-4ac9-8d21-dab61dae3005/auditors"",
        ""apps_url"": ""/v2/spaces/c5ad3146-32aa-4ac9-8d21-dab61dae3005/apps"",
        ""routes_url"": ""/v2/spaces/c5ad3146-32aa-4ac9-8d21-dab61dae3005/routes"",
        ""domains_url"": ""/v2/spaces/c5ad3146-32aa-4ac9-8d21-dab61dae3005/domains"",
        ""service_instances_url"": ""/v2/spaces/c5ad3146-32aa-4ac9-8d21-dab61dae3005/service_instances"",
        ""app_events_url"": ""/v2/spaces/c5ad3146-32aa-4ac9-8d21-dab61dae3005/app_events"",
        ""events_url"": ""/v2/spaces/c5ad3146-32aa-4ac9-8d21-dab61dae3005/events"",
        ""security_groups_url"": ""/v2/spaces/c5ad3146-32aa-4ac9-8d21-dab61dae3005/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllSpacesForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("c5ad3146-32aa-4ac9-8d21-dab61dae3005", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/c5ad3146-32aa-4ac9-8d21-dab61dae3005", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:44Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1439", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("5d8c5880-a0ee-463a-9517-f79c874637b1", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].AllowSsh), true);
                Assert.AreEqual("/v2/organizations/5d8c5880-a0ee-463a-9517-f79c874637b1", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/c5ad3146-32aa-4ac9-8d21-dab61dae3005/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/c5ad3146-32aa-4ac9-8d21-dab61dae3005/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/c5ad3146-32aa-4ac9-8d21-dab61dae3005/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/c5ad3146-32aa-4ac9-8d21-dab61dae3005/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/c5ad3146-32aa-4ac9-8d21-dab61dae3005/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/c5ad3146-32aa-4ac9-8d21-dab61dae3005/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/c5ad3146-32aa-4ac9-8d21-dab61dae3005/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/c5ad3146-32aa-4ac9-8d21-dab61dae3005/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/c5ad3146-32aa-4ac9-8d21-dab61dae3005/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/c5ad3146-32aa-4ac9-8d21-dab61dae3005/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServicesForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""62e4cb83-ae2c-497d-9033-e79fd1904782"",
        ""url"": ""/v2/services/62e4cb83-ae2c-497d-9033-e79fd1904782"",
        ""created_at"": ""2016-02-05T12:14:45Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-18"",
        ""provider"": null,
        ""url"": null,
        ""description"": ""desc-57"",
        ""long_description"": null,
        ""version"": null,
        ""info_url"": null,
        ""active"": true,
        ""bindable"": true,
        ""unique_id"": ""5e7380aa-d8df-402f-bdec-ed8231bc3e7e"",
        ""extra"": null,
        ""tags"": [

        ],
        ""requires"": [

        ],
        ""documentation_url"": null,
        ""service_broker_guid"": ""24f00a35-56b2-44f6-b7b9-b08e75b7e6c3"",
        ""plan_updateable"": false,
        ""service_plans_url"": ""/v2/services/62e4cb83-ae2c-497d-9033-e79fd1904782/service_plans""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllServicesForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("62e4cb83-ae2c-497d-9033-e79fd1904782", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/services/62e4cb83-ae2c-497d-9033-e79fd1904782", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:45Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-18", TestUtil.ToTestableString(obj[0].Label), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Provider), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Url), true);
                Assert.AreEqual("desc-57", TestUtil.ToTestableString(obj[0].Description), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].LongDescription), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].InfoUrl), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Bindable), true);
                Assert.AreEqual("5e7380aa-d8df-402f-bdec-ed8231bc3e7e", TestUtil.ToTestableString(obj[0].UniqueId), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Extra), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DocumentationUrl), true);
                Assert.AreEqual("24f00a35-56b2-44f6-b7b9-b08e75b7e6c3", TestUtil.ToTestableString(obj[0].ServiceBrokerGuid), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].PlanUpdateable), true);
                Assert.AreEqual("/v2/services/62e4cb83-ae2c-497d-9033-e79fd1904782/service_plans", TestUtil.ToTestableString(obj[0].ServicePlansUrl), true);

            }
        }

        [TestMethod]
        public void ListAllOrganizationsTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""3997ea98-340a-4731-9885-b6931b31b7c9"",
        ""url"": ""/v2/organizations/3997ea98-340a-4731-9885-b6931b31b7c9"",
        ""created_at"": ""2016-02-05T12:14:36Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""the-system_domain-org-name"",
        ""billing_enabled"": false,
        ""quota_definition_guid"": ""571d0a96-3c71-4a1e-93ac-cd0ee2da6699"",
        ""status"": ""active"",
        ""quota_definition_url"": ""/v2/quota_definitions/571d0a96-3c71-4a1e-93ac-cd0ee2da6699"",
        ""spaces_url"": ""/v2/organizations/3997ea98-340a-4731-9885-b6931b31b7c9/spaces"",
        ""domains_url"": ""/v2/organizations/3997ea98-340a-4731-9885-b6931b31b7c9/domains"",
        ""private_domains_url"": ""/v2/organizations/3997ea98-340a-4731-9885-b6931b31b7c9/private_domains"",
        ""users_url"": ""/v2/organizations/3997ea98-340a-4731-9885-b6931b31b7c9/users"",
        ""managers_url"": ""/v2/organizations/3997ea98-340a-4731-9885-b6931b31b7c9/managers"",
        ""billing_managers_url"": ""/v2/organizations/3997ea98-340a-4731-9885-b6931b31b7c9/billing_managers"",
        ""auditors_url"": ""/v2/organizations/3997ea98-340a-4731-9885-b6931b31b7c9/auditors"",
        ""app_events_url"": ""/v2/organizations/3997ea98-340a-4731-9885-b6931b31b7c9/app_events"",
        ""space_quota_definitions_url"": ""/v2/organizations/3997ea98-340a-4731-9885-b6931b31b7c9/space_quota_definitions""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Organizations.ListAllOrganizations().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("3997ea98-340a-4731-9885-b6931b31b7c9", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/3997ea98-340a-4731-9885-b6931b31b7c9", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:36Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("the-system_domain-org-name", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].BillingEnabled), true);
                Assert.AreEqual("571d0a96-3c71-4a1e-93ac-cd0ee2da6699", TestUtil.ToTestableString(obj[0].QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj[0].Status), true);
                Assert.AreEqual("/v2/quota_definitions/571d0a96-3c71-4a1e-93ac-cd0ee2da6699", TestUtil.ToTestableString(obj[0].QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/3997ea98-340a-4731-9885-b6931b31b7c9/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/3997ea98-340a-4731-9885-b6931b31b7c9/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/3997ea98-340a-4731-9885-b6931b31b7c9/private_domains", TestUtil.ToTestableString(obj[0].PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/3997ea98-340a-4731-9885-b6931b31b7c9/users", TestUtil.ToTestableString(obj[0].UsersUrl), true);
                Assert.AreEqual("/v2/organizations/3997ea98-340a-4731-9885-b6931b31b7c9/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/3997ea98-340a-4731-9885-b6931b31b7c9/billing_managers", TestUtil.ToTestableString(obj[0].BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/3997ea98-340a-4731-9885-b6931b31b7c9/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/3997ea98-340a-4731-9885-b6931b31b7c9/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/3997ea98-340a-4731-9885-b6931b31b7c9/space_quota_definitions", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllAuditorsForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-247"",
        ""url"": ""/v2/users/uaa-id-247"",
        ""created_at"": ""2016-02-05T12:14:44Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""auditor@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-247/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-247/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-247/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-247/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-247/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-247/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-247/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllAuditorsForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-247", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-247", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:44Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("auditor@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-247/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-247/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-247/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-247/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-247/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-247/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-247/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllUsersForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-229"",
        ""url"": ""/v2/users/uaa-id-229"",
        ""created_at"": ""2016-02-05T12:14:44Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""user@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-229/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-229/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-229/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-229/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-229/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-229/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-229/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllUsersForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-229", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-229", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:44Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("user@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-229/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-229/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-229/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-229/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-229/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-229/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-229/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveManagerFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""9fbe64e2-3187-4cea-9eab-bf81b3eb54cf"",
    ""url"": ""/v2/organizations/9fbe64e2-3187-4cea-9eab-bf81b3eb54cf"",
    ""created_at"": ""2016-02-05T12:14:44Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1446"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""9e6e8bde-7cd8-4084-8844-8dad97cd1112"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/9e6e8bde-7cd8-4084-8844-8dad97cd1112"",
    ""spaces_url"": ""/v2/organizations/9fbe64e2-3187-4cea-9eab-bf81b3eb54cf/spaces"",
    ""domains_url"": ""/v2/organizations/9fbe64e2-3187-4cea-9eab-bf81b3eb54cf/domains"",
    ""private_domains_url"": ""/v2/organizations/9fbe64e2-3187-4cea-9eab-bf81b3eb54cf/private_domains"",
    ""users_url"": ""/v2/organizations/9fbe64e2-3187-4cea-9eab-bf81b3eb54cf/users"",
    ""managers_url"": ""/v2/organizations/9fbe64e2-3187-4cea-9eab-bf81b3eb54cf/managers"",
    ""billing_managers_url"": ""/v2/organizations/9fbe64e2-3187-4cea-9eab-bf81b3eb54cf/billing_managers"",
    ""auditors_url"": ""/v2/organizations/9fbe64e2-3187-4cea-9eab-bf81b3eb54cf/auditors"",
    ""app_events_url"": ""/v2/organizations/9fbe64e2-3187-4cea-9eab-bf81b3eb54cf/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/9fbe64e2-3187-4cea-9eab-bf81b3eb54cf/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? manager_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RemoveManagerFromOrganization(guid, manager_guid).Result;


                Assert.AreEqual("9fbe64e2-3187-4cea-9eab-bf81b3eb54cf", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/9fbe64e2-3187-4cea-9eab-bf81b3eb54cf", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:44Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1446", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("9e6e8bde-7cd8-4084-8844-8dad97cd1112", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/9e6e8bde-7cd8-4084-8844-8dad97cd1112", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/9fbe64e2-3187-4cea-9eab-bf81b3eb54cf/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/9fbe64e2-3187-4cea-9eab-bf81b3eb54cf/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/9fbe64e2-3187-4cea-9eab-bf81b3eb54cf/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/9fbe64e2-3187-4cea-9eab-bf81b3eb54cf/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/9fbe64e2-3187-4cea-9eab-bf81b3eb54cf/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/9fbe64e2-3187-4cea-9eab-bf81b3eb54cf/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/9fbe64e2-3187-4cea-9eab-bf81b3eb54cf/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/9fbe64e2-3187-4cea-9eab-bf81b3eb54cf/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/9fbe64e2-3187-4cea-9eab-bf81b3eb54cf/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllManagersForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 2,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-237"",
        ""url"": ""/v2/users/uaa-id-237"",
        ""created_at"": ""2016-02-05T12:14:44Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""manager@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-237/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-237/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-237/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-237/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-237/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-237/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-237/audited_spaces""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""uaa-id-238"",
        ""url"": ""/v2/users/uaa-id-238"",
        ""created_at"": ""2016-02-05T12:14:44Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""spaces_url"": ""/v2/users/uaa-id-238/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-238/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-238/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-238/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-238/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-238/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-238/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllManagersForOrganization(guid).Result;

                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-237", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-237", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:44Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("manager@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-237/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-237/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-237/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-237/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-237/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-237/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-237/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);
                Assert.AreEqual("uaa-id-238", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-238", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:44Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/uaa-id-238/spaces", TestUtil.ToTestableString(obj[1].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-238/organizations", TestUtil.ToTestableString(obj[1].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-238/managed_organizations", TestUtil.ToTestableString(obj[1].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-238/billing_managed_organizations", TestUtil.ToTestableString(obj[1].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-238/audited_organizations", TestUtil.ToTestableString(obj[1].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-238/managed_spaces", TestUtil.ToTestableString(obj[1].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-238/audited_spaces", TestUtil.ToTestableString(obj[1].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void CreateOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""6437218d-bb72-44de-8213-bd6d114d3883"",
    ""url"": ""/v2/organizations/6437218d-bb72-44de-8213-bd6d114d3883"",
    ""created_at"": ""2016-02-05T12:14:44Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""my-org-name"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""9658873b-1804-4c32-8435-ebfa0766dd29"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/9658873b-1804-4c32-8435-ebfa0766dd29"",
    ""spaces_url"": ""/v2/organizations/6437218d-bb72-44de-8213-bd6d114d3883/spaces"",
    ""domains_url"": ""/v2/organizations/6437218d-bb72-44de-8213-bd6d114d3883/domains"",
    ""private_domains_url"": ""/v2/organizations/6437218d-bb72-44de-8213-bd6d114d3883/private_domains"",
    ""users_url"": ""/v2/organizations/6437218d-bb72-44de-8213-bd6d114d3883/users"",
    ""managers_url"": ""/v2/organizations/6437218d-bb72-44de-8213-bd6d114d3883/managers"",
    ""billing_managers_url"": ""/v2/organizations/6437218d-bb72-44de-8213-bd6d114d3883/billing_managers"",
    ""auditors_url"": ""/v2/organizations/6437218d-bb72-44de-8213-bd6d114d3883/auditors"",
    ""app_events_url"": ""/v2/organizations/6437218d-bb72-44de-8213-bd6d114d3883/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/6437218d-bb72-44de-8213-bd6d114d3883/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateOrganizationRequest value = new CreateOrganizationRequest();


                var obj = cfClient.Organizations.CreateOrganization(value).Result;


                Assert.AreEqual("6437218d-bb72-44de-8213-bd6d114d3883", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/6437218d-bb72-44de-8213-bd6d114d3883", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:44Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("my-org-name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("9658873b-1804-4c32-8435-ebfa0766dd29", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/9658873b-1804-4c32-8435-ebfa0766dd29", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/6437218d-bb72-44de-8213-bd6d114d3883/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/6437218d-bb72-44de-8213-bd6d114d3883/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/6437218d-bb72-44de-8213-bd6d114d3883/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/6437218d-bb72-44de-8213-bd6d114d3883/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/6437218d-bb72-44de-8213-bd6d114d3883/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/6437218d-bb72-44de-8213-bd6d114d3883/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/6437218d-bb72-44de-8213-bd6d114d3883/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/6437218d-bb72-44de-8213-bd6d114d3883/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/6437218d-bb72-44de-8213-bd6d114d3883/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateBillingManagerWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""9f15db19-9334-4f16-b564-03f3039c86c8"",
    ""url"": ""/v2/organizations/9f15db19-9334-4f16-b564-03f3039c86c8"",
    ""created_at"": ""2016-02-05T12:14:44Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1427"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""5c31a8ed-f40c-4602-96e9-0678f442d366"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/5c31a8ed-f40c-4602-96e9-0678f442d366"",
    ""spaces_url"": ""/v2/organizations/9f15db19-9334-4f16-b564-03f3039c86c8/spaces"",
    ""domains_url"": ""/v2/organizations/9f15db19-9334-4f16-b564-03f3039c86c8/domains"",
    ""private_domains_url"": ""/v2/organizations/9f15db19-9334-4f16-b564-03f3039c86c8/private_domains"",
    ""users_url"": ""/v2/organizations/9f15db19-9334-4f16-b564-03f3039c86c8/users"",
    ""managers_url"": ""/v2/organizations/9f15db19-9334-4f16-b564-03f3039c86c8/managers"",
    ""billing_managers_url"": ""/v2/organizations/9f15db19-9334-4f16-b564-03f3039c86c8/billing_managers"",
    ""auditors_url"": ""/v2/organizations/9f15db19-9334-4f16-b564-03f3039c86c8/auditors"",
    ""app_events_url"": ""/v2/organizations/9f15db19-9334-4f16-b564-03f3039c86c8/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/9f15db19-9334-4f16-b564-03f3039c86c8/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? billing_manager_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateBillingManagerWithOrganization(guid, billing_manager_guid).Result;


                Assert.AreEqual("9f15db19-9334-4f16-b564-03f3039c86c8", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/9f15db19-9334-4f16-b564-03f3039c86c8", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:44Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1427", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("5c31a8ed-f40c-4602-96e9-0678f442d366", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/5c31a8ed-f40c-4602-96e9-0678f442d366", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/9f15db19-9334-4f16-b564-03f3039c86c8/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/9f15db19-9334-4f16-b564-03f3039c86c8/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/9f15db19-9334-4f16-b564-03f3039c86c8/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/9f15db19-9334-4f16-b564-03f3039c86c8/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/9f15db19-9334-4f16-b564-03f3039c86c8/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/9f15db19-9334-4f16-b564-03f3039c86c8/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/9f15db19-9334-4f16-b564-03f3039c86c8/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/9f15db19-9334-4f16-b564-03f3039c86c8/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/9f15db19-9334-4f16-b564-03f3039c86c8/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""ca061f92-c57b-457b-b50c-f743247c79f3"",
    ""url"": ""/v2/organizations/ca061f92-c57b-457b-b50c-f743247c79f3"",
    ""created_at"": ""2016-02-05T12:14:44Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1420"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""a6f57fb3-6d54-4c74-a5dd-d0d8e411c5f1"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/a6f57fb3-6d54-4c74-a5dd-d0d8e411c5f1"",
    ""spaces_url"": ""/v2/organizations/ca061f92-c57b-457b-b50c-f743247c79f3/spaces"",
    ""domains_url"": ""/v2/organizations/ca061f92-c57b-457b-b50c-f743247c79f3/domains"",
    ""private_domains_url"": ""/v2/organizations/ca061f92-c57b-457b-b50c-f743247c79f3/private_domains"",
    ""users_url"": ""/v2/organizations/ca061f92-c57b-457b-b50c-f743247c79f3/users"",
    ""managers_url"": ""/v2/organizations/ca061f92-c57b-457b-b50c-f743247c79f3/managers"",
    ""billing_managers_url"": ""/v2/organizations/ca061f92-c57b-457b-b50c-f743247c79f3/billing_managers"",
    ""auditors_url"": ""/v2/organizations/ca061f92-c57b-457b-b50c-f743247c79f3/auditors"",
    ""app_events_url"": ""/v2/organizations/ca061f92-c57b-457b-b50c-f743247c79f3/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/ca061f92-c57b-457b-b50c-f743247c79f3/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RetrieveOrganization(guid).Result;


                Assert.AreEqual("ca061f92-c57b-457b-b50c-f743247c79f3", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/ca061f92-c57b-457b-b50c-f743247c79f3", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:44Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1420", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("a6f57fb3-6d54-4c74-a5dd-d0d8e411c5f1", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/a6f57fb3-6d54-4c74-a5dd-d0d8e411c5f1", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/ca061f92-c57b-457b-b50c-f743247c79f3/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/ca061f92-c57b-457b-b50c-f743247c79f3/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/ca061f92-c57b-457b-b50c-f743247c79f3/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/ca061f92-c57b-457b-b50c-f743247c79f3/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/ca061f92-c57b-457b-b50c-f743247c79f3/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/ca061f92-c57b-457b-b50c-f743247c79f3/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/ca061f92-c57b-457b-b50c-f743247c79f3/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/ca061f92-c57b-457b-b50c-f743247c79f3/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/ca061f92-c57b-457b-b50c-f743247c79f3/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RetrievingQuotaUsageForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""1f2b627d-d5d9-426c-9e71-575a60c4de72"",
    ""url"": ""/v2/quota_definitions/1f2b627d-d5d9-426c-9e71-575a60c4de72"",
    ""created_at"": ""2016-02-05T12:14:44Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1430"",
    ""non_basic_services_allowed"": true,
    ""total_services"": 60,
    ""total_routes"": 1000,
    ""memory_limit"": 20480,
    ""trial_db_allowed"": false,
    ""instance_memory_limit"": -1,
    ""org_usage"": {
      ""routes"": 1,
      ""services"": 1,
      ""memory"": 500
    }
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RetrievingQuotaUsageForOrganization(guid).Result;


                Assert.AreEqual("1f2b627d-d5d9-426c-9e71-575a60c4de72", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/quota_definitions/1f2b627d-d5d9-426c-9e71-575a60c4de72", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:44Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1430", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.NonBasicServicesAllowed), true);
                Assert.AreEqual("60", TestUtil.ToTestableString(obj.TotalServices), true);
                Assert.AreEqual("1000", TestUtil.ToTestableString(obj.TotalRoutes), true);
                Assert.AreEqual("20480", TestUtil.ToTestableString(obj.MemoryLimit), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.TrialDbAllowed), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj.InstanceMemoryLimit), true);

            }
        }

        [TestMethod]
        public void AssociateAuditorWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""abc9a272-8766-47f7-ab43-ac5d6fe0bebb"",
    ""url"": ""/v2/organizations/abc9a272-8766-47f7-ab43-ac5d6fe0bebb"",
    ""created_at"": ""2016-02-05T12:14:45Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1458"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""47c65f8d-a3f4-40b9-91cc-7880b18a3461"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/47c65f8d-a3f4-40b9-91cc-7880b18a3461"",
    ""spaces_url"": ""/v2/organizations/abc9a272-8766-47f7-ab43-ac5d6fe0bebb/spaces"",
    ""domains_url"": ""/v2/organizations/abc9a272-8766-47f7-ab43-ac5d6fe0bebb/domains"",
    ""private_domains_url"": ""/v2/organizations/abc9a272-8766-47f7-ab43-ac5d6fe0bebb/private_domains"",
    ""users_url"": ""/v2/organizations/abc9a272-8766-47f7-ab43-ac5d6fe0bebb/users"",
    ""managers_url"": ""/v2/organizations/abc9a272-8766-47f7-ab43-ac5d6fe0bebb/managers"",
    ""billing_managers_url"": ""/v2/organizations/abc9a272-8766-47f7-ab43-ac5d6fe0bebb/billing_managers"",
    ""auditors_url"": ""/v2/organizations/abc9a272-8766-47f7-ab43-ac5d6fe0bebb/auditors"",
    ""app_events_url"": ""/v2/organizations/abc9a272-8766-47f7-ab43-ac5d6fe0bebb/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/abc9a272-8766-47f7-ab43-ac5d6fe0bebb/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? auditor_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateAuditorWithOrganization(guid, auditor_guid).Result;


                Assert.AreEqual("abc9a272-8766-47f7-ab43-ac5d6fe0bebb", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/abc9a272-8766-47f7-ab43-ac5d6fe0bebb", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:45Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1458", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("47c65f8d-a3f4-40b9-91cc-7880b18a3461", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/47c65f8d-a3f4-40b9-91cc-7880b18a3461", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/abc9a272-8766-47f7-ab43-ac5d6fe0bebb/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/abc9a272-8766-47f7-ab43-ac5d6fe0bebb/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/abc9a272-8766-47f7-ab43-ac5d6fe0bebb/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/abc9a272-8766-47f7-ab43-ac5d6fe0bebb/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/abc9a272-8766-47f7-ab43-ac5d6fe0bebb/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/abc9a272-8766-47f7-ab43-ac5d6fe0bebb/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/abc9a272-8766-47f7-ab43-ac5d6fe0bebb/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/abc9a272-8766-47f7-ab43-ac5d6fe0bebb/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/abc9a272-8766-47f7-ab43-ac5d6fe0bebb/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void AssociatePrivateDomainWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""d9f3a824-8884-4db3-af08-a18c5ff5ef7a"",
    ""url"": ""/v2/organizations/d9f3a824-8884-4db3-af08-a18c5ff5ef7a"",
    ""created_at"": ""2016-02-05T12:14:45Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1477"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""d4ab5c9b-e16b-4152-afc7-d1efd3fef5c1"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/d4ab5c9b-e16b-4152-afc7-d1efd3fef5c1"",
    ""spaces_url"": ""/v2/organizations/d9f3a824-8884-4db3-af08-a18c5ff5ef7a/spaces"",
    ""domains_url"": ""/v2/organizations/d9f3a824-8884-4db3-af08-a18c5ff5ef7a/domains"",
    ""private_domains_url"": ""/v2/organizations/d9f3a824-8884-4db3-af08-a18c5ff5ef7a/private_domains"",
    ""users_url"": ""/v2/organizations/d9f3a824-8884-4db3-af08-a18c5ff5ef7a/users"",
    ""managers_url"": ""/v2/organizations/d9f3a824-8884-4db3-af08-a18c5ff5ef7a/managers"",
    ""billing_managers_url"": ""/v2/organizations/d9f3a824-8884-4db3-af08-a18c5ff5ef7a/billing_managers"",
    ""auditors_url"": ""/v2/organizations/d9f3a824-8884-4db3-af08-a18c5ff5ef7a/auditors"",
    ""app_events_url"": ""/v2/organizations/d9f3a824-8884-4db3-af08-a18c5ff5ef7a/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/d9f3a824-8884-4db3-af08-a18c5ff5ef7a/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? private_domain_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociatePrivateDomainWithOrganization(guid, private_domain_guid).Result;


                Assert.AreEqual("d9f3a824-8884-4db3-af08-a18c5ff5ef7a", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/d9f3a824-8884-4db3-af08-a18c5ff5ef7a", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:45Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1477", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("d4ab5c9b-e16b-4152-afc7-d1efd3fef5c1", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/d4ab5c9b-e16b-4152-afc7-d1efd3fef5c1", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/d9f3a824-8884-4db3-af08-a18c5ff5ef7a/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/d9f3a824-8884-4db3-af08-a18c5ff5ef7a/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/d9f3a824-8884-4db3-af08-a18c5ff5ef7a/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/d9f3a824-8884-4db3-af08-a18c5ff5ef7a/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/d9f3a824-8884-4db3-af08-a18c5ff5ef7a/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/d9f3a824-8884-4db3-af08-a18c5ff5ef7a/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/d9f3a824-8884-4db3-af08-a18c5ff5ef7a/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/d9f3a824-8884-4db3-af08-a18c5ff5ef7a/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/d9f3a824-8884-4db3-af08-a18c5ff5ef7a/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveAuditorFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""fe85b8c3-88d8-4091-bcca-008e7d75f790"",
    ""url"": ""/v2/organizations/fe85b8c3-88d8-4091-bcca-008e7d75f790"",
    ""created_at"": ""2016-02-05T12:14:44Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1454"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""ce2c4891-7c3f-4789-846a-b686ae8f76c5"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/ce2c4891-7c3f-4789-846a-b686ae8f76c5"",
    ""spaces_url"": ""/v2/organizations/fe85b8c3-88d8-4091-bcca-008e7d75f790/spaces"",
    ""domains_url"": ""/v2/organizations/fe85b8c3-88d8-4091-bcca-008e7d75f790/domains"",
    ""private_domains_url"": ""/v2/organizations/fe85b8c3-88d8-4091-bcca-008e7d75f790/private_domains"",
    ""users_url"": ""/v2/organizations/fe85b8c3-88d8-4091-bcca-008e7d75f790/users"",
    ""managers_url"": ""/v2/organizations/fe85b8c3-88d8-4091-bcca-008e7d75f790/managers"",
    ""billing_managers_url"": ""/v2/organizations/fe85b8c3-88d8-4091-bcca-008e7d75f790/billing_managers"",
    ""auditors_url"": ""/v2/organizations/fe85b8c3-88d8-4091-bcca-008e7d75f790/auditors"",
    ""app_events_url"": ""/v2/organizations/fe85b8c3-88d8-4091-bcca-008e7d75f790/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/fe85b8c3-88d8-4091-bcca-008e7d75f790/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? auditor_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RemoveAuditorFromOrganization(guid, auditor_guid).Result;


                Assert.AreEqual("fe85b8c3-88d8-4091-bcca-008e7d75f790", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/fe85b8c3-88d8-4091-bcca-008e7d75f790", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:44Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1454", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("ce2c4891-7c3f-4789-846a-b686ae8f76c5", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/ce2c4891-7c3f-4789-846a-b686ae8f76c5", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/fe85b8c3-88d8-4091-bcca-008e7d75f790/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/fe85b8c3-88d8-4091-bcca-008e7d75f790/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/fe85b8c3-88d8-4091-bcca-008e7d75f790/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/fe85b8c3-88d8-4091-bcca-008e7d75f790/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/fe85b8c3-88d8-4091-bcca-008e7d75f790/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/fe85b8c3-88d8-4091-bcca-008e7d75f790/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/fe85b8c3-88d8-4091-bcca-008e7d75f790/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/fe85b8c3-88d8-4091-bcca-008e7d75f790/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/fe85b8c3-88d8-4091-bcca-008e7d75f790/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateManagerWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""a58bdd75-81ab-4253-99eb-9bc15fe73097"",
    ""url"": ""/v2/organizations/a58bdd75-81ab-4253-99eb-9bc15fe73097"",
    ""created_at"": ""2016-02-05T12:14:44Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1450"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""18b92efb-cabc-4579-8e4a-5af9666d20df"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/18b92efb-cabc-4579-8e4a-5af9666d20df"",
    ""spaces_url"": ""/v2/organizations/a58bdd75-81ab-4253-99eb-9bc15fe73097/spaces"",
    ""domains_url"": ""/v2/organizations/a58bdd75-81ab-4253-99eb-9bc15fe73097/domains"",
    ""private_domains_url"": ""/v2/organizations/a58bdd75-81ab-4253-99eb-9bc15fe73097/private_domains"",
    ""users_url"": ""/v2/organizations/a58bdd75-81ab-4253-99eb-9bc15fe73097/users"",
    ""managers_url"": ""/v2/organizations/a58bdd75-81ab-4253-99eb-9bc15fe73097/managers"",
    ""billing_managers_url"": ""/v2/organizations/a58bdd75-81ab-4253-99eb-9bc15fe73097/billing_managers"",
    ""auditors_url"": ""/v2/organizations/a58bdd75-81ab-4253-99eb-9bc15fe73097/auditors"",
    ""app_events_url"": ""/v2/organizations/a58bdd75-81ab-4253-99eb-9bc15fe73097/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/a58bdd75-81ab-4253-99eb-9bc15fe73097/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? manager_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateManagerWithOrganization(guid, manager_guid).Result;


                Assert.AreEqual("a58bdd75-81ab-4253-99eb-9bc15fe73097", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/a58bdd75-81ab-4253-99eb-9bc15fe73097", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:44Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1450", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("18b92efb-cabc-4579-8e4a-5af9666d20df", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/18b92efb-cabc-4579-8e4a-5af9666d20df", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/a58bdd75-81ab-4253-99eb-9bc15fe73097/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/a58bdd75-81ab-4253-99eb-9bc15fe73097/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/a58bdd75-81ab-4253-99eb-9bc15fe73097/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/a58bdd75-81ab-4253-99eb-9bc15fe73097/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/a58bdd75-81ab-4253-99eb-9bc15fe73097/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/a58bdd75-81ab-4253-99eb-9bc15fe73097/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/a58bdd75-81ab-4253-99eb-9bc15fe73097/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/a58bdd75-81ab-4253-99eb-9bc15fe73097/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/a58bdd75-81ab-4253-99eb-9bc15fe73097/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

    }
}