//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class SecurityGroupsEndpoint
{
        [TestMethod]
        public void UpdateSecurityGroupTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""bc3aa061-025a-45f6-8674-6a69944c42a9"",
    ""url"": ""/v2/security_groups/bc3aa061-025a-45f6-8674-6a69944c42a9"",
    ""created_at"": ""2016-02-05T12:14:47Z"",
    ""updated_at"": ""2016-02-05T12:14:49Z""
  },
  ""entity"": {
    ""name"": ""new_name"",
    ""rules"": [

    ],
    ""running_default"": false,
    ""staging_default"": false,
    ""spaces_url"": ""/v2/security_groups/bc3aa061-025a-45f6-8674-6a69944c42a9/spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateSecurityGroupRequest value = new UpdateSecurityGroupRequest();


                var obj = cfClient.SecurityGroups.UpdateSecurityGroup(guid, value).Result;


                Assert.AreEqual("bc3aa061-025a-45f6-8674-6a69944c42a9", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/security_groups/bc3aa061-025a-45f6-8674-6a69944c42a9", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:47Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-02-05T12:14:49Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("new_name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.RunningDefault), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.StagingDefault), true);
                Assert.AreEqual("/v2/security_groups/bc3aa061-025a-45f6-8674-6a69944c42a9/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSecurityGroupsTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 5,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""bc3aa061-025a-45f6-8674-6a69944c42a9"",
        ""url"": ""/v2/security_groups/bc3aa061-025a-45f6-8674-6a69944c42a9"",
        ""created_at"": ""2016-02-05T12:14:47Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""dummy1"",
        ""rules"": [

        ],
        ""running_default"": false,
        ""staging_default"": false,
        ""spaces_url"": ""/v2/security_groups/bc3aa061-025a-45f6-8674-6a69944c42a9/spaces""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""d038efe1-6c53-4495-b6ae-eb429144b342"",
        ""url"": ""/v2/security_groups/d038efe1-6c53-4495-b6ae-eb429144b342"",
        ""created_at"": ""2016-02-05T12:14:47Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""dummy2"",
        ""rules"": [

        ],
        ""running_default"": false,
        ""staging_default"": false,
        ""spaces_url"": ""/v2/security_groups/d038efe1-6c53-4495-b6ae-eb429144b342/spaces""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""bbd2435b-b536-4ff0-b83a-216e2d1f9051"",
        ""url"": ""/v2/security_groups/bbd2435b-b536-4ff0-b83a-216e2d1f9051"",
        ""created_at"": ""2016-02-05T12:14:49Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1818"",
        ""rules"": [
          {
            ""protocol"": ""udp"",
            ""ports"": ""8080"",
            ""destination"": ""198.41.191.47/1""
          }
        ],
        ""running_default"": false,
        ""staging_default"": false,
        ""spaces_url"": ""/v2/security_groups/bbd2435b-b536-4ff0-b83a-216e2d1f9051/spaces""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""40512380-db93-4e89-85a3-64501ce8a802"",
        ""url"": ""/v2/security_groups/40512380-db93-4e89-85a3-64501ce8a802"",
        ""created_at"": ""2016-02-05T12:14:49Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1819"",
        ""rules"": [
          {
            ""protocol"": ""udp"",
            ""ports"": ""8080"",
            ""destination"": ""198.41.191.47/1""
          }
        ],
        ""running_default"": false,
        ""staging_default"": false,
        ""spaces_url"": ""/v2/security_groups/40512380-db93-4e89-85a3-64501ce8a802/spaces""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""5e1c030b-fde8-4a91-a20c-cc8b4aedf470"",
        ""url"": ""/v2/security_groups/5e1c030b-fde8-4a91-a20c-cc8b4aedf470"",
        ""created_at"": ""2016-02-05T12:14:49Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1820"",
        ""rules"": [
          {
            ""protocol"": ""udp"",
            ""ports"": ""8080"",
            ""destination"": ""198.41.191.47/1""
          }
        ],
        ""running_default"": false,
        ""staging_default"": false,
        ""spaces_url"": ""/v2/security_groups/5e1c030b-fde8-4a91-a20c-cc8b4aedf470/spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.SecurityGroups.ListAllSecurityGroups().Result;

                Assert.AreEqual("5", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("bc3aa061-025a-45f6-8674-6a69944c42a9", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/security_groups/bc3aa061-025a-45f6-8674-6a69944c42a9", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:47Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("dummy1", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].RunningDefault), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].StagingDefault), true);
                Assert.AreEqual("/v2/security_groups/bc3aa061-025a-45f6-8674-6a69944c42a9/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("d038efe1-6c53-4495-b6ae-eb429144b342", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/security_groups/d038efe1-6c53-4495-b6ae-eb429144b342", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:47Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("dummy2", TestUtil.ToTestableString(obj[1].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].RunningDefault), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].StagingDefault), true);
                Assert.AreEqual("/v2/security_groups/d038efe1-6c53-4495-b6ae-eb429144b342/spaces", TestUtil.ToTestableString(obj[1].SpacesUrl), true);
                Assert.AreEqual("bbd2435b-b536-4ff0-b83a-216e2d1f9051", TestUtil.ToTestableString(obj[2].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/security_groups/bbd2435b-b536-4ff0-b83a-216e2d1f9051", TestUtil.ToTestableString(obj[2].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:49Z", TestUtil.ToTestableString(obj[2].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1818", TestUtil.ToTestableString(obj[2].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[2].RunningDefault), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[2].StagingDefault), true);
                Assert.AreEqual("/v2/security_groups/bbd2435b-b536-4ff0-b83a-216e2d1f9051/spaces", TestUtil.ToTestableString(obj[2].SpacesUrl), true);
                Assert.AreEqual("40512380-db93-4e89-85a3-64501ce8a802", TestUtil.ToTestableString(obj[3].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/security_groups/40512380-db93-4e89-85a3-64501ce8a802", TestUtil.ToTestableString(obj[3].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:49Z", TestUtil.ToTestableString(obj[3].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[3].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1819", TestUtil.ToTestableString(obj[3].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[3].RunningDefault), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[3].StagingDefault), true);
                Assert.AreEqual("/v2/security_groups/40512380-db93-4e89-85a3-64501ce8a802/spaces", TestUtil.ToTestableString(obj[3].SpacesUrl), true);
                Assert.AreEqual("5e1c030b-fde8-4a91-a20c-cc8b4aedf470", TestUtil.ToTestableString(obj[4].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/security_groups/5e1c030b-fde8-4a91-a20c-cc8b4aedf470", TestUtil.ToTestableString(obj[4].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:49Z", TestUtil.ToTestableString(obj[4].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[4].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1820", TestUtil.ToTestableString(obj[4].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[4].RunningDefault), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[4].StagingDefault), true);
                Assert.AreEqual("/v2/security_groups/5e1c030b-fde8-4a91-a20c-cc8b4aedf470/spaces", TestUtil.ToTestableString(obj[4].SpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveSpaceFromSecurityGroupTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""bc3aa061-025a-45f6-8674-6a69944c42a9"",
    ""url"": ""/v2/security_groups/bc3aa061-025a-45f6-8674-6a69944c42a9"",
    ""created_at"": ""2016-02-05T12:14:47Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""dummy1"",
    ""rules"": [

    ],
    ""running_default"": false,
    ""staging_default"": false,
    ""spaces_url"": ""/v2/security_groups/bc3aa061-025a-45f6-8674-6a69944c42a9/spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? space_guid = Guid.NewGuid();


                var obj = cfClient.SecurityGroups.RemoveSpaceFromSecurityGroup(guid, space_guid).Result;


                Assert.AreEqual("bc3aa061-025a-45f6-8674-6a69944c42a9", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/security_groups/bc3aa061-025a-45f6-8674-6a69944c42a9", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:47Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("dummy1", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.RunningDefault), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.StagingDefault), true);
                Assert.AreEqual("/v2/security_groups/bc3aa061-025a-45f6-8674-6a69944c42a9/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);

            }
        }

        [TestMethod]
        public void DeleteSecurityGroupTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.SecurityGroups.DeleteSecurityGroup(guid).Wait();

            }
        }

        [TestMethod]
        public void AssociateSpaceWithSecurityGroupTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""bc3aa061-025a-45f6-8674-6a69944c42a9"",
    ""url"": ""/v2/security_groups/bc3aa061-025a-45f6-8674-6a69944c42a9"",
    ""created_at"": ""2016-02-05T12:14:47Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""dummy1"",
    ""rules"": [

    ],
    ""running_default"": false,
    ""staging_default"": false,
    ""spaces_url"": ""/v2/security_groups/bc3aa061-025a-45f6-8674-6a69944c42a9/spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? space_guid = Guid.NewGuid();


                var obj = cfClient.SecurityGroups.AssociateSpaceWithSecurityGroup(guid, space_guid).Result;


                Assert.AreEqual("bc3aa061-025a-45f6-8674-6a69944c42a9", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/security_groups/bc3aa061-025a-45f6-8674-6a69944c42a9", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:47Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("dummy1", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.RunningDefault), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.StagingDefault), true);
                Assert.AreEqual("/v2/security_groups/bc3aa061-025a-45f6-8674-6a69944c42a9/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);

            }
        }

        [TestMethod]
        public void CreateSecurityGroupTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""c47c8f19-14b9-4991-bdca-4af1a8d72d5c"",
    ""url"": ""/v2/security_groups/c47c8f19-14b9-4991-bdca-4af1a8d72d5c"",
    ""created_at"": ""2016-02-05T12:14:49Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""my_super_sec_group"",
    ""rules"": [
      {
        ""protocol"": ""icmp"",
        ""destination"": ""0.0.0.0/0"",
        ""type"": 0,
        ""code"": 1
      },
      {
        ""protocol"": ""tcp"",
        ""destination"": ""0.0.0.0/0"",
        ""ports"": ""2048-3000"",
        ""log"": true
      },
      {
        ""protocol"": ""udp"",
        ""destination"": ""0.0.0.0/0"",
        ""ports"": ""53, 5353""
      },
      {
        ""protocol"": ""all"",
        ""destination"": ""0.0.0.0/0""
      }
    ],
    ""running_default"": false,
    ""staging_default"": false,
    ""spaces_url"": ""/v2/security_groups/c47c8f19-14b9-4991-bdca-4af1a8d72d5c/spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateSecurityGroupRequest value = new CreateSecurityGroupRequest();


                var obj = cfClient.SecurityGroups.CreateSecurityGroup(value).Result;


                Assert.AreEqual("c47c8f19-14b9-4991-bdca-4af1a8d72d5c", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/security_groups/c47c8f19-14b9-4991-bdca-4af1a8d72d5c", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:49Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("my_super_sec_group", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.RunningDefault), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.StagingDefault), true);
                Assert.AreEqual("/v2/security_groups/c47c8f19-14b9-4991-bdca-4af1a8d72d5c/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveSecurityGroupTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""bc3aa061-025a-45f6-8674-6a69944c42a9"",
    ""url"": ""/v2/security_groups/bc3aa061-025a-45f6-8674-6a69944c42a9"",
    ""created_at"": ""2016-02-05T12:14:47Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""dummy1"",
    ""rules"": [

    ],
    ""running_default"": false,
    ""staging_default"": false,
    ""spaces_url"": ""/v2/security_groups/bc3aa061-025a-45f6-8674-6a69944c42a9/spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.SecurityGroups.RetrieveSecurityGroup(guid).Result;


                Assert.AreEqual("bc3aa061-025a-45f6-8674-6a69944c42a9", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/security_groups/bc3aa061-025a-45f6-8674-6a69944c42a9", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:47Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("dummy1", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.RunningDefault), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.StagingDefault), true);
                Assert.AreEqual("/v2/security_groups/bc3aa061-025a-45f6-8674-6a69944c42a9/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSpacesForSecurityGroupTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""b76f73b5-3e2a-4e04-9c5d-c59843e4d326"",
        ""url"": ""/v2/spaces/b76f73b5-3e2a-4e04-9c5d-c59843e4d326"",
        ""created_at"": ""2016-02-05T12:14:49Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1830"",
        ""organization_guid"": ""6d89e3f2-2884-414f-bb8c-ac7b5fd2c42e"",
        ""space_quota_definition_guid"": null,
        ""allow_ssh"": true,
        ""organization_url"": ""/v2/organizations/6d89e3f2-2884-414f-bb8c-ac7b5fd2c42e"",
        ""developers_url"": ""/v2/spaces/b76f73b5-3e2a-4e04-9c5d-c59843e4d326/developers"",
        ""managers_url"": ""/v2/spaces/b76f73b5-3e2a-4e04-9c5d-c59843e4d326/managers"",
        ""auditors_url"": ""/v2/spaces/b76f73b5-3e2a-4e04-9c5d-c59843e4d326/auditors"",
        ""apps_url"": ""/v2/spaces/b76f73b5-3e2a-4e04-9c5d-c59843e4d326/apps"",
        ""routes_url"": ""/v2/spaces/b76f73b5-3e2a-4e04-9c5d-c59843e4d326/routes"",
        ""domains_url"": ""/v2/spaces/b76f73b5-3e2a-4e04-9c5d-c59843e4d326/domains"",
        ""service_instances_url"": ""/v2/spaces/b76f73b5-3e2a-4e04-9c5d-c59843e4d326/service_instances"",
        ""app_events_url"": ""/v2/spaces/b76f73b5-3e2a-4e04-9c5d-c59843e4d326/app_events"",
        ""events_url"": ""/v2/spaces/b76f73b5-3e2a-4e04-9c5d-c59843e4d326/events"",
        ""security_groups_url"": ""/v2/spaces/b76f73b5-3e2a-4e04-9c5d-c59843e4d326/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.SecurityGroups.ListAllSpacesForSecurityGroup(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("b76f73b5-3e2a-4e04-9c5d-c59843e4d326", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/b76f73b5-3e2a-4e04-9c5d-c59843e4d326", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-05T12:14:49Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1830", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("6d89e3f2-2884-414f-bb8c-ac7b5fd2c42e", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].AllowSsh), true);
                Assert.AreEqual("/v2/organizations/6d89e3f2-2884-414f-bb8c-ac7b5fd2c42e", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/b76f73b5-3e2a-4e04-9c5d-c59843e4d326/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/b76f73b5-3e2a-4e04-9c5d-c59843e4d326/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/b76f73b5-3e2a-4e04-9c5d-c59843e4d326/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/b76f73b5-3e2a-4e04-9c5d-c59843e4d326/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/b76f73b5-3e2a-4e04-9c5d-c59843e4d326/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/b76f73b5-3e2a-4e04-9c5d-c59843e4d326/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/b76f73b5-3e2a-4e04-9c5d-c59843e4d326/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/b76f73b5-3e2a-4e04-9c5d-c59843e4d326/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/b76f73b5-3e2a-4e04-9c5d-c59843e4d326/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/b76f73b5-3e2a-4e04-9c5d-c59843e4d326/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

    }
}