//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class SpacesEndpoint
{
        [TestMethod]
        public void DeleteSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Spaces.DeleteSpace(guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllDevelopersForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""152001a9-6435-4c7a-a907-57450888fc3c"",
        ""url"": ""/v2/users/uaa-id-274"",
        ""created_at"": ""2016-05-05T14:15:18Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""developer@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-274/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-274/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-274/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-274/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-274/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-274/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-274/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllDevelopersForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("152001a9-6435-4c7a-a907-57450888fc3c", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-274", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:18Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("developer@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-274/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-274/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-274/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-274/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-274/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-274/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-274/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void AssociateSecurityGroupWithSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""10da73ee-38f3-4b16-950c-403dc9b61bb6"",
    ""url"": ""/v2/spaces/86581883-0bb3-4bb7-a7dd-1a0f87c2988a"",
    ""created_at"": ""2016-05-05T14:15:20Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1813"",
    ""organization_guid"": ""10da73ee-38f3-4b16-950c-403dc9b61bb6"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/c90ebe46-a0e0-4fd7-9f60-3cd6d733dd71"",
    ""developers_url"": ""/v2/spaces/86581883-0bb3-4bb7-a7dd-1a0f87c2988a/developers"",
    ""managers_url"": ""/v2/spaces/86581883-0bb3-4bb7-a7dd-1a0f87c2988a/managers"",
    ""auditors_url"": ""/v2/spaces/86581883-0bb3-4bb7-a7dd-1a0f87c2988a/auditors"",
    ""apps_url"": ""/v2/spaces/86581883-0bb3-4bb7-a7dd-1a0f87c2988a/apps"",
    ""routes_url"": ""/v2/spaces/86581883-0bb3-4bb7-a7dd-1a0f87c2988a/routes"",
    ""domains_url"": ""/v2/spaces/86581883-0bb3-4bb7-a7dd-1a0f87c2988a/domains"",
    ""service_instances_url"": ""/v2/spaces/86581883-0bb3-4bb7-a7dd-1a0f87c2988a/service_instances"",
    ""app_events_url"": ""/v2/spaces/86581883-0bb3-4bb7-a7dd-1a0f87c2988a/app_events"",
    ""events_url"": ""/v2/spaces/86581883-0bb3-4bb7-a7dd-1a0f87c2988a/events"",
    ""security_groups_url"": ""/v2/spaces/86581883-0bb3-4bb7-a7dd-1a0f87c2988a/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? security_group_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.AssociateSecurityGroupWithSpace(guid, security_group_guid).Result;


                Assert.AreEqual("10da73ee-38f3-4b16-950c-403dc9b61bb6", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/86581883-0bb3-4bb7-a7dd-1a0f87c2988a", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:20Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1813", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("10da73ee-38f3-4b16-950c-403dc9b61bb6", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/c90ebe46-a0e0-4fd7-9f60-3cd6d733dd71", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/86581883-0bb3-4bb7-a7dd-1a0f87c2988a/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/86581883-0bb3-4bb7-a7dd-1a0f87c2988a/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/86581883-0bb3-4bb7-a7dd-1a0f87c2988a/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/86581883-0bb3-4bb7-a7dd-1a0f87c2988a/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/86581883-0bb3-4bb7-a7dd-1a0f87c2988a/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/86581883-0bb3-4bb7-a7dd-1a0f87c2988a/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/86581883-0bb3-4bb7-a7dd-1a0f87c2988a/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/86581883-0bb3-4bb7-a7dd-1a0f87c2988a/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/86581883-0bb3-4bb7-a7dd-1a0f87c2988a/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/86581883-0bb3-4bb7-a7dd-1a0f87c2988a/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveAuditorWithSpaceByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""34a92f10-ad43-471d-92de-db4f536e3d23"",
    ""url"": ""/v2/spaces/e0566c23-bca5-4dab-85b9-64d1cb3d50e8"",
    ""created_at"": ""2016-05-05T14:15:19Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1776"",
    ""organization_guid"": ""34a92f10-ad43-471d-92de-db4f536e3d23"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/0ef8fae4-4b96-445f-ae08-48fcb409c001"",
    ""developers_url"": ""/v2/spaces/e0566c23-bca5-4dab-85b9-64d1cb3d50e8/developers"",
    ""managers_url"": ""/v2/spaces/e0566c23-bca5-4dab-85b9-64d1cb3d50e8/managers"",
    ""auditors_url"": ""/v2/spaces/e0566c23-bca5-4dab-85b9-64d1cb3d50e8/auditors"",
    ""apps_url"": ""/v2/spaces/e0566c23-bca5-4dab-85b9-64d1cb3d50e8/apps"",
    ""routes_url"": ""/v2/spaces/e0566c23-bca5-4dab-85b9-64d1cb3d50e8/routes"",
    ""domains_url"": ""/v2/spaces/e0566c23-bca5-4dab-85b9-64d1cb3d50e8/domains"",
    ""service_instances_url"": ""/v2/spaces/e0566c23-bca5-4dab-85b9-64d1cb3d50e8/service_instances"",
    ""app_events_url"": ""/v2/spaces/e0566c23-bca5-4dab-85b9-64d1cb3d50e8/app_events"",
    ""events_url"": ""/v2/spaces/e0566c23-bca5-4dab-85b9-64d1cb3d50e8/events"",
    ""security_groups_url"": ""/v2/spaces/e0566c23-bca5-4dab-85b9-64d1cb3d50e8/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                RemoveAuditorWithSpaceByUsernameRequest value = new RemoveAuditorWithSpaceByUsernameRequest();


                var obj = cfClient.Spaces.RemoveAuditorWithSpaceByUsername(guid, value).Result;


                Assert.AreEqual("34a92f10-ad43-471d-92de-db4f536e3d23", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/e0566c23-bca5-4dab-85b9-64d1cb3d50e8", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:19Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1776", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("34a92f10-ad43-471d-92de-db4f536e3d23", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/0ef8fae4-4b96-445f-ae08-48fcb409c001", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/e0566c23-bca5-4dab-85b9-64d1cb3d50e8/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/e0566c23-bca5-4dab-85b9-64d1cb3d50e8/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/e0566c23-bca5-4dab-85b9-64d1cb3d50e8/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/e0566c23-bca5-4dab-85b9-64d1cb3d50e8/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/e0566c23-bca5-4dab-85b9-64d1cb3d50e8/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/e0566c23-bca5-4dab-85b9-64d1cb3d50e8/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/e0566c23-bca5-4dab-85b9-64d1cb3d50e8/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/e0566c23-bca5-4dab-85b9-64d1cb3d50e8/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/e0566c23-bca5-4dab-85b9-64d1cb3d50e8/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/e0566c23-bca5-4dab-85b9-64d1cb3d50e8/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllDomainsForSpaceDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 2,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""714b1209-23a2-45f5-8ea2-4b15d8134520"",
        ""url"": ""/v2/domains/3114d0be-2abf-478b-80ae-2ab1fddcd759"",
        ""created_at"": ""2016-05-05T14:15:13Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain1.com"",
        ""router_group_guid"": null,
        ""router_group_type"": null
      }
    },
    {
      ""metadata"": {
        ""guid"": ""714b1209-23a2-45f5-8ea2-4b15d8134520"",
        ""url"": ""/v2/domains/0b64fd42-654d-4fac-aecc-6b2763848926"",
        ""created_at"": ""2016-05-05T14:15:13Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain2.com"",
        ""router_group_guid"": null,
        ""router_group_type"": null
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllDomainsForSpaceDeprecated(guid).Result;

                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("714b1209-23a2-45f5-8ea2-4b15d8134520", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/3114d0be-2abf-478b-80ae-2ab1fddcd759", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:13Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain1.com", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].RouterGroupGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].RouterGroupType), true);
                Assert.AreEqual("714b1209-23a2-45f5-8ea2-4b15d8134520", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/0b64fd42-654d-4fac-aecc-6b2763848926", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:13Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain2.com", TestUtil.ToTestableString(obj[1].Name), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].RouterGroupGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].RouterGroupType), true);

            }
        }

        [TestMethod]
        public void ListAllSecurityGroupsForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""31a7ac2c-2858-4711-a5fb-c014bc6dcd3b"",
        ""url"": ""/v2/security_groups/6f70fa28-ac2a-459a-b38b-ba4cdf5add32"",
        ""created_at"": ""2016-05-05T14:15:20Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1808"",
        ""rules"": [
          {
            ""protocol"": ""udp"",
            ""ports"": ""8080"",
            ""destination"": ""198.41.191.47/1""
          }
        ],
        ""running_default"": false,
        ""staging_default"": false,
        ""spaces_url"": ""/v2/security_groups/6f70fa28-ac2a-459a-b38b-ba4cdf5add32/spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllSecurityGroupsForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("31a7ac2c-2858-4711-a5fb-c014bc6dcd3b", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/security_groups/6f70fa28-ac2a-459a-b38b-ba4cdf5add32", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:20Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1808", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].RunningDefault), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].StagingDefault), true);
                Assert.AreEqual("/v2/security_groups/6f70fa28-ac2a-459a-b38b-ba4cdf5add32/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSpacesTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""938f7381-e305-4792-8d9c-71dd51692407"",
        ""url"": ""/v2/spaces/66719512-1679-4dbf-9f97-5fd343b3b503"",
        ""created_at"": ""2016-05-05T14:15:18Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1729"",
        ""organization_guid"": ""938f7381-e305-4792-8d9c-71dd51692407"",
        ""space_quota_definition_guid"": null,
        ""allow_ssh"": true,
        ""organization_url"": ""/v2/organizations/9c4f9220-f917-4ba8-97f3-66e6ec4e11a1"",
        ""developers_url"": ""/v2/spaces/66719512-1679-4dbf-9f97-5fd343b3b503/developers"",
        ""managers_url"": ""/v2/spaces/66719512-1679-4dbf-9f97-5fd343b3b503/managers"",
        ""auditors_url"": ""/v2/spaces/66719512-1679-4dbf-9f97-5fd343b3b503/auditors"",
        ""apps_url"": ""/v2/spaces/66719512-1679-4dbf-9f97-5fd343b3b503/apps"",
        ""routes_url"": ""/v2/spaces/66719512-1679-4dbf-9f97-5fd343b3b503/routes"",
        ""domains_url"": ""/v2/spaces/66719512-1679-4dbf-9f97-5fd343b3b503/domains"",
        ""service_instances_url"": ""/v2/spaces/66719512-1679-4dbf-9f97-5fd343b3b503/service_instances"",
        ""app_events_url"": ""/v2/spaces/66719512-1679-4dbf-9f97-5fd343b3b503/app_events"",
        ""events_url"": ""/v2/spaces/66719512-1679-4dbf-9f97-5fd343b3b503/events"",
        ""security_groups_url"": ""/v2/spaces/66719512-1679-4dbf-9f97-5fd343b3b503/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Spaces.ListAllSpaces().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("938f7381-e305-4792-8d9c-71dd51692407", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/66719512-1679-4dbf-9f97-5fd343b3b503", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:18Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1729", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("938f7381-e305-4792-8d9c-71dd51692407", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].AllowSsh), true);
                Assert.AreEqual("/v2/organizations/9c4f9220-f917-4ba8-97f3-66e6ec4e11a1", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/66719512-1679-4dbf-9f97-5fd343b3b503/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/66719512-1679-4dbf-9f97-5fd343b3b503/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/66719512-1679-4dbf-9f97-5fd343b3b503/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/66719512-1679-4dbf-9f97-5fd343b3b503/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/66719512-1679-4dbf-9f97-5fd343b3b503/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/66719512-1679-4dbf-9f97-5fd343b3b503/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/66719512-1679-4dbf-9f97-5fd343b3b503/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/66719512-1679-4dbf-9f97-5fd343b3b503/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/66719512-1679-4dbf-9f97-5fd343b3b503/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/66719512-1679-4dbf-9f97-5fd343b3b503/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceInstancesForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""9df3ea6a-29ae-471c-8616-e43da140d057"",
        ""url"": ""/v2/service_instances/9c21d943-e883-44d9-95e1-fdfc74204304"",
        ""created_at"": ""2016-05-05T14:15:20Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1794"",
        ""credentials"": {
          ""creds-key-52"": ""creds-val-52""
        },
        ""service_plan_guid"": ""9df3ea6a-29ae-471c-8616-e43da140d057"",
        ""space_guid"": ""9df3ea6a-29ae-471c-8616-e43da140d057"",
        ""gateway_data"": null,
        ""dashboard_url"": null,
        ""type"": ""managed_service_instance"",
        ""last_operation"": null,
        ""tags"": [

        ],
        ""space_url"": ""/v2/spaces/92cb5391-b107-4180-a59e-0e17b186e9e5"",
        ""service_plan_url"": ""/v2/service_plans/fbc60fde-a511-4ce6-97e2-1c7c0aef4cbc"",
        ""service_bindings_url"": ""/v2/service_instances/9c21d943-e883-44d9-95e1-fdfc74204304/service_bindings"",
        ""service_keys_url"": ""/v2/service_instances/9c21d943-e883-44d9-95e1-fdfc74204304/service_keys"",
        ""routes_url"": ""/v2/service_instances/9c21d943-e883-44d9-95e1-fdfc74204304/routes""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllServiceInstancesForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("9df3ea6a-29ae-471c-8616-e43da140d057", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/9c21d943-e883-44d9-95e1-fdfc74204304", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:20Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1794", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("9df3ea6a-29ae-471c-8616-e43da140d057", TestUtil.ToTestableString(obj[0].ServicePlanGuid), true);
                Assert.AreEqual("9df3ea6a-29ae-471c-8616-e43da140d057", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj[0].Type), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].LastOperation), true);
                Assert.AreEqual("/v2/spaces/92cb5391-b107-4180-a59e-0e17b186e9e5", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/fbc60fde-a511-4ce6-97e2-1c7c0aef4cbc", TestUtil.ToTestableString(obj[0].ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/9c21d943-e883-44d9-95e1-fdfc74204304/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/9c21d943-e883-44d9-95e1-fdfc74204304/service_keys", TestUtil.ToTestableString(obj[0].ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/9c21d943-e883-44d9-95e1-fdfc74204304/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);

            }
        }

        [TestMethod]
        public void AssociateManagerWithSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""ae3b994d-83ed-48cc-b483-8b6bae626bf7"",
    ""url"": ""/v2/spaces/7a509096-0f28-4510-abb7-7295183b0fc1"",
    ""created_at"": ""2016-05-05T14:15:19Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1756"",
    ""organization_guid"": ""ae3b994d-83ed-48cc-b483-8b6bae626bf7"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/a0c4770f-6470-4b1c-8d3e-9ef5fbafc9d9"",
    ""developers_url"": ""/v2/spaces/7a509096-0f28-4510-abb7-7295183b0fc1/developers"",
    ""managers_url"": ""/v2/spaces/7a509096-0f28-4510-abb7-7295183b0fc1/managers"",
    ""auditors_url"": ""/v2/spaces/7a509096-0f28-4510-abb7-7295183b0fc1/auditors"",
    ""apps_url"": ""/v2/spaces/7a509096-0f28-4510-abb7-7295183b0fc1/apps"",
    ""routes_url"": ""/v2/spaces/7a509096-0f28-4510-abb7-7295183b0fc1/routes"",
    ""domains_url"": ""/v2/spaces/7a509096-0f28-4510-abb7-7295183b0fc1/domains"",
    ""service_instances_url"": ""/v2/spaces/7a509096-0f28-4510-abb7-7295183b0fc1/service_instances"",
    ""app_events_url"": ""/v2/spaces/7a509096-0f28-4510-abb7-7295183b0fc1/app_events"",
    ""events_url"": ""/v2/spaces/7a509096-0f28-4510-abb7-7295183b0fc1/events"",
    ""security_groups_url"": ""/v2/spaces/7a509096-0f28-4510-abb7-7295183b0fc1/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? manager_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.AssociateManagerWithSpace(guid, manager_guid).Result;


                Assert.AreEqual("ae3b994d-83ed-48cc-b483-8b6bae626bf7", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/7a509096-0f28-4510-abb7-7295183b0fc1", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:19Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1756", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("ae3b994d-83ed-48cc-b483-8b6bae626bf7", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/a0c4770f-6470-4b1c-8d3e-9ef5fbafc9d9", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/7a509096-0f28-4510-abb7-7295183b0fc1/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/7a509096-0f28-4510-abb7-7295183b0fc1/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/7a509096-0f28-4510-abb7-7295183b0fc1/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/7a509096-0f28-4510-abb7-7295183b0fc1/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/7a509096-0f28-4510-abb7-7295183b0fc1/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/7a509096-0f28-4510-abb7-7295183b0fc1/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/7a509096-0f28-4510-abb7-7295183b0fc1/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/7a509096-0f28-4510-abb7-7295183b0fc1/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/7a509096-0f28-4510-abb7-7295183b0fc1/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/7a509096-0f28-4510-abb7-7295183b0fc1/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllEventsForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""0c322780-a51e-4730-92c6-6e7eba0babcb"",
        ""url"": ""/v2/events/05af2128-d84d-4cbe-840c-1369d42f6a62"",
        ""created_at"": ""2016-05-05T14:15:18Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""type"": ""audit.space.update"",
        ""actor"": ""uaa-id-272"",
        ""actor_type"": ""user"",
        ""actor_name"": ""user@example.com"",
        ""actee"": ""5adca151-06a1-4b73-af52-77debbebd549"",
        ""actee_type"": ""space"",
        ""actee_name"": ""name-1732"",
        ""timestamp"": ""2016-05-05T14:15:18Z"",
        ""metadata"": {
          ""request"": {
            ""name"": ""new_name""
          }
        },
        ""space_guid"": ""0c322780-a51e-4730-92c6-6e7eba0babcb"",
        ""organization_guid"": ""0c322780-a51e-4730-92c6-6e7eba0babcb""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllEventsForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("0c322780-a51e-4730-92c6-6e7eba0babcb", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/events/05af2128-d84d-4cbe-840c-1369d42f6a62", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:18Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("audit.space.update", TestUtil.ToTestableString(obj[0].Type), true);
                Assert.AreEqual("uaa-id-272", TestUtil.ToTestableString(obj[0].Actor), true);
                Assert.AreEqual("user", TestUtil.ToTestableString(obj[0].ActorType), true);
                Assert.AreEqual("user@example.com", TestUtil.ToTestableString(obj[0].ActorName), true);
                Assert.AreEqual("5adca151-06a1-4b73-af52-77debbebd549", TestUtil.ToTestableString(obj[0].Actee), true);
                Assert.AreEqual("space", TestUtil.ToTestableString(obj[0].ActeeType), true);
                Assert.AreEqual("name-1732", TestUtil.ToTestableString(obj[0].ActeeName), true);
                Assert.AreEqual("2016-05-05T14:15:18Z", TestUtil.ToTestableString(obj[0].Timestamp), true);
                Assert.AreEqual("0c322780-a51e-4730-92c6-6e7eba0babcb", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("0c322780-a51e-4730-92c6-6e7eba0babcb", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);

            }
        }

        [TestMethod]
        public void ListAllManagersForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""5173adda-ee38-49ba-b5c7-8c447281e2a2"",
        ""url"": ""/v2/users/uaa-id-297"",
        ""created_at"": ""2016-05-05T14:15:19Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""manager@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-297/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-297/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-297/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-297/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-297/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-297/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-297/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllManagersForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("5173adda-ee38-49ba-b5c7-8c447281e2a2", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-297", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:19Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("manager@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-297/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-297/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-297/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-297/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-297/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-297/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-297/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void GetSpaceSummaryTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""guid"": ""92d6519c-4362-4922-8bc7-bae6d816a21c"",
  ""name"": ""name-2217"",
  ""apps"": [
    {
      ""guid"": ""92d6519c-4362-4922-8bc7-bae6d816a21c"",
      ""urls"": [
        ""host-36.domain-85.example.com""
      ],
      ""routes"": [
        {
          ""guid"": ""92d6519c-4362-4922-8bc7-bae6d816a21c"",
          ""host"": ""host-36"",
          ""port"": null,
          ""path"": """",
          ""domain"": {
            ""guid"": ""92d6519c-4362-4922-8bc7-bae6d816a21c"",
            ""name"": ""domain-85.example.com""
          }
        }
      ],
      ""service_count"": 1,
      ""service_names"": [
        ""name-2220""
      ],
      ""running_instances"": 0,
      ""name"": ""name-2223"",
      ""production"": false,
      ""space_guid"": ""92d6519c-4362-4922-8bc7-bae6d816a21c"",
      ""stack_guid"": ""92d6519c-4362-4922-8bc7-bae6d816a21c"",
      ""buildpack"": null,
      ""detected_buildpack"": null,
      ""environment_json"": null,
      ""memory"": 1024,
      ""instances"": 1,
      ""disk_quota"": 1024,
      ""state"": ""STOPPED"",
      ""version"": ""6f304bc2-c46c-4b56-8377-e8b1b070ecd6"",
      ""command"": null,
      ""console"": false,
      ""debug"": null,
      ""staging_task_id"": null,
      ""package_state"": ""PENDING"",
      ""health_check_type"": ""port"",
      ""health_check_timeout"": null,
      ""staging_failed_reason"": null,
      ""staging_failed_description"": null,
      ""diego"": false,
      ""docker_image"": null,
      ""package_updated_at"": ""2016-05-05T14:15:37Z"",
      ""detected_start_command"": """",
      ""enable_ssh"": true,
      ""docker_credentials_json"": {
        ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
      },
      ""ports"": null
    }
  ],
  ""services"": [
    {
      ""guid"": ""92d6519c-4362-4922-8bc7-bae6d816a21c"",
      ""name"": ""name-2220"",
      ""bound_app_count"": 1,
      ""last_operation"": {
        ""type"": ""create"",
        ""state"": ""succeeded"",
        ""description"": ""description goes here"",
        ""updated_at"": ""2016-05-05T14:15:37Z"",
        ""created_at"": ""2016-05-05T14:15:37Z""
      },
      ""dashboard_url"": null,
      ""service_plan"": {
        ""guid"": ""92d6519c-4362-4922-8bc7-bae6d816a21c"",
        ""name"": ""name-2221"",
        ""service"": {
          ""guid"": ""92d6519c-4362-4922-8bc7-bae6d816a21c"",
          ""label"": ""label-75"",
          ""provider"": null,
          ""version"": null
        }
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.GetSpaceSummary(guid).Result;


                Assert.AreEqual("92d6519c-4362-4922-8bc7-bae6d816a21c", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("name-2217", TestUtil.ToTestableString(obj.Name), true);

            }
        }

        [TestMethod]
        public void AssociateManagerWithSpaceByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""97a2e7d3-c2fb-441b-aa78-919d55b392c5"",
    ""url"": ""/v2/spaces/3d67a044-ef62-44cd-b333-22a911978ccb"",
    ""created_at"": ""2016-05-05T14:15:19Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1765"",
    ""organization_guid"": ""97a2e7d3-c2fb-441b-aa78-919d55b392c5"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/547c3311-be64-4c29-acd7-ac08170c2bca"",
    ""developers_url"": ""/v2/spaces/3d67a044-ef62-44cd-b333-22a911978ccb/developers"",
    ""managers_url"": ""/v2/spaces/3d67a044-ef62-44cd-b333-22a911978ccb/managers"",
    ""auditors_url"": ""/v2/spaces/3d67a044-ef62-44cd-b333-22a911978ccb/auditors"",
    ""apps_url"": ""/v2/spaces/3d67a044-ef62-44cd-b333-22a911978ccb/apps"",
    ""routes_url"": ""/v2/spaces/3d67a044-ef62-44cd-b333-22a911978ccb/routes"",
    ""domains_url"": ""/v2/spaces/3d67a044-ef62-44cd-b333-22a911978ccb/domains"",
    ""service_instances_url"": ""/v2/spaces/3d67a044-ef62-44cd-b333-22a911978ccb/service_instances"",
    ""app_events_url"": ""/v2/spaces/3d67a044-ef62-44cd-b333-22a911978ccb/app_events"",
    ""events_url"": ""/v2/spaces/3d67a044-ef62-44cd-b333-22a911978ccb/events"",
    ""security_groups_url"": ""/v2/spaces/3d67a044-ef62-44cd-b333-22a911978ccb/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                AssociateManagerWithSpaceByUsernameRequest value = new AssociateManagerWithSpaceByUsernameRequest();


                var obj = cfClient.Spaces.AssociateManagerWithSpaceByUsername(guid, value).Result;


                Assert.AreEqual("97a2e7d3-c2fb-441b-aa78-919d55b392c5", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/3d67a044-ef62-44cd-b333-22a911978ccb", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:19Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1765", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("97a2e7d3-c2fb-441b-aa78-919d55b392c5", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/547c3311-be64-4c29-acd7-ac08170c2bca", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/3d67a044-ef62-44cd-b333-22a911978ccb/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/3d67a044-ef62-44cd-b333-22a911978ccb/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/3d67a044-ef62-44cd-b333-22a911978ccb/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/3d67a044-ef62-44cd-b333-22a911978ccb/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/3d67a044-ef62-44cd-b333-22a911978ccb/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/3d67a044-ef62-44cd-b333-22a911978ccb/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/3d67a044-ef62-44cd-b333-22a911978ccb/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/3d67a044-ef62-44cd-b333-22a911978ccb/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/3d67a044-ef62-44cd-b333-22a911978ccb/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/3d67a044-ef62-44cd-b333-22a911978ccb/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveSecurityGroupFromSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? security_group_guid = Guid.NewGuid();


                cfClient.Spaces.RemoveSecurityGroupFromSpace(guid, security_group_guid).Wait();

            }
        }

        [TestMethod]
        public void AssociateDeveloperWithSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""84cb7622-2a32-4aba-9695-4ad984e32780"",
    ""url"": ""/v2/spaces/42581d3e-f48d-49c7-9538-77546c0f6f69"",
    ""created_at"": ""2016-05-05T14:15:18Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1738"",
    ""organization_guid"": ""84cb7622-2a32-4aba-9695-4ad984e32780"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/693626c3-626c-43fc-9349-1477f4b7b352"",
    ""developers_url"": ""/v2/spaces/42581d3e-f48d-49c7-9538-77546c0f6f69/developers"",
    ""managers_url"": ""/v2/spaces/42581d3e-f48d-49c7-9538-77546c0f6f69/managers"",
    ""auditors_url"": ""/v2/spaces/42581d3e-f48d-49c7-9538-77546c0f6f69/auditors"",
    ""apps_url"": ""/v2/spaces/42581d3e-f48d-49c7-9538-77546c0f6f69/apps"",
    ""routes_url"": ""/v2/spaces/42581d3e-f48d-49c7-9538-77546c0f6f69/routes"",
    ""domains_url"": ""/v2/spaces/42581d3e-f48d-49c7-9538-77546c0f6f69/domains"",
    ""service_instances_url"": ""/v2/spaces/42581d3e-f48d-49c7-9538-77546c0f6f69/service_instances"",
    ""app_events_url"": ""/v2/spaces/42581d3e-f48d-49c7-9538-77546c0f6f69/app_events"",
    ""events_url"": ""/v2/spaces/42581d3e-f48d-49c7-9538-77546c0f6f69/events"",
    ""security_groups_url"": ""/v2/spaces/42581d3e-f48d-49c7-9538-77546c0f6f69/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? developer_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.AssociateDeveloperWithSpace(guid, developer_guid).Result;


                Assert.AreEqual("84cb7622-2a32-4aba-9695-4ad984e32780", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/42581d3e-f48d-49c7-9538-77546c0f6f69", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:18Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1738", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("84cb7622-2a32-4aba-9695-4ad984e32780", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/693626c3-626c-43fc-9349-1477f4b7b352", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/42581d3e-f48d-49c7-9538-77546c0f6f69/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/42581d3e-f48d-49c7-9538-77546c0f6f69/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/42581d3e-f48d-49c7-9538-77546c0f6f69/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/42581d3e-f48d-49c7-9538-77546c0f6f69/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/42581d3e-f48d-49c7-9538-77546c0f6f69/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/42581d3e-f48d-49c7-9538-77546c0f6f69/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/42581d3e-f48d-49c7-9538-77546c0f6f69/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/42581d3e-f48d-49c7-9538-77546c0f6f69/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/42581d3e-f48d-49c7-9538-77546c0f6f69/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/42581d3e-f48d-49c7-9538-77546c0f6f69/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllRoutesForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""ead88d2a-d8ef-4493-a94c-10e34aab8705"",
        ""url"": ""/v2/routes/81c30dab-33e7-466d-a6bc-7089b02dd3fe"",
        ""created_at"": ""2016-05-05T14:15:19Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""host"": ""host-24"",
        ""path"": """",
        ""domain_guid"": ""ead88d2a-d8ef-4493-a94c-10e34aab8705"",
        ""space_guid"": ""ead88d2a-d8ef-4493-a94c-10e34aab8705"",
        ""service_instance_guid"": null,
        ""port"": null,
        ""domain_url"": ""/v2/domains/42d88fe3-7991-4f32-b840-33a78e00cfc6"",
        ""space_url"": ""/v2/spaces/93c7b8fc-440e-443b-bd7c-51caba4539ef"",
        ""apps_url"": ""/v2/routes/81c30dab-33e7-466d-a6bc-7089b02dd3fe/apps"",
        ""route_mappings_url"": ""/v2/routes/81c30dab-33e7-466d-a6bc-7089b02dd3fe/route_mappings""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllRoutesForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("ead88d2a-d8ef-4493-a94c-10e34aab8705", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/81c30dab-33e7-466d-a6bc-7089b02dd3fe", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:19Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-24", TestUtil.ToTestableString(obj[0].Host), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Path), true);
                Assert.AreEqual("ead88d2a-d8ef-4493-a94c-10e34aab8705", TestUtil.ToTestableString(obj[0].DomainGuid), true);
                Assert.AreEqual("ead88d2a-d8ef-4493-a94c-10e34aab8705", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].ServiceInstanceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Port), true);
                Assert.AreEqual("/v2/domains/42d88fe3-7991-4f32-b840-33a78e00cfc6", TestUtil.ToTestableString(obj[0].DomainUrl), true);
                Assert.AreEqual("/v2/spaces/93c7b8fc-440e-443b-bd7c-51caba4539ef", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/routes/81c30dab-33e7-466d-a6bc-7089b02dd3fe/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/routes/81c30dab-33e7-466d-a6bc-7089b02dd3fe/route_mappings", TestUtil.ToTestableString(obj[0].RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveManagerWithSpaceByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""7e42a3b0-a392-4c74-936c-f46977d5335e"",
    ""url"": ""/v2/spaces/234437cc-9b9f-4670-9662-516d32020276"",
    ""created_at"": ""2016-05-05T14:15:19Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1768"",
    ""organization_guid"": ""7e42a3b0-a392-4c74-936c-f46977d5335e"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/8b9bc3eb-80c0-4c10-a492-1ffe1b3f7b24"",
    ""developers_url"": ""/v2/spaces/234437cc-9b9f-4670-9662-516d32020276/developers"",
    ""managers_url"": ""/v2/spaces/234437cc-9b9f-4670-9662-516d32020276/managers"",
    ""auditors_url"": ""/v2/spaces/234437cc-9b9f-4670-9662-516d32020276/auditors"",
    ""apps_url"": ""/v2/spaces/234437cc-9b9f-4670-9662-516d32020276/apps"",
    ""routes_url"": ""/v2/spaces/234437cc-9b9f-4670-9662-516d32020276/routes"",
    ""domains_url"": ""/v2/spaces/234437cc-9b9f-4670-9662-516d32020276/domains"",
    ""service_instances_url"": ""/v2/spaces/234437cc-9b9f-4670-9662-516d32020276/service_instances"",
    ""app_events_url"": ""/v2/spaces/234437cc-9b9f-4670-9662-516d32020276/app_events"",
    ""events_url"": ""/v2/spaces/234437cc-9b9f-4670-9662-516d32020276/events"",
    ""security_groups_url"": ""/v2/spaces/234437cc-9b9f-4670-9662-516d32020276/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                RemoveManagerWithSpaceByUsernameRequest value = new RemoveManagerWithSpaceByUsernameRequest();


                var obj = cfClient.Spaces.RemoveManagerWithSpaceByUsername(guid, value).Result;


                Assert.AreEqual("7e42a3b0-a392-4c74-936c-f46977d5335e", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/234437cc-9b9f-4670-9662-516d32020276", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:19Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1768", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("7e42a3b0-a392-4c74-936c-f46977d5335e", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/8b9bc3eb-80c0-4c10-a492-1ffe1b3f7b24", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/234437cc-9b9f-4670-9662-516d32020276/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/234437cc-9b9f-4670-9662-516d32020276/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/234437cc-9b9f-4670-9662-516d32020276/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/234437cc-9b9f-4670-9662-516d32020276/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/234437cc-9b9f-4670-9662-516d32020276/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/234437cc-9b9f-4670-9662-516d32020276/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/234437cc-9b9f-4670-9662-516d32020276/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/234437cc-9b9f-4670-9662-516d32020276/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/234437cc-9b9f-4670-9662-516d32020276/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/234437cc-9b9f-4670-9662-516d32020276/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateDeveloperWithSpaceByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""efec42a1-677a-4f2b-a799-006b1c7db2d2"",
    ""url"": ""/v2/spaces/aeb68000-032e-4bd7-a4ca-70f21e86ad82"",
    ""created_at"": ""2016-05-05T14:15:18Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1744"",
    ""organization_guid"": ""efec42a1-677a-4f2b-a799-006b1c7db2d2"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/bd2db13a-6a16-4a90-b1a8-0189b7fda1bd"",
    ""developers_url"": ""/v2/spaces/aeb68000-032e-4bd7-a4ca-70f21e86ad82/developers"",
    ""managers_url"": ""/v2/spaces/aeb68000-032e-4bd7-a4ca-70f21e86ad82/managers"",
    ""auditors_url"": ""/v2/spaces/aeb68000-032e-4bd7-a4ca-70f21e86ad82/auditors"",
    ""apps_url"": ""/v2/spaces/aeb68000-032e-4bd7-a4ca-70f21e86ad82/apps"",
    ""routes_url"": ""/v2/spaces/aeb68000-032e-4bd7-a4ca-70f21e86ad82/routes"",
    ""domains_url"": ""/v2/spaces/aeb68000-032e-4bd7-a4ca-70f21e86ad82/domains"",
    ""service_instances_url"": ""/v2/spaces/aeb68000-032e-4bd7-a4ca-70f21e86ad82/service_instances"",
    ""app_events_url"": ""/v2/spaces/aeb68000-032e-4bd7-a4ca-70f21e86ad82/app_events"",
    ""events_url"": ""/v2/spaces/aeb68000-032e-4bd7-a4ca-70f21e86ad82/events"",
    ""security_groups_url"": ""/v2/spaces/aeb68000-032e-4bd7-a4ca-70f21e86ad82/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                AssociateDeveloperWithSpaceByUsernameRequest value = new AssociateDeveloperWithSpaceByUsernameRequest();


                var obj = cfClient.Spaces.AssociateDeveloperWithSpaceByUsername(guid, value).Result;


                Assert.AreEqual("efec42a1-677a-4f2b-a799-006b1c7db2d2", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/aeb68000-032e-4bd7-a4ca-70f21e86ad82", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:18Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1744", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("efec42a1-677a-4f2b-a799-006b1c7db2d2", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/bd2db13a-6a16-4a90-b1a8-0189b7fda1bd", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/aeb68000-032e-4bd7-a4ca-70f21e86ad82/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/aeb68000-032e-4bd7-a4ca-70f21e86ad82/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/aeb68000-032e-4bd7-a4ca-70f21e86ad82/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/aeb68000-032e-4bd7-a4ca-70f21e86ad82/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/aeb68000-032e-4bd7-a4ca-70f21e86ad82/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/aeb68000-032e-4bd7-a4ca-70f21e86ad82/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/aeb68000-032e-4bd7-a4ca-70f21e86ad82/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/aeb68000-032e-4bd7-a4ca-70f21e86ad82/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/aeb68000-032e-4bd7-a4ca-70f21e86ad82/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/aeb68000-032e-4bd7-a4ca-70f21e86ad82/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveAuditorFromSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? auditor_guid = Guid.NewGuid();


                cfClient.Spaces.RemoveAuditorFromSpace(guid, auditor_guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllServicesForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""50704a13-dfff-474f-bf25-b08c51417d66"",
        ""url"": ""/v2/services/b3d71ec5-e659-4c2b-b73b-71a8eac24d49"",
        ""created_at"": ""2016-05-05T14:15:19Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-42"",
        ""provider"": null,
        ""url"": null,
        ""description"": ""desc-113"",
        ""long_description"": null,
        ""version"": null,
        ""info_url"": null,
        ""active"": 1,
        ""bindable"": 1,
        ""unique_id"": ""496175b2-a4ff-4922-8725-3040613afcd7"",
        ""extra"": null,
        ""tags"": [

        ],
        ""requires"": [

        ],
        ""documentation_url"": null,
        ""service_broker_guid"": ""50704a13-dfff-474f-bf25-b08c51417d66"",
        ""plan_updateable"": 0,
        ""service_plans_url"": ""/v2/services/b3d71ec5-e659-4c2b-b73b-71a8eac24d49/service_plans""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllServicesForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("50704a13-dfff-474f-bf25-b08c51417d66", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/services/b3d71ec5-e659-4c2b-b73b-71a8eac24d49", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:19Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-42", TestUtil.ToTestableString(obj[0].Label), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Provider), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Url), true);
                Assert.AreEqual("desc-113", TestUtil.ToTestableString(obj[0].Description), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].LongDescription), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].InfoUrl), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[0].Bindable), true);
                Assert.AreEqual("496175b2-a4ff-4922-8725-3040613afcd7", TestUtil.ToTestableString(obj[0].UniqueId), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Extra), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DocumentationUrl), true);
                Assert.AreEqual("50704a13-dfff-474f-bf25-b08c51417d66", TestUtil.ToTestableString(obj[0].ServiceBrokerGuid), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj[0].PlanUpdateable), true);
                Assert.AreEqual("/v2/services/b3d71ec5-e659-4c2b-b73b-71a8eac24d49/service_plans", TestUtil.ToTestableString(obj[0].ServicePlansUrl), true);

            }
        }

        [TestMethod]
        public void CreateSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""86b2da11-c0fc-4292-8875-a349267f64b2"",
    ""url"": ""/v2/spaces/029bdc82-e545-4e43-a7e7-91e36fa59943"",
    ""created_at"": ""2016-05-05T14:15:18Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""development"",
    ""organization_guid"": ""86b2da11-c0fc-4292-8875-a349267f64b2"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/88c3a62d-b828-461a-8146-59d3e75c9152"",
    ""developers_url"": ""/v2/spaces/029bdc82-e545-4e43-a7e7-91e36fa59943/developers"",
    ""managers_url"": ""/v2/spaces/029bdc82-e545-4e43-a7e7-91e36fa59943/managers"",
    ""auditors_url"": ""/v2/spaces/029bdc82-e545-4e43-a7e7-91e36fa59943/auditors"",
    ""apps_url"": ""/v2/spaces/029bdc82-e545-4e43-a7e7-91e36fa59943/apps"",
    ""routes_url"": ""/v2/spaces/029bdc82-e545-4e43-a7e7-91e36fa59943/routes"",
    ""domains_url"": ""/v2/spaces/029bdc82-e545-4e43-a7e7-91e36fa59943/domains"",
    ""service_instances_url"": ""/v2/spaces/029bdc82-e545-4e43-a7e7-91e36fa59943/service_instances"",
    ""app_events_url"": ""/v2/spaces/029bdc82-e545-4e43-a7e7-91e36fa59943/app_events"",
    ""events_url"": ""/v2/spaces/029bdc82-e545-4e43-a7e7-91e36fa59943/events"",
    ""security_groups_url"": ""/v2/spaces/029bdc82-e545-4e43-a7e7-91e36fa59943/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateSpaceRequest value = new CreateSpaceRequest();


                var obj = cfClient.Spaces.CreateSpace(value).Result;


                Assert.AreEqual("86b2da11-c0fc-4292-8875-a349267f64b2", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/029bdc82-e545-4e43-a7e7-91e36fa59943", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:18Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("development", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("86b2da11-c0fc-4292-8875-a349267f64b2", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/88c3a62d-b828-461a-8146-59d3e75c9152", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/029bdc82-e545-4e43-a7e7-91e36fa59943/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/029bdc82-e545-4e43-a7e7-91e36fa59943/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/029bdc82-e545-4e43-a7e7-91e36fa59943/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/029bdc82-e545-4e43-a7e7-91e36fa59943/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/029bdc82-e545-4e43-a7e7-91e36fa59943/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/029bdc82-e545-4e43-a7e7-91e36fa59943/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/029bdc82-e545-4e43-a7e7-91e36fa59943/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/029bdc82-e545-4e43-a7e7-91e36fa59943/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/029bdc82-e545-4e43-a7e7-91e36fa59943/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/029bdc82-e545-4e43-a7e7-91e36fa59943/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""85462047-8e67-473a-b9f7-4a08842240a5"",
    ""url"": ""/v2/spaces/b1293934-9b97-4b0d-befb-af72eecd6bb2"",
    ""created_at"": ""2016-05-05T14:15:18Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1718"",
    ""organization_guid"": ""85462047-8e67-473a-b9f7-4a08842240a5"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/9cdf1493-f0f1-48d6-bc0c-e99eee524a27"",
    ""developers_url"": ""/v2/spaces/b1293934-9b97-4b0d-befb-af72eecd6bb2/developers"",
    ""managers_url"": ""/v2/spaces/b1293934-9b97-4b0d-befb-af72eecd6bb2/managers"",
    ""auditors_url"": ""/v2/spaces/b1293934-9b97-4b0d-befb-af72eecd6bb2/auditors"",
    ""apps_url"": ""/v2/spaces/b1293934-9b97-4b0d-befb-af72eecd6bb2/apps"",
    ""routes_url"": ""/v2/spaces/b1293934-9b97-4b0d-befb-af72eecd6bb2/routes"",
    ""domains_url"": ""/v2/spaces/b1293934-9b97-4b0d-befb-af72eecd6bb2/domains"",
    ""service_instances_url"": ""/v2/spaces/b1293934-9b97-4b0d-befb-af72eecd6bb2/service_instances"",
    ""app_events_url"": ""/v2/spaces/b1293934-9b97-4b0d-befb-af72eecd6bb2/app_events"",
    ""events_url"": ""/v2/spaces/b1293934-9b97-4b0d-befb-af72eecd6bb2/events"",
    ""security_groups_url"": ""/v2/spaces/b1293934-9b97-4b0d-befb-af72eecd6bb2/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.RetrieveSpace(guid).Result;


                Assert.AreEqual("85462047-8e67-473a-b9f7-4a08842240a5", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/b1293934-9b97-4b0d-befb-af72eecd6bb2", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:18Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1718", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("85462047-8e67-473a-b9f7-4a08842240a5", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/9cdf1493-f0f1-48d6-bc0c-e99eee524a27", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/b1293934-9b97-4b0d-befb-af72eecd6bb2/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/b1293934-9b97-4b0d-befb-af72eecd6bb2/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/b1293934-9b97-4b0d-befb-af72eecd6bb2/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/b1293934-9b97-4b0d-befb-af72eecd6bb2/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/b1293934-9b97-4b0d-befb-af72eecd6bb2/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/b1293934-9b97-4b0d-befb-af72eecd6bb2/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/b1293934-9b97-4b0d-befb-af72eecd6bb2/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/b1293934-9b97-4b0d-befb-af72eecd6bb2/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/b1293934-9b97-4b0d-befb-af72eecd6bb2/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/b1293934-9b97-4b0d-befb-af72eecd6bb2/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void UpdateSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""276c38be-bcc5-40b8-9ea2-1f585dc31763"",
    ""url"": ""/v2/spaces/bcb3fe5f-8518-4073-8191-b89ab80f0ce0"",
    ""created_at"": ""2016-05-05T14:15:18Z"",
    ""updated_at"": ""2016-05-05T14:15:18Z""
  },
  ""entity"": {
    ""name"": ""New Space Name"",
    ""organization_guid"": ""276c38be-bcc5-40b8-9ea2-1f585dc31763"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/0cb853b4-e3ae-422f-9d2a-fd89cf6676d0"",
    ""developers_url"": ""/v2/spaces/bcb3fe5f-8518-4073-8191-b89ab80f0ce0/developers"",
    ""managers_url"": ""/v2/spaces/bcb3fe5f-8518-4073-8191-b89ab80f0ce0/managers"",
    ""auditors_url"": ""/v2/spaces/bcb3fe5f-8518-4073-8191-b89ab80f0ce0/auditors"",
    ""apps_url"": ""/v2/spaces/bcb3fe5f-8518-4073-8191-b89ab80f0ce0/apps"",
    ""routes_url"": ""/v2/spaces/bcb3fe5f-8518-4073-8191-b89ab80f0ce0/routes"",
    ""domains_url"": ""/v2/spaces/bcb3fe5f-8518-4073-8191-b89ab80f0ce0/domains"",
    ""service_instances_url"": ""/v2/spaces/bcb3fe5f-8518-4073-8191-b89ab80f0ce0/service_instances"",
    ""app_events_url"": ""/v2/spaces/bcb3fe5f-8518-4073-8191-b89ab80f0ce0/app_events"",
    ""events_url"": ""/v2/spaces/bcb3fe5f-8518-4073-8191-b89ab80f0ce0/events"",
    ""security_groups_url"": ""/v2/spaces/bcb3fe5f-8518-4073-8191-b89ab80f0ce0/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateSpaceRequest value = new UpdateSpaceRequest();


                var obj = cfClient.Spaces.UpdateSpace(guid, value).Result;


                Assert.AreEqual("276c38be-bcc5-40b8-9ea2-1f585dc31763", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/bcb3fe5f-8518-4073-8191-b89ab80f0ce0", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:18Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-05-05T14:15:18Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("New Space Name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("276c38be-bcc5-40b8-9ea2-1f585dc31763", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/0cb853b4-e3ae-422f-9d2a-fd89cf6676d0", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/bcb3fe5f-8518-4073-8191-b89ab80f0ce0/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/bcb3fe5f-8518-4073-8191-b89ab80f0ce0/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/bcb3fe5f-8518-4073-8191-b89ab80f0ce0/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/bcb3fe5f-8518-4073-8191-b89ab80f0ce0/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/bcb3fe5f-8518-4073-8191-b89ab80f0ce0/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/bcb3fe5f-8518-4073-8191-b89ab80f0ce0/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/bcb3fe5f-8518-4073-8191-b89ab80f0ce0/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/bcb3fe5f-8518-4073-8191-b89ab80f0ce0/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/bcb3fe5f-8518-4073-8191-b89ab80f0ce0/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/bcb3fe5f-8518-4073-8191-b89ab80f0ce0/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void RetrievingRolesOfAllUsersInSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""46131f6d-eafe-4210-9223-5ba7b89f3e76"",
        ""url"": ""/v2/users/uaa-id-324"",
        ""created_at"": ""2016-05-05T14:15:20Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": 0,
        ""active"": 0,
        ""default_space_guid"": null,
        ""username"": ""everything@example.com"",
        ""space_roles"": [
          ""space_developer"",
          ""space_manager"",
          ""space_auditor""
        ],
        ""spaces_url"": ""/v2/users/uaa-id-324/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-324/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-324/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-324/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-324/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-324/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-324/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.RetrievingRolesOfAllUsersInSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("46131f6d-eafe-4210-9223-5ba7b89f3e76", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-324", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:20Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("everything@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-324/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-324/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-324/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-324/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-324/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-324/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-324/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void AssociateAuditorWithSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""0aad2e82-86a9-4cc9-a8f3-477d7e556180"",
    ""url"": ""/v2/spaces/448811a8-39a2-484a-bcc0-03793f3534f7"",
    ""created_at"": ""2016-05-05T14:15:20Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1785"",
    ""organization_guid"": ""0aad2e82-86a9-4cc9-a8f3-477d7e556180"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/1cbdf599-074f-415a-8625-2b126ddf7aba"",
    ""developers_url"": ""/v2/spaces/448811a8-39a2-484a-bcc0-03793f3534f7/developers"",
    ""managers_url"": ""/v2/spaces/448811a8-39a2-484a-bcc0-03793f3534f7/managers"",
    ""auditors_url"": ""/v2/spaces/448811a8-39a2-484a-bcc0-03793f3534f7/auditors"",
    ""apps_url"": ""/v2/spaces/448811a8-39a2-484a-bcc0-03793f3534f7/apps"",
    ""routes_url"": ""/v2/spaces/448811a8-39a2-484a-bcc0-03793f3534f7/routes"",
    ""domains_url"": ""/v2/spaces/448811a8-39a2-484a-bcc0-03793f3534f7/domains"",
    ""service_instances_url"": ""/v2/spaces/448811a8-39a2-484a-bcc0-03793f3534f7/service_instances"",
    ""app_events_url"": ""/v2/spaces/448811a8-39a2-484a-bcc0-03793f3534f7/app_events"",
    ""events_url"": ""/v2/spaces/448811a8-39a2-484a-bcc0-03793f3534f7/events"",
    ""security_groups_url"": ""/v2/spaces/448811a8-39a2-484a-bcc0-03793f3534f7/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? auditor_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.AssociateAuditorWithSpace(guid, auditor_guid).Result;


                Assert.AreEqual("0aad2e82-86a9-4cc9-a8f3-477d7e556180", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/448811a8-39a2-484a-bcc0-03793f3534f7", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:20Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1785", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("0aad2e82-86a9-4cc9-a8f3-477d7e556180", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/1cbdf599-074f-415a-8625-2b126ddf7aba", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/448811a8-39a2-484a-bcc0-03793f3534f7/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/448811a8-39a2-484a-bcc0-03793f3534f7/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/448811a8-39a2-484a-bcc0-03793f3534f7/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/448811a8-39a2-484a-bcc0-03793f3534f7/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/448811a8-39a2-484a-bcc0-03793f3534f7/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/448811a8-39a2-484a-bcc0-03793f3534f7/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/448811a8-39a2-484a-bcc0-03793f3534f7/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/448811a8-39a2-484a-bcc0-03793f3534f7/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/448811a8-39a2-484a-bcc0-03793f3534f7/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/448811a8-39a2-484a-bcc0-03793f3534f7/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveDeveloperFromSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? developer_guid = Guid.NewGuid();


                cfClient.Spaces.RemoveDeveloperFromSpace(guid, developer_guid).Wait();

            }
        }

        [TestMethod]
        public void AssociateAuditorWithSpaceByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""54c335e3-c25e-43e6-b54e-c2f2bddc8755"",
    ""url"": ""/v2/spaces/4b6af33d-7d36-4696-91b7-cbae4dc280f1"",
    ""created_at"": ""2016-05-05T14:15:20Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1779"",
    ""organization_guid"": ""54c335e3-c25e-43e6-b54e-c2f2bddc8755"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/617ee397-d814-498a-a977-8534dde9e2c2"",
    ""developers_url"": ""/v2/spaces/4b6af33d-7d36-4696-91b7-cbae4dc280f1/developers"",
    ""managers_url"": ""/v2/spaces/4b6af33d-7d36-4696-91b7-cbae4dc280f1/managers"",
    ""auditors_url"": ""/v2/spaces/4b6af33d-7d36-4696-91b7-cbae4dc280f1/auditors"",
    ""apps_url"": ""/v2/spaces/4b6af33d-7d36-4696-91b7-cbae4dc280f1/apps"",
    ""routes_url"": ""/v2/spaces/4b6af33d-7d36-4696-91b7-cbae4dc280f1/routes"",
    ""domains_url"": ""/v2/spaces/4b6af33d-7d36-4696-91b7-cbae4dc280f1/domains"",
    ""service_instances_url"": ""/v2/spaces/4b6af33d-7d36-4696-91b7-cbae4dc280f1/service_instances"",
    ""app_events_url"": ""/v2/spaces/4b6af33d-7d36-4696-91b7-cbae4dc280f1/app_events"",
    ""events_url"": ""/v2/spaces/4b6af33d-7d36-4696-91b7-cbae4dc280f1/events"",
    ""security_groups_url"": ""/v2/spaces/4b6af33d-7d36-4696-91b7-cbae4dc280f1/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                AssociateAuditorWithSpaceByUsernameRequest value = new AssociateAuditorWithSpaceByUsernameRequest();


                var obj = cfClient.Spaces.AssociateAuditorWithSpaceByUsername(guid, value).Result;


                Assert.AreEqual("54c335e3-c25e-43e6-b54e-c2f2bddc8755", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/4b6af33d-7d36-4696-91b7-cbae4dc280f1", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:20Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1779", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("54c335e3-c25e-43e6-b54e-c2f2bddc8755", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/617ee397-d814-498a-a977-8534dde9e2c2", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/4b6af33d-7d36-4696-91b7-cbae4dc280f1/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/4b6af33d-7d36-4696-91b7-cbae4dc280f1/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/4b6af33d-7d36-4696-91b7-cbae4dc280f1/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/4b6af33d-7d36-4696-91b7-cbae4dc280f1/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/4b6af33d-7d36-4696-91b7-cbae4dc280f1/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/4b6af33d-7d36-4696-91b7-cbae4dc280f1/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/4b6af33d-7d36-4696-91b7-cbae4dc280f1/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/4b6af33d-7d36-4696-91b7-cbae4dc280f1/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/4b6af33d-7d36-4696-91b7-cbae4dc280f1/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/4b6af33d-7d36-4696-91b7-cbae4dc280f1/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllAppsForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""810db8e6-de0f-4e01-a05a-394ee8a3afea"",
        ""url"": ""/v2/apps/04ebc01e-c19d-48a4-a9ff-cc3b3cc667c9"",
        ""created_at"": ""2016-05-05T14:15:20Z"",
        ""updated_at"": ""2016-05-05T14:15:20Z""
      },
      ""entity"": {
        ""name"": ""name-1800"",
        ""production"": false,
        ""space_guid"": ""810db8e6-de0f-4e01-a05a-394ee8a3afea"",
        ""stack_guid"": ""810db8e6-de0f-4e01-a05a-394ee8a3afea"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""6c1e2c25-1b93-4fd3-a40a-71356eb5ee3b"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""staging_failed_description"": null,
        ""diego"": false,
        ""docker_image"": null,
        ""package_updated_at"": ""2016-05-05T14:15:20Z"",
        ""detected_start_command"": """",
        ""enable_ssh"": true,
        ""docker_credentials_json"": {
          ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
        },
        ""ports"": null,
        ""space_url"": ""/v2/spaces/01724723-0674-46a2-883b-a18929b1fdb7"",
        ""stack_url"": ""/v2/stacks/92d71758-c4de-4901-8af6-af9f45765bbc"",
        ""routes_url"": ""/v2/apps/04ebc01e-c19d-48a4-a9ff-cc3b3cc667c9/routes"",
        ""events_url"": ""/v2/apps/04ebc01e-c19d-48a4-a9ff-cc3b3cc667c9/events"",
        ""service_bindings_url"": ""/v2/apps/04ebc01e-c19d-48a4-a9ff-cc3b3cc667c9/service_bindings"",
        ""route_mappings_url"": ""/v2/apps/04ebc01e-c19d-48a4-a9ff-cc3b3cc667c9/route_mappings""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllAppsForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("810db8e6-de0f-4e01-a05a-394ee8a3afea", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/04ebc01e-c19d-48a4-a9ff-cc3b3cc667c9", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:20Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-05-05T14:15:20Z", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1800", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Production), true);
                Assert.AreEqual("810db8e6-de0f-4e01-a05a-394ee8a3afea", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("810db8e6-de0f-4e01-a05a-394ee8a3afea", TestUtil.ToTestableString(obj[0].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[0].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[0].State), true);
                Assert.AreEqual("6c1e2c25-1b93-4fd3-a40a-71356eb5ee3b", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[0].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[0].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DockerImage), true);
                Assert.AreEqual("2016-05-05T14:15:20Z", TestUtil.ToTestableString(obj[0].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Ports), true);
                Assert.AreEqual("/v2/spaces/01724723-0674-46a2-883b-a18929b1fdb7", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/92d71758-c4de-4901-8af6-af9f45765bbc", TestUtil.ToTestableString(obj[0].StackUrl), true);
                Assert.AreEqual("/v2/apps/04ebc01e-c19d-48a4-a9ff-cc3b3cc667c9/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/apps/04ebc01e-c19d-48a4-a9ff-cc3b3cc667c9/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/apps/04ebc01e-c19d-48a4-a9ff-cc3b3cc667c9/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/04ebc01e-c19d-48a4-a9ff-cc3b3cc667c9/route_mappings", TestUtil.ToTestableString(obj[0].RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllAuditorsForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""b1a1ff8f-7545-4afe-810c-b02004ec06d2"",
        ""url"": ""/v2/users/uaa-id-313"",
        ""created_at"": ""2016-05-05T14:15:20Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""auditor@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-313/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-313/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-313/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-313/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-313/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-313/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-313/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllAuditorsForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("b1a1ff8f-7545-4afe-810c-b02004ec06d2", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-313", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:20Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("auditor@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-313/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-313/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-313/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-313/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-313/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-313/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-313/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveManagerFromSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? manager_guid = Guid.NewGuid();


                cfClient.Spaces.RemoveManagerFromSpace(guid, manager_guid).Wait();

            }
        }

        [TestMethod]
        public void RemoveDeveloperWithSpaceByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""3645405d-d40f-429d-a09f-c893e75069aa"",
    ""url"": ""/v2/spaces/4fc96cb8-6527-4607-a0ad-520edb844f16"",
    ""created_at"": ""2016-05-05T14:15:19Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1747"",
    ""organization_guid"": ""3645405d-d40f-429d-a09f-c893e75069aa"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/491ccc31-68ee-417e-a18f-93c08c5fdbbc"",
    ""developers_url"": ""/v2/spaces/4fc96cb8-6527-4607-a0ad-520edb844f16/developers"",
    ""managers_url"": ""/v2/spaces/4fc96cb8-6527-4607-a0ad-520edb844f16/managers"",
    ""auditors_url"": ""/v2/spaces/4fc96cb8-6527-4607-a0ad-520edb844f16/auditors"",
    ""apps_url"": ""/v2/spaces/4fc96cb8-6527-4607-a0ad-520edb844f16/apps"",
    ""routes_url"": ""/v2/spaces/4fc96cb8-6527-4607-a0ad-520edb844f16/routes"",
    ""domains_url"": ""/v2/spaces/4fc96cb8-6527-4607-a0ad-520edb844f16/domains"",
    ""service_instances_url"": ""/v2/spaces/4fc96cb8-6527-4607-a0ad-520edb844f16/service_instances"",
    ""app_events_url"": ""/v2/spaces/4fc96cb8-6527-4607-a0ad-520edb844f16/app_events"",
    ""events_url"": ""/v2/spaces/4fc96cb8-6527-4607-a0ad-520edb844f16/events"",
    ""security_groups_url"": ""/v2/spaces/4fc96cb8-6527-4607-a0ad-520edb844f16/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                RemoveDeveloperWithSpaceByUsernameRequest value = new RemoveDeveloperWithSpaceByUsernameRequest();


                var obj = cfClient.Spaces.RemoveDeveloperWithSpaceByUsername(guid, value).Result;


                Assert.AreEqual("3645405d-d40f-429d-a09f-c893e75069aa", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/4fc96cb8-6527-4607-a0ad-520edb844f16", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-05T14:15:19Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1747", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("3645405d-d40f-429d-a09f-c893e75069aa", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/491ccc31-68ee-417e-a18f-93c08c5fdbbc", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/4fc96cb8-6527-4607-a0ad-520edb844f16/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/4fc96cb8-6527-4607-a0ad-520edb844f16/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/4fc96cb8-6527-4607-a0ad-520edb844f16/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/4fc96cb8-6527-4607-a0ad-520edb844f16/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/4fc96cb8-6527-4607-a0ad-520edb844f16/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/4fc96cb8-6527-4607-a0ad-520edb844f16/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/4fc96cb8-6527-4607-a0ad-520edb844f16/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/4fc96cb8-6527-4607-a0ad-520edb844f16/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/4fc96cb8-6527-4607-a0ad-520edb844f16/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/4fc96cb8-6527-4607-a0ad-520edb844f16/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

    }
}