//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class SpacesEndpoint
{
        [TestMethod]
        public void GetSpaceSummaryTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""guid"": ""2cdcbe80-fbad-442b-983a-8f3a1c9b6835"",
  ""name"": ""name-1811"",
  ""apps"": [
    {
      ""guid"": ""b8b54a02-a0dd-4eb0-b887-e837457cc94f"",
      ""urls"": [
        ""host-10.domain-49.example.com""
      ],
      ""routes"": [
        {
          ""guid"": ""0e84033c-0b28-4cf8-b89a-be5cfdaf204f"",
          ""host"": ""host-10"",
          ""domain"": {
            ""guid"": ""25107e5a-a29f-4aac-abe8-0f64dbe64024"",
            ""name"": ""domain-49.example.com""
          }
        }
      ],
      ""service_count"": 1,
      ""service_names"": [
        ""name-1816""
      ],
      ""running_instances"": 0,
      ""name"": ""name-1814"",
      ""production"": false,
      ""space_guid"": ""2cdcbe80-fbad-442b-983a-8f3a1c9b6835"",
      ""stack_guid"": ""55aae3e7-ab70-4ec9-aeb5-5c0d2545e20b"",
      ""buildpack"": null,
      ""detected_buildpack"": null,
      ""environment_json"": null,
      ""memory"": 1024,
      ""instances"": 1,
      ""disk_quota"": 1024,
      ""state"": ""STOPPED"",
      ""version"": ""7046db71-5952-401f-af16-0dea3c3dc06b"",
      ""command"": null,
      ""console"": false,
      ""debug"": null,
      ""staging_task_id"": null,
      ""package_state"": ""PENDING"",
      ""health_check_type"": ""port"",
      ""health_check_timeout"": null,
      ""staging_failed_reason"": null,
      ""diego"": false,
      ""docker_image"": null,
      ""package_updated_at"": ""2015-07-29T12:47:26Z"",
      ""detected_start_command"": """",
      ""enable_ssh"": true
    }
  ],
  ""services"": [
    {
      ""guid"": ""1e59c8d6-b043-4ef2-ae07-669ac938c7e1"",
      ""name"": ""name-1816"",
      ""bound_app_count"": 1,
      ""last_operation"": null,
      ""dashboard_url"": null,
      ""service_plan"": {
        ""guid"": ""54557388-6fb5-4948-8d1e-f90e1041e811"",
        ""name"": ""name-1817"",
        ""service"": {
          ""guid"": ""9106c897-1e4a-4347-8e25-ed06f2c10b1a"",
          ""label"": ""label-61"",
          ""provider"": null,
          ""version"": null
        }
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.GetSpaceSummary(guid).Result;


                Assert.AreEqual("2cdcbe80-fbad-442b-983a-8f3a1c9b6835", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("name-1811", TestUtil.ToTestableString(obj.Name), true);

            }
        }

        [TestMethod]
        public void AssociateAuditorWithSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""8cbadb47-ec38-4094-908b-9145eba90b0d"",
    ""url"": ""/v2/spaces/8cbadb47-ec38-4094-908b-9145eba90b0d"",
    ""created_at"": ""2015-07-29T12:47:25Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1709"",
    ""organization_guid"": ""abea75c3-5929-4ddf-a0e3-4bb1be2788da"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/abea75c3-5929-4ddf-a0e3-4bb1be2788da"",
    ""developers_url"": ""/v2/spaces/8cbadb47-ec38-4094-908b-9145eba90b0d/developers"",
    ""managers_url"": ""/v2/spaces/8cbadb47-ec38-4094-908b-9145eba90b0d/managers"",
    ""auditors_url"": ""/v2/spaces/8cbadb47-ec38-4094-908b-9145eba90b0d/auditors"",
    ""apps_url"": ""/v2/spaces/8cbadb47-ec38-4094-908b-9145eba90b0d/apps"",
    ""routes_url"": ""/v2/spaces/8cbadb47-ec38-4094-908b-9145eba90b0d/routes"",
    ""domains_url"": ""/v2/spaces/8cbadb47-ec38-4094-908b-9145eba90b0d/domains"",
    ""service_instances_url"": ""/v2/spaces/8cbadb47-ec38-4094-908b-9145eba90b0d/service_instances"",
    ""app_events_url"": ""/v2/spaces/8cbadb47-ec38-4094-908b-9145eba90b0d/app_events"",
    ""events_url"": ""/v2/spaces/8cbadb47-ec38-4094-908b-9145eba90b0d/events"",
    ""security_groups_url"": ""/v2/spaces/8cbadb47-ec38-4094-908b-9145eba90b0d/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? auditor_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.AssociateAuditorWithSpace(guid, auditor_guid).Result;


                Assert.AreEqual("8cbadb47-ec38-4094-908b-9145eba90b0d", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/8cbadb47-ec38-4094-908b-9145eba90b0d", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:25Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1709", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("abea75c3-5929-4ddf-a0e3-4bb1be2788da", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/abea75c3-5929-4ddf-a0e3-4bb1be2788da", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/8cbadb47-ec38-4094-908b-9145eba90b0d/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/8cbadb47-ec38-4094-908b-9145eba90b0d/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/8cbadb47-ec38-4094-908b-9145eba90b0d/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/8cbadb47-ec38-4094-908b-9145eba90b0d/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/8cbadb47-ec38-4094-908b-9145eba90b0d/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/8cbadb47-ec38-4094-908b-9145eba90b0d/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/8cbadb47-ec38-4094-908b-9145eba90b0d/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/8cbadb47-ec38-4094-908b-9145eba90b0d/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/8cbadb47-ec38-4094-908b-9145eba90b0d/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/8cbadb47-ec38-4094-908b-9145eba90b0d/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllDevelopersForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-264"",
        ""url"": ""/v2/users/uaa-id-264"",
        ""created_at"": ""2015-07-29T12:47:24Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""developer@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-264/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-264/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-264/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-264/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-264/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-264/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-264/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllDevelopersForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-264", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-264", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:24Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("developer@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-264/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-264/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-264/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-264/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-264/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-264/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-264/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void RetrievingRolesOfAllUsersInSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-255"",
        ""url"": ""/v2/users/uaa-id-255"",
        ""created_at"": ""2015-07-29T12:47:24Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": 0,
        ""active"": 0,
        ""default_space_guid"": null,
        ""username"": ""everything@example.com"",
        ""space_roles"": [
          ""space_developer"",
          ""space_manager"",
          ""space_auditor""
        ],
        ""spaces_url"": ""/v2/users/uaa-id-255/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-255/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-255/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-255/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-255/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-255/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-255/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.RetrievingRolesOfAllUsersInSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-255", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-255", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:24Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("everything@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-255/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-255/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-255/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-255/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-255/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-255/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-255/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveSecurityGroupFromSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""9695dca2-e66c-4ce2-b89e-12a197a8a3e9"",
    ""url"": ""/v2/spaces/9695dca2-e66c-4ce2-b89e-12a197a8a3e9"",
    ""created_at"": ""2015-07-29T12:47:24Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1653"",
    ""organization_guid"": ""db851026-b0e9-4680-a396-22b0e072e711"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/db851026-b0e9-4680-a396-22b0e072e711"",
    ""developers_url"": ""/v2/spaces/9695dca2-e66c-4ce2-b89e-12a197a8a3e9/developers"",
    ""managers_url"": ""/v2/spaces/9695dca2-e66c-4ce2-b89e-12a197a8a3e9/managers"",
    ""auditors_url"": ""/v2/spaces/9695dca2-e66c-4ce2-b89e-12a197a8a3e9/auditors"",
    ""apps_url"": ""/v2/spaces/9695dca2-e66c-4ce2-b89e-12a197a8a3e9/apps"",
    ""routes_url"": ""/v2/spaces/9695dca2-e66c-4ce2-b89e-12a197a8a3e9/routes"",
    ""domains_url"": ""/v2/spaces/9695dca2-e66c-4ce2-b89e-12a197a8a3e9/domains"",
    ""service_instances_url"": ""/v2/spaces/9695dca2-e66c-4ce2-b89e-12a197a8a3e9/service_instances"",
    ""app_events_url"": ""/v2/spaces/9695dca2-e66c-4ce2-b89e-12a197a8a3e9/app_events"",
    ""events_url"": ""/v2/spaces/9695dca2-e66c-4ce2-b89e-12a197a8a3e9/events"",
    ""security_groups_url"": ""/v2/spaces/9695dca2-e66c-4ce2-b89e-12a197a8a3e9/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? security_group_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.RemoveSecurityGroupFromSpace(guid, security_group_guid).Result;


                Assert.AreEqual("9695dca2-e66c-4ce2-b89e-12a197a8a3e9", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/9695dca2-e66c-4ce2-b89e-12a197a8a3e9", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:24Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1653", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("db851026-b0e9-4680-a396-22b0e072e711", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/db851026-b0e9-4680-a396-22b0e072e711", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/9695dca2-e66c-4ce2-b89e-12a197a8a3e9/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/9695dca2-e66c-4ce2-b89e-12a197a8a3e9/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/9695dca2-e66c-4ce2-b89e-12a197a8a3e9/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/9695dca2-e66c-4ce2-b89e-12a197a8a3e9/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/9695dca2-e66c-4ce2-b89e-12a197a8a3e9/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/9695dca2-e66c-4ce2-b89e-12a197a8a3e9/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/9695dca2-e66c-4ce2-b89e-12a197a8a3e9/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/9695dca2-e66c-4ce2-b89e-12a197a8a3e9/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/9695dca2-e66c-4ce2-b89e-12a197a8a3e9/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/9695dca2-e66c-4ce2-b89e-12a197a8a3e9/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void CreateSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""c792f93c-f1c1-4a5b-a0a5-359aa447d903"",
    ""url"": ""/v2/spaces/c792f93c-f1c1-4a5b-a0a5-359aa447d903"",
    ""created_at"": ""2015-07-29T12:47:25Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""development"",
    ""organization_guid"": ""889d190b-d57e-45c5-9702-4410df1aa197"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/889d190b-d57e-45c5-9702-4410df1aa197"",
    ""developers_url"": ""/v2/spaces/c792f93c-f1c1-4a5b-a0a5-359aa447d903/developers"",
    ""managers_url"": ""/v2/spaces/c792f93c-f1c1-4a5b-a0a5-359aa447d903/managers"",
    ""auditors_url"": ""/v2/spaces/c792f93c-f1c1-4a5b-a0a5-359aa447d903/auditors"",
    ""apps_url"": ""/v2/spaces/c792f93c-f1c1-4a5b-a0a5-359aa447d903/apps"",
    ""routes_url"": ""/v2/spaces/c792f93c-f1c1-4a5b-a0a5-359aa447d903/routes"",
    ""domains_url"": ""/v2/spaces/c792f93c-f1c1-4a5b-a0a5-359aa447d903/domains"",
    ""service_instances_url"": ""/v2/spaces/c792f93c-f1c1-4a5b-a0a5-359aa447d903/service_instances"",
    ""app_events_url"": ""/v2/spaces/c792f93c-f1c1-4a5b-a0a5-359aa447d903/app_events"",
    ""events_url"": ""/v2/spaces/c792f93c-f1c1-4a5b-a0a5-359aa447d903/events"",
    ""security_groups_url"": ""/v2/spaces/c792f93c-f1c1-4a5b-a0a5-359aa447d903/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateSpaceRequest value = new CreateSpaceRequest();


                var obj = cfClient.Spaces.CreateSpace(value).Result;


                Assert.AreEqual("c792f93c-f1c1-4a5b-a0a5-359aa447d903", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/c792f93c-f1c1-4a5b-a0a5-359aa447d903", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:25Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("development", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("889d190b-d57e-45c5-9702-4410df1aa197", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/889d190b-d57e-45c5-9702-4410df1aa197", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/c792f93c-f1c1-4a5b-a0a5-359aa447d903/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/c792f93c-f1c1-4a5b-a0a5-359aa447d903/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/c792f93c-f1c1-4a5b-a0a5-359aa447d903/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/c792f93c-f1c1-4a5b-a0a5-359aa447d903/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/c792f93c-f1c1-4a5b-a0a5-359aa447d903/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/c792f93c-f1c1-4a5b-a0a5-359aa447d903/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/c792f93c-f1c1-4a5b-a0a5-359aa447d903/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/c792f93c-f1c1-4a5b-a0a5-359aa447d903/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/c792f93c-f1c1-4a5b-a0a5-359aa447d903/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/c792f93c-f1c1-4a5b-a0a5-359aa447d903/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveDeveloperFromSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""d2fa7c84-94c1-4643-97bc-62f4a2b5dffd"",
    ""url"": ""/v2/spaces/d2fa7c84-94c1-4643-97bc-62f4a2b5dffd"",
    ""created_at"": ""2015-07-29T12:47:24Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1680"",
    ""organization_guid"": ""9d60380d-c0d0-4264-b422-8c161df5812b"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/9d60380d-c0d0-4264-b422-8c161df5812b"",
    ""developers_url"": ""/v2/spaces/d2fa7c84-94c1-4643-97bc-62f4a2b5dffd/developers"",
    ""managers_url"": ""/v2/spaces/d2fa7c84-94c1-4643-97bc-62f4a2b5dffd/managers"",
    ""auditors_url"": ""/v2/spaces/d2fa7c84-94c1-4643-97bc-62f4a2b5dffd/auditors"",
    ""apps_url"": ""/v2/spaces/d2fa7c84-94c1-4643-97bc-62f4a2b5dffd/apps"",
    ""routes_url"": ""/v2/spaces/d2fa7c84-94c1-4643-97bc-62f4a2b5dffd/routes"",
    ""domains_url"": ""/v2/spaces/d2fa7c84-94c1-4643-97bc-62f4a2b5dffd/domains"",
    ""service_instances_url"": ""/v2/spaces/d2fa7c84-94c1-4643-97bc-62f4a2b5dffd/service_instances"",
    ""app_events_url"": ""/v2/spaces/d2fa7c84-94c1-4643-97bc-62f4a2b5dffd/app_events"",
    ""events_url"": ""/v2/spaces/d2fa7c84-94c1-4643-97bc-62f4a2b5dffd/events"",
    ""security_groups_url"": ""/v2/spaces/d2fa7c84-94c1-4643-97bc-62f4a2b5dffd/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? developer_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.RemoveDeveloperFromSpace(guid, developer_guid).Result;


                Assert.AreEqual("d2fa7c84-94c1-4643-97bc-62f4a2b5dffd", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/d2fa7c84-94c1-4643-97bc-62f4a2b5dffd", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:24Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1680", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("9d60380d-c0d0-4264-b422-8c161df5812b", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/9d60380d-c0d0-4264-b422-8c161df5812b", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/d2fa7c84-94c1-4643-97bc-62f4a2b5dffd/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/d2fa7c84-94c1-4643-97bc-62f4a2b5dffd/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/d2fa7c84-94c1-4643-97bc-62f4a2b5dffd/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/d2fa7c84-94c1-4643-97bc-62f4a2b5dffd/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/d2fa7c84-94c1-4643-97bc-62f4a2b5dffd/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/d2fa7c84-94c1-4643-97bc-62f4a2b5dffd/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/d2fa7c84-94c1-4643-97bc-62f4a2b5dffd/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/d2fa7c84-94c1-4643-97bc-62f4a2b5dffd/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/d2fa7c84-94c1-4643-97bc-62f4a2b5dffd/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/d2fa7c84-94c1-4643-97bc-62f4a2b5dffd/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllManagersForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-273"",
        ""url"": ""/v2/users/uaa-id-273"",
        ""created_at"": ""2015-07-29T12:47:25Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""manager@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-273/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-273/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-273/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-273/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-273/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-273/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-273/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllManagersForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-273", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-273", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:25Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("manager@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-273/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-273/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-273/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-273/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-273/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-273/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-273/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceInstancesForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""ea3d4e47-8a39-454e-b8bf-2652db3e94b7"",
        ""url"": ""/v2/service_instances/ea3d4e47-8a39-454e-b8bf-2652db3e94b7"",
        ""created_at"": ""2015-07-29T12:47:24Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1669"",
        ""credentials"": {
          ""creds-key-429"": ""creds-val-429""
        },
        ""service_plan_guid"": ""97e086f0-4fa6-43e1-95c6-1c88c2915a1d"",
        ""space_guid"": ""e3d1ada0-1acd-49df-92b7-dbc69edec08f"",
        ""gateway_data"": null,
        ""dashboard_url"": null,
        ""type"": ""managed_service_instance"",
        ""last_operation"": null,
        ""space_url"": ""/v2/spaces/e3d1ada0-1acd-49df-92b7-dbc69edec08f"",
        ""service_plan_url"": ""/v2/service_plans/97e086f0-4fa6-43e1-95c6-1c88c2915a1d"",
        ""service_bindings_url"": ""/v2/service_instances/ea3d4e47-8a39-454e-b8bf-2652db3e94b7/service_bindings"",
        ""service_keys_url"": ""/v2/service_instances/ea3d4e47-8a39-454e-b8bf-2652db3e94b7/service_keys""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllServiceInstancesForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("ea3d4e47-8a39-454e-b8bf-2652db3e94b7", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/ea3d4e47-8a39-454e-b8bf-2652db3e94b7", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:24Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1669", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("97e086f0-4fa6-43e1-95c6-1c88c2915a1d", TestUtil.ToTestableString(obj[0].ServicePlanGuid), true);
                Assert.AreEqual("e3d1ada0-1acd-49df-92b7-dbc69edec08f", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj[0].Type), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].LastOperation), true);
                Assert.AreEqual("/v2/spaces/e3d1ada0-1acd-49df-92b7-dbc69edec08f", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/97e086f0-4fa6-43e1-95c6-1c88c2915a1d", TestUtil.ToTestableString(obj[0].ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/ea3d4e47-8a39-454e-b8bf-2652db3e94b7/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/ea3d4e47-8a39-454e-b8bf-2652db3e94b7/service_keys", TestUtil.ToTestableString(obj[0].ServiceKeysUrl), true);

            }
        }

        [TestMethod]
        public void RemoveAuditorFromSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""572ee9ff-67ef-4f1c-91f1-346be3653f39"",
    ""url"": ""/v2/spaces/572ee9ff-67ef-4f1c-91f1-346be3653f39"",
    ""created_at"": ""2015-07-29T12:47:25Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1706"",
    ""organization_guid"": ""2e0d83a3-8c1a-4f22-9b76-f4e2a68f88c8"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/2e0d83a3-8c1a-4f22-9b76-f4e2a68f88c8"",
    ""developers_url"": ""/v2/spaces/572ee9ff-67ef-4f1c-91f1-346be3653f39/developers"",
    ""managers_url"": ""/v2/spaces/572ee9ff-67ef-4f1c-91f1-346be3653f39/managers"",
    ""auditors_url"": ""/v2/spaces/572ee9ff-67ef-4f1c-91f1-346be3653f39/auditors"",
    ""apps_url"": ""/v2/spaces/572ee9ff-67ef-4f1c-91f1-346be3653f39/apps"",
    ""routes_url"": ""/v2/spaces/572ee9ff-67ef-4f1c-91f1-346be3653f39/routes"",
    ""domains_url"": ""/v2/spaces/572ee9ff-67ef-4f1c-91f1-346be3653f39/domains"",
    ""service_instances_url"": ""/v2/spaces/572ee9ff-67ef-4f1c-91f1-346be3653f39/service_instances"",
    ""app_events_url"": ""/v2/spaces/572ee9ff-67ef-4f1c-91f1-346be3653f39/app_events"",
    ""events_url"": ""/v2/spaces/572ee9ff-67ef-4f1c-91f1-346be3653f39/events"",
    ""security_groups_url"": ""/v2/spaces/572ee9ff-67ef-4f1c-91f1-346be3653f39/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? auditor_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.RemoveAuditorFromSpace(guid, auditor_guid).Result;


                Assert.AreEqual("572ee9ff-67ef-4f1c-91f1-346be3653f39", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/572ee9ff-67ef-4f1c-91f1-346be3653f39", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:25Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1706", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("2e0d83a3-8c1a-4f22-9b76-f4e2a68f88c8", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/2e0d83a3-8c1a-4f22-9b76-f4e2a68f88c8", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/572ee9ff-67ef-4f1c-91f1-346be3653f39/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/572ee9ff-67ef-4f1c-91f1-346be3653f39/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/572ee9ff-67ef-4f1c-91f1-346be3653f39/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/572ee9ff-67ef-4f1c-91f1-346be3653f39/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/572ee9ff-67ef-4f1c-91f1-346be3653f39/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/572ee9ff-67ef-4f1c-91f1-346be3653f39/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/572ee9ff-67ef-4f1c-91f1-346be3653f39/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/572ee9ff-67ef-4f1c-91f1-346be3653f39/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/572ee9ff-67ef-4f1c-91f1-346be3653f39/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/572ee9ff-67ef-4f1c-91f1-346be3653f39/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllAppsForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""4ee8d1ca-37fd-4986-a18d-0f48462c17e7"",
        ""url"": ""/v2/apps/4ee8d1ca-37fd-4986-a18d-0f48462c17e7"",
        ""created_at"": ""2015-07-29T12:47:25Z"",
        ""updated_at"": ""2015-07-29T12:47:25Z""
      },
      ""entity"": {
        ""name"": ""name-1704"",
        ""production"": false,
        ""space_guid"": ""07c49526-784f-4959-8769-b70c0dd1882e"",
        ""stack_guid"": ""b555cfa0-fa71-49de-98e9-2a9a3074bed6"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""901a8a2f-1db1-4795-a42e-b8fdd46ba570"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""diego"": false,
        ""docker_image"": null,
        ""package_updated_at"": ""2015-07-29T12:47:25Z"",
        ""detected_start_command"": """",
        ""enable_ssh"": true,
        ""space_url"": ""/v2/spaces/07c49526-784f-4959-8769-b70c0dd1882e"",
        ""stack_url"": ""/v2/stacks/b555cfa0-fa71-49de-98e9-2a9a3074bed6"",
        ""events_url"": ""/v2/apps/4ee8d1ca-37fd-4986-a18d-0f48462c17e7/events"",
        ""service_bindings_url"": ""/v2/apps/4ee8d1ca-37fd-4986-a18d-0f48462c17e7/service_bindings"",
        ""routes_url"": ""/v2/apps/4ee8d1ca-37fd-4986-a18d-0f48462c17e7/routes""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllAppsForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("4ee8d1ca-37fd-4986-a18d-0f48462c17e7", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/4ee8d1ca-37fd-4986-a18d-0f48462c17e7", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:25Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-07-29T12:47:25Z", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1704", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Production), true);
                Assert.AreEqual("07c49526-784f-4959-8769-b70c0dd1882e", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("b555cfa0-fa71-49de-98e9-2a9a3074bed6", TestUtil.ToTestableString(obj[0].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[0].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[0].State), true);
                Assert.AreEqual("901a8a2f-1db1-4795-a42e-b8fdd46ba570", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[0].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[0].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingFailedReason), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DockerImage), true);
                Assert.AreEqual("2015-07-29T12:47:25Z", TestUtil.ToTestableString(obj[0].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].EnableSsh), true);
                Assert.AreEqual("/v2/spaces/07c49526-784f-4959-8769-b70c0dd1882e", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/b555cfa0-fa71-49de-98e9-2a9a3074bed6", TestUtil.ToTestableString(obj[0].StackUrl), true);
                Assert.AreEqual("/v2/apps/4ee8d1ca-37fd-4986-a18d-0f48462c17e7/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/apps/4ee8d1ca-37fd-4986-a18d-0f48462c17e7/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/4ee8d1ca-37fd-4986-a18d-0f48462c17e7/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""68f8c826-f7a4-4526-882e-ed24fef0943f"",
    ""url"": ""/v2/spaces/68f8c826-f7a4-4526-882e-ed24fef0943f"",
    ""created_at"": ""2015-07-29T12:47:25Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1729"",
    ""organization_guid"": ""139033ce-fda5-450c-b52f-13b8ff5e50ed"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/139033ce-fda5-450c-b52f-13b8ff5e50ed"",
    ""developers_url"": ""/v2/spaces/68f8c826-f7a4-4526-882e-ed24fef0943f/developers"",
    ""managers_url"": ""/v2/spaces/68f8c826-f7a4-4526-882e-ed24fef0943f/managers"",
    ""auditors_url"": ""/v2/spaces/68f8c826-f7a4-4526-882e-ed24fef0943f/auditors"",
    ""apps_url"": ""/v2/spaces/68f8c826-f7a4-4526-882e-ed24fef0943f/apps"",
    ""routes_url"": ""/v2/spaces/68f8c826-f7a4-4526-882e-ed24fef0943f/routes"",
    ""domains_url"": ""/v2/spaces/68f8c826-f7a4-4526-882e-ed24fef0943f/domains"",
    ""service_instances_url"": ""/v2/spaces/68f8c826-f7a4-4526-882e-ed24fef0943f/service_instances"",
    ""app_events_url"": ""/v2/spaces/68f8c826-f7a4-4526-882e-ed24fef0943f/app_events"",
    ""events_url"": ""/v2/spaces/68f8c826-f7a4-4526-882e-ed24fef0943f/events"",
    ""security_groups_url"": ""/v2/spaces/68f8c826-f7a4-4526-882e-ed24fef0943f/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.RetrieveSpace(guid).Result;


                Assert.AreEqual("68f8c826-f7a4-4526-882e-ed24fef0943f", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/68f8c826-f7a4-4526-882e-ed24fef0943f", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:25Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1729", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("139033ce-fda5-450c-b52f-13b8ff5e50ed", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/139033ce-fda5-450c-b52f-13b8ff5e50ed", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/68f8c826-f7a4-4526-882e-ed24fef0943f/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/68f8c826-f7a4-4526-882e-ed24fef0943f/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/68f8c826-f7a4-4526-882e-ed24fef0943f/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/68f8c826-f7a4-4526-882e-ed24fef0943f/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/68f8c826-f7a4-4526-882e-ed24fef0943f/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/68f8c826-f7a4-4526-882e-ed24fef0943f/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/68f8c826-f7a4-4526-882e-ed24fef0943f/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/68f8c826-f7a4-4526-882e-ed24fef0943f/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/68f8c826-f7a4-4526-882e-ed24fef0943f/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/68f8c826-f7a4-4526-882e-ed24fef0943f/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllEventsForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""2c7cc277-af37-4194-a252-fd7af122c280"",
        ""url"": ""/v2/events/2c7cc277-af37-4194-a252-fd7af122c280"",
        ""created_at"": ""2015-07-29T12:47:25Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""type"": ""audit.space.update"",
        ""actor"": ""uaa-id-287"",
        ""actor_type"": ""user"",
        ""actor_name"": ""user@example.com"",
        ""actee"": ""58e0f7aa-7370-415e-a071-8bf81dbbc2a6"",
        ""actee_type"": ""space"",
        ""actee_name"": ""name-1715"",
        ""timestamp"": ""2015-07-29T12:47:25Z"",
        ""metadata"": {
          ""request"": {
            ""name"": ""new_name""
          }
        },
        ""space_guid"": ""58e0f7aa-7370-415e-a071-8bf81dbbc2a6"",
        ""organization_guid"": ""0f131952-a3af-43b7-a2f3-f115cab55d82""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllEventsForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("2c7cc277-af37-4194-a252-fd7af122c280", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/events/2c7cc277-af37-4194-a252-fd7af122c280", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:25Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("audit.space.update", TestUtil.ToTestableString(obj[0].Type), true);
                Assert.AreEqual("uaa-id-287", TestUtil.ToTestableString(obj[0].Actor), true);
                Assert.AreEqual("user", TestUtil.ToTestableString(obj[0].ActorType), true);
                Assert.AreEqual("user@example.com", TestUtil.ToTestableString(obj[0].ActorName), true);
                Assert.AreEqual("58e0f7aa-7370-415e-a071-8bf81dbbc2a6", TestUtil.ToTestableString(obj[0].Actee), true);
                Assert.AreEqual("space", TestUtil.ToTestableString(obj[0].ActeeType), true);
                Assert.AreEqual("name-1715", TestUtil.ToTestableString(obj[0].ActeeName), true);
                Assert.AreEqual("2015-07-29T12:47:25Z", TestUtil.ToTestableString(obj[0].Timestamp), true);
                Assert.AreEqual("58e0f7aa-7370-415e-a071-8bf81dbbc2a6", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("0f131952-a3af-43b7-a2f3-f115cab55d82", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);

            }
        }

        [TestMethod]
        public void AssociateSecurityGroupWithSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""84372b50-3670-408b-8692-c31322db1c97"",
    ""url"": ""/v2/spaces/84372b50-3670-408b-8692-c31322db1c97"",
    ""created_at"": ""2015-07-29T12:47:24Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1657"",
    ""organization_guid"": ""1fab8c28-5e8c-4b34-9ae1-fdbb9b67ee48"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/1fab8c28-5e8c-4b34-9ae1-fdbb9b67ee48"",
    ""developers_url"": ""/v2/spaces/84372b50-3670-408b-8692-c31322db1c97/developers"",
    ""managers_url"": ""/v2/spaces/84372b50-3670-408b-8692-c31322db1c97/managers"",
    ""auditors_url"": ""/v2/spaces/84372b50-3670-408b-8692-c31322db1c97/auditors"",
    ""apps_url"": ""/v2/spaces/84372b50-3670-408b-8692-c31322db1c97/apps"",
    ""routes_url"": ""/v2/spaces/84372b50-3670-408b-8692-c31322db1c97/routes"",
    ""domains_url"": ""/v2/spaces/84372b50-3670-408b-8692-c31322db1c97/domains"",
    ""service_instances_url"": ""/v2/spaces/84372b50-3670-408b-8692-c31322db1c97/service_instances"",
    ""app_events_url"": ""/v2/spaces/84372b50-3670-408b-8692-c31322db1c97/app_events"",
    ""events_url"": ""/v2/spaces/84372b50-3670-408b-8692-c31322db1c97/events"",
    ""security_groups_url"": ""/v2/spaces/84372b50-3670-408b-8692-c31322db1c97/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? security_group_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.AssociateSecurityGroupWithSpace(guid, security_group_guid).Result;


                Assert.AreEqual("84372b50-3670-408b-8692-c31322db1c97", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/84372b50-3670-408b-8692-c31322db1c97", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:24Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1657", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("1fab8c28-5e8c-4b34-9ae1-fdbb9b67ee48", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/1fab8c28-5e8c-4b34-9ae1-fdbb9b67ee48", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/84372b50-3670-408b-8692-c31322db1c97/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/84372b50-3670-408b-8692-c31322db1c97/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/84372b50-3670-408b-8692-c31322db1c97/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/84372b50-3670-408b-8692-c31322db1c97/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/84372b50-3670-408b-8692-c31322db1c97/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/84372b50-3670-408b-8692-c31322db1c97/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/84372b50-3670-408b-8692-c31322db1c97/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/84372b50-3670-408b-8692-c31322db1c97/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/84372b50-3670-408b-8692-c31322db1c97/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/84372b50-3670-408b-8692-c31322db1c97/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveManagerFromSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""19e0f866-7f3c-42a2-a049-4c9fb2a64a9b"",
    ""url"": ""/v2/spaces/19e0f866-7f3c-42a2-a049-4c9fb2a64a9b"",
    ""created_at"": ""2015-07-29T12:47:24Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1689"",
    ""organization_guid"": ""355291fd-cabc-432e-b524-f7b48e2ea67e"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/355291fd-cabc-432e-b524-f7b48e2ea67e"",
    ""developers_url"": ""/v2/spaces/19e0f866-7f3c-42a2-a049-4c9fb2a64a9b/developers"",
    ""managers_url"": ""/v2/spaces/19e0f866-7f3c-42a2-a049-4c9fb2a64a9b/managers"",
    ""auditors_url"": ""/v2/spaces/19e0f866-7f3c-42a2-a049-4c9fb2a64a9b/auditors"",
    ""apps_url"": ""/v2/spaces/19e0f866-7f3c-42a2-a049-4c9fb2a64a9b/apps"",
    ""routes_url"": ""/v2/spaces/19e0f866-7f3c-42a2-a049-4c9fb2a64a9b/routes"",
    ""domains_url"": ""/v2/spaces/19e0f866-7f3c-42a2-a049-4c9fb2a64a9b/domains"",
    ""service_instances_url"": ""/v2/spaces/19e0f866-7f3c-42a2-a049-4c9fb2a64a9b/service_instances"",
    ""app_events_url"": ""/v2/spaces/19e0f866-7f3c-42a2-a049-4c9fb2a64a9b/app_events"",
    ""events_url"": ""/v2/spaces/19e0f866-7f3c-42a2-a049-4c9fb2a64a9b/events"",
    ""security_groups_url"": ""/v2/spaces/19e0f866-7f3c-42a2-a049-4c9fb2a64a9b/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? manager_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.RemoveManagerFromSpace(guid, manager_guid).Result;


                Assert.AreEqual("19e0f866-7f3c-42a2-a049-4c9fb2a64a9b", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/19e0f866-7f3c-42a2-a049-4c9fb2a64a9b", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:24Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1689", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("355291fd-cabc-432e-b524-f7b48e2ea67e", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/355291fd-cabc-432e-b524-f7b48e2ea67e", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/19e0f866-7f3c-42a2-a049-4c9fb2a64a9b/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/19e0f866-7f3c-42a2-a049-4c9fb2a64a9b/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/19e0f866-7f3c-42a2-a049-4c9fb2a64a9b/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/19e0f866-7f3c-42a2-a049-4c9fb2a64a9b/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/19e0f866-7f3c-42a2-a049-4c9fb2a64a9b/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/19e0f866-7f3c-42a2-a049-4c9fb2a64a9b/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/19e0f866-7f3c-42a2-a049-4c9fb2a64a9b/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/19e0f866-7f3c-42a2-a049-4c9fb2a64a9b/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/19e0f866-7f3c-42a2-a049-4c9fb2a64a9b/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/19e0f866-7f3c-42a2-a049-4c9fb2a64a9b/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServicesForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""b3b95574-2a26-4a41-a758-293d53e38b46"",
        ""url"": ""/v2/services/b3b95574-2a26-4a41-a758-293d53e38b46"",
        ""created_at"": ""2015-07-29T12:47:24Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-54"",
        ""provider"": null,
        ""url"": null,
        ""description"": ""desc-125"",
        ""long_description"": null,
        ""version"": null,
        ""info_url"": null,
        ""active"": true,
        ""bindable"": true,
        ""unique_id"": ""9e5b8d7c-d7ab-45e3-87c2-2343bb2abb0b"",
        ""extra"": null,
        ""tags"": [

        ],
        ""requires"": [

        ],
        ""documentation_url"": null,
        ""service_broker_guid"": ""c0729587-9111-43d4-bc27-f8c1ee62461f"",
        ""plan_updateable"": false,
        ""service_plans_url"": ""/v2/services/b3b95574-2a26-4a41-a758-293d53e38b46/service_plans""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllServicesForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("b3b95574-2a26-4a41-a758-293d53e38b46", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/services/b3b95574-2a26-4a41-a758-293d53e38b46", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:24Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-54", TestUtil.ToTestableString(obj[0].Label), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Provider), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Url), true);
                Assert.AreEqual("desc-125", TestUtil.ToTestableString(obj[0].Description), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].LongDescription), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].InfoUrl), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Bindable), true);
                Assert.AreEqual("9e5b8d7c-d7ab-45e3-87c2-2343bb2abb0b", TestUtil.ToTestableString(obj[0].UniqueId), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Extra), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DocumentationUrl), true);
                Assert.AreEqual("c0729587-9111-43d4-bc27-f8c1ee62461f", TestUtil.ToTestableString(obj[0].ServiceBrokerGuid), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].PlanUpdateable), true);
                Assert.AreEqual("/v2/services/b3b95574-2a26-4a41-a758-293d53e38b46/service_plans", TestUtil.ToTestableString(obj[0].ServicePlansUrl), true);

            }
        }

        [TestMethod]
        public void AssociateDeveloperWithSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""3e495b7d-a4ba-4af9-9bd7-e429ad1efd1c"",
    ""url"": ""/v2/spaces/3e495b7d-a4ba-4af9-9bd7-e429ad1efd1c"",
    ""created_at"": ""2015-07-29T12:47:24Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1683"",
    ""organization_guid"": ""d0b0b2d2-b27d-4ecd-9773-978bec1458cc"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/d0b0b2d2-b27d-4ecd-9773-978bec1458cc"",
    ""developers_url"": ""/v2/spaces/3e495b7d-a4ba-4af9-9bd7-e429ad1efd1c/developers"",
    ""managers_url"": ""/v2/spaces/3e495b7d-a4ba-4af9-9bd7-e429ad1efd1c/managers"",
    ""auditors_url"": ""/v2/spaces/3e495b7d-a4ba-4af9-9bd7-e429ad1efd1c/auditors"",
    ""apps_url"": ""/v2/spaces/3e495b7d-a4ba-4af9-9bd7-e429ad1efd1c/apps"",
    ""routes_url"": ""/v2/spaces/3e495b7d-a4ba-4af9-9bd7-e429ad1efd1c/routes"",
    ""domains_url"": ""/v2/spaces/3e495b7d-a4ba-4af9-9bd7-e429ad1efd1c/domains"",
    ""service_instances_url"": ""/v2/spaces/3e495b7d-a4ba-4af9-9bd7-e429ad1efd1c/service_instances"",
    ""app_events_url"": ""/v2/spaces/3e495b7d-a4ba-4af9-9bd7-e429ad1efd1c/app_events"",
    ""events_url"": ""/v2/spaces/3e495b7d-a4ba-4af9-9bd7-e429ad1efd1c/events"",
    ""security_groups_url"": ""/v2/spaces/3e495b7d-a4ba-4af9-9bd7-e429ad1efd1c/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? developer_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.AssociateDeveloperWithSpace(guid, developer_guid).Result;


                Assert.AreEqual("3e495b7d-a4ba-4af9-9bd7-e429ad1efd1c", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/3e495b7d-a4ba-4af9-9bd7-e429ad1efd1c", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:24Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1683", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("d0b0b2d2-b27d-4ecd-9773-978bec1458cc", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/d0b0b2d2-b27d-4ecd-9773-978bec1458cc", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/3e495b7d-a4ba-4af9-9bd7-e429ad1efd1c/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/3e495b7d-a4ba-4af9-9bd7-e429ad1efd1c/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/3e495b7d-a4ba-4af9-9bd7-e429ad1efd1c/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/3e495b7d-a4ba-4af9-9bd7-e429ad1efd1c/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/3e495b7d-a4ba-4af9-9bd7-e429ad1efd1c/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/3e495b7d-a4ba-4af9-9bd7-e429ad1efd1c/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/3e495b7d-a4ba-4af9-9bd7-e429ad1efd1c/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/3e495b7d-a4ba-4af9-9bd7-e429ad1efd1c/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/3e495b7d-a4ba-4af9-9bd7-e429ad1efd1c/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/3e495b7d-a4ba-4af9-9bd7-e429ad1efd1c/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSecurityGroupsForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""b59043cf-d6d9-48e6-9d0a-6d577327629a"",
        ""url"": ""/v2/security_groups/b59043cf-d6d9-48e6-9d0a-6d577327629a"",
        ""created_at"": ""2015-07-29T12:47:24Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1665"",
        ""rules"": [
          {
            ""protocol"": ""udp"",
            ""ports"": ""8080"",
            ""destination"": ""198.41.191.47/1""
          }
        ],
        ""running_default"": false,
        ""staging_default"": false,
        ""spaces_url"": ""/v2/security_groups/b59043cf-d6d9-48e6-9d0a-6d577327629a/spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllSecurityGroupsForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("b59043cf-d6d9-48e6-9d0a-6d577327629a", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/security_groups/b59043cf-d6d9-48e6-9d0a-6d577327629a", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:24Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1665", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].RunningDefault), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].StagingDefault), true);
                Assert.AreEqual("/v2/security_groups/b59043cf-d6d9-48e6-9d0a-6d577327629a/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllDomainsForSpaceDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 2,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""dbd00bcd-054e-4fb9-aa40-954b39c9fb10"",
        ""url"": ""/v2/domains/dbd00bcd-054e-4fb9-aa40-954b39c9fb10"",
        ""created_at"": ""2015-07-29T12:47:17Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain1.com""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""c3e64ca8-e7c1-4602-b527-3fbb4ed985f1"",
        ""url"": ""/v2/domains/c3e64ca8-e7c1-4602-b527-3fbb4ed985f1"",
        ""created_at"": ""2015-07-29T12:47:17Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain2.com""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllDomainsForSpaceDeprecated(guid).Result;

                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("dbd00bcd-054e-4fb9-aa40-954b39c9fb10", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/dbd00bcd-054e-4fb9-aa40-954b39c9fb10", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:17Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain1.com", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("c3e64ca8-e7c1-4602-b527-3fbb4ed985f1", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/c3e64ca8-e7c1-4602-b527-3fbb4ed985f1", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:17Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain2.com", TestUtil.ToTestableString(obj[1].Name), true);

            }
        }

        [TestMethod]
        public void DeleteSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Spaces.DeleteSpace(guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllRoutesForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""7853cfb5-09b4-4644-81c6-b766c9590841"",
        ""url"": ""/v2/routes/7853cfb5-09b4-4644-81c6-b766c9590841"",
        ""created_at"": ""2015-07-29T12:47:25Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""host"": ""host-9"",
        ""domain_guid"": ""ee172177-879e-4600-b158-e0e02ccd58f8"",
        ""space_guid"": ""a88492b3-2620-4786-8fa0-0d9b66fcd88d"",
        ""path"": """",
        ""domain_url"": ""/v2/domains/ee172177-879e-4600-b158-e0e02ccd58f8"",
        ""space_url"": ""/v2/spaces/a88492b3-2620-4786-8fa0-0d9b66fcd88d"",
        ""apps_url"": ""/v2/routes/7853cfb5-09b4-4644-81c6-b766c9590841/apps""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllRoutesForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("7853cfb5-09b4-4644-81c6-b766c9590841", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/7853cfb5-09b4-4644-81c6-b766c9590841", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:25Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-9", TestUtil.ToTestableString(obj[0].Host), true);
                Assert.AreEqual("ee172177-879e-4600-b158-e0e02ccd58f8", TestUtil.ToTestableString(obj[0].DomainGuid), true);
                Assert.AreEqual("a88492b3-2620-4786-8fa0-0d9b66fcd88d", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Path), true);
                Assert.AreEqual("/v2/domains/ee172177-879e-4600-b158-e0e02ccd58f8", TestUtil.ToTestableString(obj[0].DomainUrl), true);
                Assert.AreEqual("/v2/spaces/a88492b3-2620-4786-8fa0-0d9b66fcd88d", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/routes/7853cfb5-09b4-4644-81c6-b766c9590841/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSpacesTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""afeab80a-a616-4c37-aa1c-4dfa7fc794cf"",
        ""url"": ""/v2/spaces/afeab80a-a616-4c37-aa1c-4dfa7fc794cf"",
        ""created_at"": ""2015-07-29T12:47:25Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1718"",
        ""organization_guid"": ""00188462-49ec-4e9e-becd-04872031cc14"",
        ""space_quota_definition_guid"": null,
        ""allow_ssh"": true,
        ""organization_url"": ""/v2/organizations/00188462-49ec-4e9e-becd-04872031cc14"",
        ""developers_url"": ""/v2/spaces/afeab80a-a616-4c37-aa1c-4dfa7fc794cf/developers"",
        ""managers_url"": ""/v2/spaces/afeab80a-a616-4c37-aa1c-4dfa7fc794cf/managers"",
        ""auditors_url"": ""/v2/spaces/afeab80a-a616-4c37-aa1c-4dfa7fc794cf/auditors"",
        ""apps_url"": ""/v2/spaces/afeab80a-a616-4c37-aa1c-4dfa7fc794cf/apps"",
        ""routes_url"": ""/v2/spaces/afeab80a-a616-4c37-aa1c-4dfa7fc794cf/routes"",
        ""domains_url"": ""/v2/spaces/afeab80a-a616-4c37-aa1c-4dfa7fc794cf/domains"",
        ""service_instances_url"": ""/v2/spaces/afeab80a-a616-4c37-aa1c-4dfa7fc794cf/service_instances"",
        ""app_events_url"": ""/v2/spaces/afeab80a-a616-4c37-aa1c-4dfa7fc794cf/app_events"",
        ""events_url"": ""/v2/spaces/afeab80a-a616-4c37-aa1c-4dfa7fc794cf/events"",
        ""security_groups_url"": ""/v2/spaces/afeab80a-a616-4c37-aa1c-4dfa7fc794cf/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Spaces.ListAllSpaces().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("afeab80a-a616-4c37-aa1c-4dfa7fc794cf", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/afeab80a-a616-4c37-aa1c-4dfa7fc794cf", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:25Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1718", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("00188462-49ec-4e9e-becd-04872031cc14", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].AllowSsh), true);
                Assert.AreEqual("/v2/organizations/00188462-49ec-4e9e-becd-04872031cc14", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/afeab80a-a616-4c37-aa1c-4dfa7fc794cf/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/afeab80a-a616-4c37-aa1c-4dfa7fc794cf/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/afeab80a-a616-4c37-aa1c-4dfa7fc794cf/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/afeab80a-a616-4c37-aa1c-4dfa7fc794cf/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/afeab80a-a616-4c37-aa1c-4dfa7fc794cf/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/afeab80a-a616-4c37-aa1c-4dfa7fc794cf/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/afeab80a-a616-4c37-aa1c-4dfa7fc794cf/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/afeab80a-a616-4c37-aa1c-4dfa7fc794cf/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/afeab80a-a616-4c37-aa1c-4dfa7fc794cf/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/afeab80a-a616-4c37-aa1c-4dfa7fc794cf/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateManagerWithSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""8dad58f4-b98b-4e99-95fb-ba92a55a73dc"",
    ""url"": ""/v2/spaces/8dad58f4-b98b-4e99-95fb-ba92a55a73dc"",
    ""created_at"": ""2015-07-29T12:47:24Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1692"",
    ""organization_guid"": ""867e99ef-8e89-48f5-b1d1-7879fad01574"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/867e99ef-8e89-48f5-b1d1-7879fad01574"",
    ""developers_url"": ""/v2/spaces/8dad58f4-b98b-4e99-95fb-ba92a55a73dc/developers"",
    ""managers_url"": ""/v2/spaces/8dad58f4-b98b-4e99-95fb-ba92a55a73dc/managers"",
    ""auditors_url"": ""/v2/spaces/8dad58f4-b98b-4e99-95fb-ba92a55a73dc/auditors"",
    ""apps_url"": ""/v2/spaces/8dad58f4-b98b-4e99-95fb-ba92a55a73dc/apps"",
    ""routes_url"": ""/v2/spaces/8dad58f4-b98b-4e99-95fb-ba92a55a73dc/routes"",
    ""domains_url"": ""/v2/spaces/8dad58f4-b98b-4e99-95fb-ba92a55a73dc/domains"",
    ""service_instances_url"": ""/v2/spaces/8dad58f4-b98b-4e99-95fb-ba92a55a73dc/service_instances"",
    ""app_events_url"": ""/v2/spaces/8dad58f4-b98b-4e99-95fb-ba92a55a73dc/app_events"",
    ""events_url"": ""/v2/spaces/8dad58f4-b98b-4e99-95fb-ba92a55a73dc/events"",
    ""security_groups_url"": ""/v2/spaces/8dad58f4-b98b-4e99-95fb-ba92a55a73dc/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? manager_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.AssociateManagerWithSpace(guid, manager_guid).Result;


                Assert.AreEqual("8dad58f4-b98b-4e99-95fb-ba92a55a73dc", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/8dad58f4-b98b-4e99-95fb-ba92a55a73dc", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:24Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1692", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("867e99ef-8e89-48f5-b1d1-7879fad01574", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/867e99ef-8e89-48f5-b1d1-7879fad01574", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/8dad58f4-b98b-4e99-95fb-ba92a55a73dc/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/8dad58f4-b98b-4e99-95fb-ba92a55a73dc/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/8dad58f4-b98b-4e99-95fb-ba92a55a73dc/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/8dad58f4-b98b-4e99-95fb-ba92a55a73dc/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/8dad58f4-b98b-4e99-95fb-ba92a55a73dc/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/8dad58f4-b98b-4e99-95fb-ba92a55a73dc/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/8dad58f4-b98b-4e99-95fb-ba92a55a73dc/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/8dad58f4-b98b-4e99-95fb-ba92a55a73dc/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/8dad58f4-b98b-4e99-95fb-ba92a55a73dc/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/8dad58f4-b98b-4e99-95fb-ba92a55a73dc/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void UpdateSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""d38c4912-434a-4393-bec4-bb5275845a42"",
    ""url"": ""/v2/spaces/d38c4912-434a-4393-bec4-bb5275845a42"",
    ""created_at"": ""2015-07-29T12:47:25Z"",
    ""updated_at"": ""2015-07-29T12:47:25Z""
  },
  ""entity"": {
    ""name"": ""New Space Name"",
    ""organization_guid"": ""04cd5940-dd45-4027-bfa0-d8ce0b3dd828"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/04cd5940-dd45-4027-bfa0-d8ce0b3dd828"",
    ""developers_url"": ""/v2/spaces/d38c4912-434a-4393-bec4-bb5275845a42/developers"",
    ""managers_url"": ""/v2/spaces/d38c4912-434a-4393-bec4-bb5275845a42/managers"",
    ""auditors_url"": ""/v2/spaces/d38c4912-434a-4393-bec4-bb5275845a42/auditors"",
    ""apps_url"": ""/v2/spaces/d38c4912-434a-4393-bec4-bb5275845a42/apps"",
    ""routes_url"": ""/v2/spaces/d38c4912-434a-4393-bec4-bb5275845a42/routes"",
    ""domains_url"": ""/v2/spaces/d38c4912-434a-4393-bec4-bb5275845a42/domains"",
    ""service_instances_url"": ""/v2/spaces/d38c4912-434a-4393-bec4-bb5275845a42/service_instances"",
    ""app_events_url"": ""/v2/spaces/d38c4912-434a-4393-bec4-bb5275845a42/app_events"",
    ""events_url"": ""/v2/spaces/d38c4912-434a-4393-bec4-bb5275845a42/events"",
    ""security_groups_url"": ""/v2/spaces/d38c4912-434a-4393-bec4-bb5275845a42/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateSpaceRequest value = new UpdateSpaceRequest();


                var obj = cfClient.Spaces.UpdateSpace(guid, value).Result;


                Assert.AreEqual("d38c4912-434a-4393-bec4-bb5275845a42", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/d38c4912-434a-4393-bec4-bb5275845a42", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:25Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-07-29T12:47:25Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("New Space Name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("04cd5940-dd45-4027-bfa0-d8ce0b3dd828", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/04cd5940-dd45-4027-bfa0-d8ce0b3dd828", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/d38c4912-434a-4393-bec4-bb5275845a42/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/d38c4912-434a-4393-bec4-bb5275845a42/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/d38c4912-434a-4393-bec4-bb5275845a42/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/d38c4912-434a-4393-bec4-bb5275845a42/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/d38c4912-434a-4393-bec4-bb5275845a42/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/d38c4912-434a-4393-bec4-bb5275845a42/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/d38c4912-434a-4393-bec4-bb5275845a42/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/d38c4912-434a-4393-bec4-bb5275845a42/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/d38c4912-434a-4393-bec4-bb5275845a42/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/d38c4912-434a-4393-bec4-bb5275845a42/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllAuditorsForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-284"",
        ""url"": ""/v2/users/uaa-id-284"",
        ""created_at"": ""2015-07-29T12:47:25Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""auditor@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-284/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-284/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-284/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-284/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-284/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-284/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-284/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllAuditorsForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-284", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-284", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:25Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("auditor@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-284/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-284/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-284/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-284/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-284/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-284/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-284/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

    }
}