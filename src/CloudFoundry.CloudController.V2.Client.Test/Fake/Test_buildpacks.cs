//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class BuildpacksEndpoint
{
        [TestMethod]
        public void EnableOrDisableBuildpackTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""8577ac08-fb49-48c8-a9c9-29280230c227"",
    ""url"": ""/v2/buildpacks/43b4d3d1-e8ea-4181-8973-acce7b5b2ea1"",
    ""created_at"": ""2017-01-04T15:58:57Z"",
    ""updated_at"": ""2017-01-04T15:58:57Z""
  },
  ""entity"": {
    ""name"": ""name_1"",
    ""position"": 1,
    ""enabled"": false,
    ""locked"": false,
    ""filename"": ""name-1961""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                EnableOrDisableBuildpackRequest value = new EnableOrDisableBuildpackRequest();


                var obj = cfClient.Buildpacks.EnableOrDisableBuildpack(guid, value).Result;


                Assert.AreEqual("8577ac08-fb49-48c8-a9c9-29280230c227", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/buildpacks/43b4d3d1-e8ea-4181-8973-acce7b5b2ea1", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2017-01-04T15:58:57Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2017-01-04T15:58:57Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name_1", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Position), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Enabled), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Locked), true);
                Assert.AreEqual("name-1961", TestUtil.ToTestableString(obj.Filename), true);

            }
        }

        [TestMethod]
        public void RetrieveBuildpackTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""468a4e8f-ebfe-4051-9d2b-30ca510dc9b1"",
    ""url"": ""/v2/buildpacks/db272671-542b-4b88-93e2-eae922d027d5"",
    ""created_at"": ""2017-01-04T15:58:57Z"",
    ""updated_at"": ""2017-01-04T15:58:57Z""
  },
  ""entity"": {
    ""name"": ""name_1"",
    ""position"": 1,
    ""enabled"": true,
    ""locked"": false,
    ""filename"": ""name-1979""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Buildpacks.RetrieveBuildpack(guid).Result;


                Assert.AreEqual("468a4e8f-ebfe-4051-9d2b-30ca510dc9b1", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/buildpacks/db272671-542b-4b88-93e2-eae922d027d5", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2017-01-04T15:58:57Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2017-01-04T15:58:57Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name_1", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Position), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Enabled), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Locked), true);
                Assert.AreEqual("name-1979", TestUtil.ToTestableString(obj.Filename), true);

            }
        }

        [TestMethod]
        public void ListAllBuildpacksTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 3,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""129c543a-7690-42d5-9b24-93d88a0781fd"",
        ""url"": ""/v2/buildpacks/3a92eb13-1e4a-438c-b648-09e5a8097ee6"",
        ""created_at"": ""2017-01-04T15:58:57Z"",
        ""updated_at"": ""2017-01-04T15:58:57Z""
      },
      ""entity"": {
        ""name"": ""name_1"",
        ""position"": 1,
        ""enabled"": true,
        ""locked"": false,
        ""filename"": ""name-1970""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""129c543a-7690-42d5-9b24-93d88a0781fd"",
        ""url"": ""/v2/buildpacks/32e3b725-b12f-4744-b240-c6713ccdf766"",
        ""created_at"": ""2017-01-04T15:58:57Z"",
        ""updated_at"": ""2017-01-04T15:58:57Z""
      },
      ""entity"": {
        ""name"": ""name_2"",
        ""position"": 2,
        ""enabled"": true,
        ""locked"": false,
        ""filename"": ""name-1971""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""129c543a-7690-42d5-9b24-93d88a0781fd"",
        ""url"": ""/v2/buildpacks/f41fa069-f044-481a-acbf-b55648bf5ed8"",
        ""created_at"": ""2017-01-04T15:58:57Z"",
        ""updated_at"": ""2017-01-04T15:58:57Z""
      },
      ""entity"": {
        ""name"": ""name_3"",
        ""position"": 3,
        ""enabled"": true,
        ""locked"": false,
        ""filename"": ""name-1972""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Buildpacks.ListAllBuildpacks().Result;

                Assert.AreEqual("3", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("129c543a-7690-42d5-9b24-93d88a0781fd", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/buildpacks/3a92eb13-1e4a-438c-b648-09e5a8097ee6", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2017-01-04T15:58:57Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2017-01-04T15:58:57Z", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name_1", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[0].Position), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Enabled), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Locked), true);
                Assert.AreEqual("name-1970", TestUtil.ToTestableString(obj[0].Filename), true);
                Assert.AreEqual("129c543a-7690-42d5-9b24-93d88a0781fd", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/buildpacks/32e3b725-b12f-4744-b240-c6713ccdf766", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2017-01-04T15:58:57Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2017-01-04T15:58:57Z", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name_2", TestUtil.ToTestableString(obj[1].Name), true);
                Assert.AreEqual("2", TestUtil.ToTestableString(obj[1].Position), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[1].Enabled), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Locked), true);
                Assert.AreEqual("name-1971", TestUtil.ToTestableString(obj[1].Filename), true);
                Assert.AreEqual("129c543a-7690-42d5-9b24-93d88a0781fd", TestUtil.ToTestableString(obj[2].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/buildpacks/f41fa069-f044-481a-acbf-b55648bf5ed8", TestUtil.ToTestableString(obj[2].EntityMetadata.Url), true);
                Assert.AreEqual("2017-01-04T15:58:57Z", TestUtil.ToTestableString(obj[2].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2017-01-04T15:58:57Z", TestUtil.ToTestableString(obj[2].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name_3", TestUtil.ToTestableString(obj[2].Name), true);
                Assert.AreEqual("3", TestUtil.ToTestableString(obj[2].Position), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[2].Enabled), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[2].Locked), true);
                Assert.AreEqual("name-1972", TestUtil.ToTestableString(obj[2].Filename), true);

            }
        }

        [TestMethod]
        public void LockOrUnlockBuildpackTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""57ceadd8-d492-43a0-985a-67eeb996de17"",
    ""url"": ""/v2/buildpacks/d2441a1a-0f5d-4a7e-b37a-39c0f7e1127b"",
    ""created_at"": ""2017-01-04T15:58:57Z"",
    ""updated_at"": ""2017-01-04T15:58:57Z""
  },
  ""entity"": {
    ""name"": ""name_1"",
    ""position"": 1,
    ""enabled"": true,
    ""locked"": true,
    ""filename"": ""name-1967""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                LockOrUnlockBuildpackRequest value = new LockOrUnlockBuildpackRequest();


                var obj = cfClient.Buildpacks.LockOrUnlockBuildpack(guid, value).Result;


                Assert.AreEqual("57ceadd8-d492-43a0-985a-67eeb996de17", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/buildpacks/d2441a1a-0f5d-4a7e-b37a-39c0f7e1127b", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2017-01-04T15:58:57Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2017-01-04T15:58:57Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name_1", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Position), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Enabled), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Locked), true);
                Assert.AreEqual("name-1967", TestUtil.ToTestableString(obj.Filename), true);

            }
        }

        [TestMethod]
        public void DeleteBuildpackTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Buildpacks.DeleteBuildpack(guid).Wait();

            }
        }

        [TestMethod]
        public void CreatesAdminBuildpackTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""b8b1a910-baa0-40d3-b72b-b983354f8efc"",
    ""url"": ""/v2/buildpacks/dfe3dbf9-639f-4c4d-ab90-f3fc12492342"",
    ""created_at"": ""2017-01-04T15:58:57Z"",
    ""updated_at"": ""2017-01-04T15:58:57Z""
  },
  ""entity"": {
    ""name"": ""Golang_buildpack"",
    ""position"": 1,
    ""enabled"": true,
    ""locked"": false,
    ""filename"": null
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreatesAdminBuildpackRequest value = new CreatesAdminBuildpackRequest();


                var obj = cfClient.Buildpacks.CreatesAdminBuildpack(value).Result;


                Assert.AreEqual("b8b1a910-baa0-40d3-b72b-b983354f8efc", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/buildpacks/dfe3dbf9-639f-4c4d-ab90-f3fc12492342", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2017-01-04T15:58:57Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2017-01-04T15:58:57Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("Golang_buildpack", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Position), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Enabled), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Locked), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Filename), true);

            }
        }

        [TestMethod]
        public void ChangePositionOfBuildpackTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""3ed72ece-5382-4efc-8ae7-abbd584d7352"",
    ""url"": ""/v2/buildpacks/9dae7cec-928c-49a5-8e22-ed8bda708fa1"",
    ""created_at"": ""2017-01-04T15:58:57Z"",
    ""updated_at"": ""2017-01-04T15:58:57Z""
  },
  ""entity"": {
    ""name"": ""name_1"",
    ""position"": 3,
    ""enabled"": true,
    ""locked"": false,
    ""filename"": ""name-1964""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                ChangePositionOfBuildpackRequest value = new ChangePositionOfBuildpackRequest();


                var obj = cfClient.Buildpacks.ChangePositionOfBuildpack(guid, value).Result;


                Assert.AreEqual("3ed72ece-5382-4efc-8ae7-abbd584d7352", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/buildpacks/9dae7cec-928c-49a5-8e22-ed8bda708fa1", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2017-01-04T15:58:57Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2017-01-04T15:58:57Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name_1", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("3", TestUtil.ToTestableString(obj.Position), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Enabled), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Locked), true);
                Assert.AreEqual("name-1964", TestUtil.ToTestableString(obj.Filename), true);

            }
        }

    }
}