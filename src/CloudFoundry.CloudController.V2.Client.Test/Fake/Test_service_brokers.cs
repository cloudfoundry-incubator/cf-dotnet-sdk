//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class ServiceBrokersEndpoint
{
        [TestMethod]
        public void DeleteServiceBrokerTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.ServiceBrokers.DeleteServiceBroker(guid).Wait();

            }
        }

        [TestMethod]
        public void UpdateServiceBrokerTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""cdd61e04-24da-4ef1-95ce-681135917177"",
    ""created_at"": ""2015-07-29T12:47:26Z"",
    ""updated_at"": ""2015-07-29T12:47:26Z"",
    ""url"": ""/v2/service_brokers/cdd61e04-24da-4ef1-95ce-681135917177""
  },
  ""entity"": {
    ""name"": ""name-1808"",
    ""broker_url"": ""https://mybroker.example.com"",
    ""auth_username"": ""admin-user""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateServiceBrokerRequest value = new UpdateServiceBrokerRequest();


                var obj = cfClient.ServiceBrokers.UpdateServiceBroker(guid, value).Result;


                Assert.AreEqual("cdd61e04-24da-4ef1-95ce-681135917177", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("2015-07-29T12:47:26Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-07-29T12:47:26Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("/v2/service_brokers/cdd61e04-24da-4ef1-95ce-681135917177", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("name-1808", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("https://mybroker.example.com", TestUtil.ToTestableString(obj.BrokerUrl), true);
                Assert.AreEqual("admin-user", TestUtil.ToTestableString(obj.AuthUsername), true);

            }
        }

        [TestMethod]
        public void ListAllServiceBrokersTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 3,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""2c636b64-8e8b-4913-b50a-f08e860ea89c"",
        ""url"": ""/v2/service_brokers/2c636b64-8e8b-4913-b50a-f08e860ea89c"",
        ""created_at"": ""2015-07-29T12:47:26Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1796"",
        ""broker_url"": ""https://foo.com/url-68"",
        ""auth_username"": ""auth_username-59""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""f5efafbf-00f2-4126-876c-c5564dcf6180"",
        ""url"": ""/v2/service_brokers/f5efafbf-00f2-4126-876c-c5564dcf6180"",
        ""created_at"": ""2015-07-29T12:47:26Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1797"",
        ""broker_url"": ""https://foo.com/url-69"",
        ""auth_username"": ""auth_username-60""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""30f635ab-740a-4b93-8037-f0e58b068649"",
        ""url"": ""/v2/service_brokers/30f635ab-740a-4b93-8037-f0e58b068649"",
        ""created_at"": ""2015-07-29T12:47:26Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1798"",
        ""broker_url"": ""https://foo.com/url-70"",
        ""auth_username"": ""auth_username-61""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.ServiceBrokers.ListAllServiceBrokers().Result;

                Assert.AreEqual("3", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("2c636b64-8e8b-4913-b50a-f08e860ea89c", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_brokers/2c636b64-8e8b-4913-b50a-f08e860ea89c", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:26Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1796", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("https://foo.com/url-68", TestUtil.ToTestableString(obj[0].BrokerUrl), true);
                Assert.AreEqual("auth_username-59", TestUtil.ToTestableString(obj[0].AuthUsername), true);
                Assert.AreEqual("f5efafbf-00f2-4126-876c-c5564dcf6180", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_brokers/f5efafbf-00f2-4126-876c-c5564dcf6180", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:26Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1797", TestUtil.ToTestableString(obj[1].Name), true);
                Assert.AreEqual("https://foo.com/url-69", TestUtil.ToTestableString(obj[1].BrokerUrl), true);
                Assert.AreEqual("auth_username-60", TestUtil.ToTestableString(obj[1].AuthUsername), true);
                Assert.AreEqual("30f635ab-740a-4b93-8037-f0e58b068649", TestUtil.ToTestableString(obj[2].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_brokers/30f635ab-740a-4b93-8037-f0e58b068649", TestUtil.ToTestableString(obj[2].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:26Z", TestUtil.ToTestableString(obj[2].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1798", TestUtil.ToTestableString(obj[2].Name), true);
                Assert.AreEqual("https://foo.com/url-70", TestUtil.ToTestableString(obj[2].BrokerUrl), true);
                Assert.AreEqual("auth_username-61", TestUtil.ToTestableString(obj[2].AuthUsername), true);

            }
        }

        [TestMethod]
        public void CreateServiceBrokerTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""6cf10701-cc2e-470e-bd02-0e75723a70bc"",
    ""created_at"": ""2015-07-29T12:47:26Z"",
    ""updated_at"": null,
    ""url"": ""/v2/service_brokers/6cf10701-cc2e-470e-bd02-0e75723a70bc""
  },
  ""entity"": {
    ""name"": ""service-broker-name"",
    ""broker_url"": ""https://broker.example.com"",
    ""auth_username"": ""admin""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateServiceBrokerRequest value = new CreateServiceBrokerRequest();


                var obj = cfClient.ServiceBrokers.CreateServiceBroker(value).Result;


                Assert.AreEqual("6cf10701-cc2e-470e-bd02-0e75723a70bc", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("2015-07-29T12:47:26Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("/v2/service_brokers/6cf10701-cc2e-470e-bd02-0e75723a70bc", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("service-broker-name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("https://broker.example.com", TestUtil.ToTestableString(obj.BrokerUrl), true);
                Assert.AreEqual("admin", TestUtil.ToTestableString(obj.AuthUsername), true);

            }
        }

        [TestMethod]
        public void RetrieveServiceBrokerTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""1b5e1243-56e0-44d5-a4c4-89926bc9b76f"",
    ""url"": ""/v2/service_brokers/1b5e1243-56e0-44d5-a4c4-89926bc9b76f"",
    ""created_at"": ""2015-07-29T12:47:26Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1805"",
    ""broker_url"": ""https://foo.com/url-77"",
    ""auth_username"": ""auth_username-68""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceBrokers.RetrieveServiceBroker(guid).Result;


                Assert.AreEqual("1b5e1243-56e0-44d5-a4c4-89926bc9b76f", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_brokers/1b5e1243-56e0-44d5-a4c4-89926bc9b76f", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-29T12:47:26Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1805", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("https://foo.com/url-77", TestUtil.ToTestableString(obj.BrokerUrl), true);
                Assert.AreEqual("auth_username-68", TestUtil.ToTestableString(obj.AuthUsername), true);

            }
        }

    }
}