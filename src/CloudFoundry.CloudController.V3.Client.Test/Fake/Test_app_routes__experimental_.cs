//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V3.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V3.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class AppRoutesExperimentalEndpoint
{
        [TestMethod]
        public void ListRoutesTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""pagination"": {
    ""total_results"": 2,
    ""first"": {
      ""href"": ""/v3/apps/guid-8432bfef-4da5-4b32-990e-54f5ae4a54bb/routes?page=1=50""
    },
    ""last"": {
      ""href"": ""/v3/apps/guid-8432bfef-4da5-4b32-990e-54f5ae4a54bb/routes?page=1=50""
    },
    ""next"": null,
    ""previous"": null
  },
  ""resources"": [
    {
      ""guid"": ""ffbb8a11-0352-49d6-bb92-ebaa987793fe"",
      ""host"": ""host-11"",
      ""path"": """",
      ""created_at"": ""2016-02-05T12:14:38Z"",
      ""updated_at"": null,
      ""_links"": {
        ""space"": {
          ""href"": ""/v2/spaces/e860946e-bb59-4f85-9ecf-c4735644fc25""
        },
        ""domain"": {
          ""href"": ""/v2/domains/076741fc-9029-41b9-b114-0bce66b8fd65""
        }
      }
    },
    {
      ""guid"": ""7faf2749-a0ea-49ba-a110-acd133ede1ce"",
      ""host"": ""host-12"",
      ""path"": ""/foo/bar"",
      ""created_at"": ""2016-02-05T12:14:38Z"",
      ""updated_at"": null,
      ""_links"": {
        ""space"": {
          ""href"": ""/v2/spaces/e860946e-bb59-4f85-9ecf-c4735644fc25""
        },
        ""domain"": {
          ""href"": ""/v2/domains/7fcb7c00-c8ae-4689-a1b1-97d7fbb28d3a""
        }
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.AppRoutesExperimental.ListRoutes(guid).Result;

                Assert.AreEqual("ffbb8a11-0352-49d6-bb92-ebaa987793fe", TestUtil.ToTestableString(obj[0].Guid), true);
                Assert.AreEqual("host-11", TestUtil.ToTestableString(obj[0].Host), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Path), true);
                Assert.AreEqual("2016-02-05T12:14:38Z", TestUtil.ToTestableString(obj[0].CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].UpdatedAt), true);
                Assert.AreEqual("7faf2749-a0ea-49ba-a110-acd133ede1ce", TestUtil.ToTestableString(obj[1].Guid), true);
                Assert.AreEqual("host-12", TestUtil.ToTestableString(obj[1].Host), true);
                Assert.AreEqual("/foo/bar", TestUtil.ToTestableString(obj[1].Path), true);
                Assert.AreEqual("2016-02-05T12:14:38Z", TestUtil.ToTestableString(obj[1].CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].UpdatedAt), true);

            }
        }

        [TestMethod]
        public void UnmapRouteTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UnmapRouteRequest value = new UnmapRouteRequest();


                cfClient.AppRoutesExperimental.UnmapRoute(guid, value).Wait();

            }
        }

    }
}